<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数组</title>
    <url>/java-basics/02-%E6%95%B0%E7%BB%84.html</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li><p>数组是多个<strong>相同类型</strong>数据的组合，实现对这些数据的统一管理</p>
</li>
<li><p>数组中的元素可以是<strong>任何</strong>数据类型，包括<em>基本数据类型<em>和</em>引用数据类型</em></p>
</li>
<li><p>数组属于引用数据类型，数组型数据是对象（object），数组中的每个元素相当于该对象的成员变量</p>
</li>
</ul><hr><h2 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 声明数组 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个存放字符串的数组names</span></span><br><span class="line">String[] names;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个存放整型的数组scores</span></span><br><span class="line"><span class="keyword">int</span> scores[];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化数组 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.静态初始化：初始化数组和给数组元素赋值同时进行</span></span><br><span class="line">names = <span class="keyword">new</span> String[]&#123;<span class="string">"赵涵"</span>,<span class="string">"赵娟"</span>,<span class="string">"赵雨婕"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.动态初始化：初始化数组和给数组元素赋值分开进行</span></span><br><span class="line">scores = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">scores[<span class="number">0</span>] = <span class="number">97</span>;</span><br><span class="line">scores[<span class="number">1</span>] = <span class="number">98</span>;</span><br><span class="line">scores[<span class="number">2</span>] = <span class="number">99</span>;</span><br></pre></td></tr></table></figure><a id="more"></a>



<p>声明数组的错误写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line">String[] names = <span class="keyword">new</span> String[<span class="number">3</span>]&#123;<span class="string">"aa"</span>, <span class="string">"bb"</span>, <span class="string">"cc"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">int</span> i[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="keyword">new</span> <span class="keyword">int</span>[];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>无论是动态初始化还是静态初始化数组，必定在创建的时候就指明了数组的长度！</p>
</blockquote>
<hr>
<h2 id="数组的长度"><a href="#数组的长度" class="headerlink" title="数组的长度"></a>数组的长度</h2><p>通过数组的 <code>length</code> 属性可以获取数组的长度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(names.length); <span class="comment">// 3</span></span><br><span class="line">System.out.print(scores.length); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; names.length; i++) &#123;</span><br><span class="line">	<span class="comment">// 打印数组 names 中的所有元素</span></span><br><span class="line">	System.out.println(names[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="数组元素的初始化默认值"><a href="#数组元素的初始化默认值" class="headerlink" title="数组元素的初始化默认值"></a>数组元素的初始化默认值</h2><h3 id="基本数据类型的数组"><a href="#基本数据类型的数组" class="headerlink" title="基本数据类型的数组"></a>基本数据类型的数组</h3><ul>
<li>对于 <code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code> 而言，创建数组以后，默认值为 <code>0</code></li>
<li>对于 <code>float</code>、<code>double</code> 而言，创建数组以后，默认值为 <code>0.0</code>。</li>
<li>对于 <code>char</code> 而言，创建数组以后，默认值为 <code>\0</code>，即空格。</li>
<li>对于 <code>boolean</code> 而言，创建数组以后，默认值为 <code>false</code>。</li>
</ul>
<h3 id="引用数据类型的数组"><a href="#引用数据类型的数组" class="headerlink" title="引用数据类型的数组"></a>引用数据类型的数组</h3><ul>
<li>以 <code>String</code> 类为例，默认初始化值为 <code>null</code>。</li>
</ul>
<hr>
<h2 id="一维数组的内存结构"><a href="#一维数组的内存结构" class="headerlink" title="一维数组的内存结构"></a>一维数组的内存结构</h2><p>内存基本结构，如图-1<br><img src="/images/javabasics/array-1.png" alt="图-1"></p>
<p>基本数据类型的数组在内存中的结构，如图-2<br><img src="/images/javabasics/array-2.png" alt="图-2"></p>
<p>引用数据类型的数组在内存中的结构，如图-3<br><img src="/images/javabasics/array-3.png" alt="图-3"></p>
<p>一些创建数组方式，它们的内存结构都是相同的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] scores1 = <span class="keyword">new</span> scores1[]&#123;<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> scores2[] = &#123;<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] scores3;</span><br><span class="line">scores3 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="数组元素的引用"><a href="#数组元素的引用" class="headerlink" title="数组元素的引用"></a>数组元素的引用</h2><ul>
<li>定义并用运算符 <code>new</code> 为之分配空间后，才可以引用数组中的每个元素</li>
</ul>
<ul>
<li>数组元素的引用方式：<code>数组名[数组元素下标]</code></li>
</ul>
<ul>
<li>数组元素下标可以是整型常量或整型表达式 如 <code>a[3]</code>、<code>b[i]</code>、<code>c[6*i]</code><ul>
<li>数组元素下标从 <code>0</code> 开始，长度为 <code>n</code> 的数组合法下标取值范围是 <code>0</code> ==&gt; <code>n-1</code>，如 <code>int a[] = new int[3];</code> 可以引用的数组元素为 <code>a[0]</code>、<code>a[1]</code>、<code>a[2]</code></li>
</ul>
</li>
</ul>
<ul>
<li>每个数组都有一个属性 <code>length</code> 指明它的长度，例如 <code>a.length</code> 指明数组 <code>a</code> 的长度（即元素的个数）<ul>
<li>数组一旦初始化，其长度是<strong>不可变</strong>的</li>
</ul>
</li>
</ul>
<hr>
<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="声明并初始化"><a href="#声明并初始化" class="headerlink" title="声明并初始化"></a>声明并初始化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line">String[][] strs = <span class="keyword">new</span> String[<span class="number">4</span>][<span class="number">3</span>]; <span class="comment">// 类似于 4 行 3 列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">String[][] strs1 = <span class="keyword">new</span> String[<span class="number">4</span>][];</span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line">strs1[<span class="number">0</span>] = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br><span class="line">strs1[<span class="number">3</span>] = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">6</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用二维数组</span></span><br><span class="line">arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">12</span>; <span class="comment">// 需要两个下标来引用一个元素</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="二维数组的长度"><a href="#二维数组的长度" class="headerlink" title="二维数组的长度"></a>二维数组的长度</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arr.length; <span class="comment">// 3</span></span><br><span class="line">arr[<span class="number">1</span>].length; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="遍历二维数组"><a href="#遍历二维数组" class="headerlink" title="遍历二维数组"></a>遍历二维数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">        <span class="comment">// 打印数组的所有元素</span></span><br><span class="line">        System.out.println(arr[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="二维数组的内存结构"><a href="#二维数组的内存结构" class="headerlink" title="二维数组的内存结构"></a>二维数组的内存结构</h2><p><img src="/images/javabasics/array-4.png" alt="图-1"><br><img src="../../images/javabasics/array-5.png" alt="图-2"></p>
<hr>
<h2 id="数组的常见异常"><a href="#数组的常见异常" class="headerlink" title="数组的常见异常"></a>数组的常见异常</h2><ul>
<li>数组下标越界的异常：<code>java.lang.ArrayIndexOutOfBoundsException</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] i = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">i[<span class="number">0</span>] = <span class="number">90</span>;</span><br><span class="line">i[<span class="number">10</span>] = <span class="number">99</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt;= i.length; m++) &#123;</span><br><span class="line">    System.out.println(i[m]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>空指针的异常：<code>NullPointerException</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="keyword">boolean</span>[] b = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">3</span>];</span><br><span class="line">b = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(b[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line">String[] str = <span class="keyword">new</span> String[<span class="number">4</span>];</span><br><span class="line">System.out.println(str[<span class="number">3</span>].toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种</span></span><br><span class="line"><span class="keyword">int</span>[][] j = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">j[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">12</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="数组的常见算法"><a href="#数组的常见算法" class="headerlink" title="数组的常见算法"></a>数组的常见算法</h2><ul>
<li>求数组元素的最大值、最小值、和、平均值等</li>
</ul>
<ul>
<li>数组的复制和反转等</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[arr.length - <span class="number">1</span> - i];</span><br><span class="line">    arr[arr.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>, y = arr.length - <span class="number">1</span>; x &lt; y; x++, y--) &#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[x];</span><br><span class="line">    arr[x] = arr[y];</span><br><span class="line">    arr[y] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>数组元素的排序<ul>
<li>插入排序<br>直接插入排序、折半排序、Shell 排序</li>
<li>交换排序<br>冒泡排序、快速排序（或分区交换排序）</li>
<li>归并排序</li>
<li>基数排序</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>开发中一般会直接调用 Arrays 工具类的 <code>Arrays.sort()</code> 方法。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 请你吃晚餐</title>
    <url>/java-basics/01-Java%E8%AF%B7%E4%BD%A0%E5%90%83%E6%99%9A%E9%A4%90.html</url>
    <content><![CDATA[<h2 id="JDK-与-JRE"><a href="#JDK-与-JRE" class="headerlink" title="JDK 与 JRE"></a>JDK 与 JRE</h2><p>JDK（Java Development Kit Java 开发工具包）</p><ul>
<li>JDK 是提供给 Java 开发人员使用的，其中包含了 Java 的开发工具，也包括了 JRE。所以安装了 JDK，就不用再单独安装 JRE 了。</li>
<li>其中的开发工具：<ul>
<li>编译工具（javac.exe）</li>
<li>打包工具（jar.exe）</li>
<li>反编译工具（javap.exe）<br>· · · · · ·</li>
</ul>
</li>
</ul><a id="more"></a>

<p>JRE（Java Runtime Environment Java 运行环境）</p>
<ul>
<li>包括 Java 虚拟机（JVM Java Virtual Machine）和 Java 程序所需的核心类库等，如果想要运行一个开发好的 Java 程序，计算机中只需要安装 JRE 即可。</li>
</ul>
<blockquote>
<p>简单而言，使用 JDK 的开发工具完成的 Java 程序，交给 JRE 去运行。</p>
</blockquote>
<hr>
<h2 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h2><ul>
<li><p>源文件以 <code>.java</code> 结尾</p>
</li>
<li><p>源文件中可以有多个 <code>class</code> 声明的类</p>
</li>
<li><p>类中可以有主方法（<code>main()</code> 方法）</p>
</li>
<li><p><code>main()</code> 方法是程序的入口，方法内是程序的执行部分</p>
</li>
<li><p>一个源文件中只能有一个声明为 <code>public</code> 的类，同时要求此类的类名与源文件的文件名一致</p>
</li>
<li><p>每条语句以分号结尾</p>
</li>
<li><p>执行程序：</p>
<ul>
<li>编译（javac.exe），生成 <code>.class</code> 字节码文件<br>字节码文件的数量与源文件中 <code>class</code> 声明类的数量一致。</li>
<li>运行（java.exe）</li>
</ul>
</li>
<li><p>多行注释不允许嵌套</p>
</li>
<li><p>文档注释<br>文档注释会被  javadoc.exe 解析。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  指定 Java 程序的作者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 指定源文件的版本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   方法的参数说明信息</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="关键字与保留字"><a href="#关键字与保留字" class="headerlink" title="关键字与保留字"></a>关键字与保留字</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul>
<li><p>被 Java 语言赋予了特殊含义，有专门用途的字符串</p>
</li>
<li><p>关键字中所有字母都为小写</p>
<ul>
<li>用于定义数据类型的关键字<br><code>class</code>、<code>interface</code>、<code>enum</code>、<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>、<code>char</code>、<code>boolean</code>、<code>void</code></li>
<li>用于定义数据类型<strong>值</strong>的关键字<br><code>true</code>、<code>false</code>、<code>null</code></li>
<li>用于定义流程控制的关键字<br><code>if</code>、<code>else</code>、<code>switch</code>、<code>case</code>、<code>default</code>、<code>while</code>、<code>do</code>、<code>for</code>、<code>break</code>、<code>continue</code>、<code>return</code></li>
<li>用于定义访问权限修饰符的关键字<br><code>private</code>、<code>protected</code>、<code>public</code></li>
<li>用于定义类、函数、变量修饰符的关键字<br><code>abstract</code>、<code>final</code>、<code>static</code>、<code>synchronized</code></li>
<li>用于定义建立实例及引用实例、判断实例的关键字<br><code>new</code>、<code>this</code>、<code>super</code>、<code>instanceof</code></li>
<li>用于异常处理的关键字<br><code>try</code>、<code>catch</code>、<code>finally</code>、<code>throw</code></li>
<li>用于包的关键字<br><code>package</code>、<code>import</code></li>
<li>其他修饰符关键字<br><code>native</code>、<code>strictfp</code>、<code>transient</code>、<code>volatile</code>、<code>assert</code></li>
</ul>
</li>
</ul>
<h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><ul>
<li>现有 Java 版本尚未使用，但以后版本可能会作为关键字使用。命名标识符时要避免使用保留字<br><code>byValue</code>、<code>cast</code>、<code>future</code>、<code>generic</code>、<code>inner</code>、<code>operator</code>、<code>outer</code>、<code>rest</code>、<code>var</code>、<code>goto</code>、<code>const</code></li>
</ul>
<hr>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul>
<li><p>Java 对各种变量、方法和类等要素命名使使用的字符序列称为标识符<br><em>凡是可以自己起名字的地方都叫标识符。</em></p>
</li>
<li><p>定义合法标识符规则（小学生守则）</p>
<ul>
<li>由字母、数字、下划线或 <code>$</code> 组成</li>
<li>不可以数字开头</li>
<li>不可以直接使用关键字和保留字<br><em>但能包含关键字和保留字</em></li>
<li>区分大小写，长度无限制</li>
<li>不能包含空格</li>
</ul>
</li>
<li><p>命名规范（小学生日常行为规范）</p>
<ul>
<li>包名<br>多个单词组成时，所有字母都小写：<code>xxxyyyzzz</code></li>
<li>类名、接口名<br>多个单词组成时，所有单词的首字母大写：<code>XxxYyyZzz</code></li>
<li>变量名、方法名<br>多个单词组成时，除第一个单词外其他单词首字母大写：<code>xxxYyyZzz</code></li>
<li>常量名<br>所有字母都大写，多个单词使用下划线连接：<code>XXX_YYY_ZZZ</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>命名规则必须遵守，而命名规范是推荐遵守，但只有你使用了命名规范才知道是真的好。</p>
</blockquote>
<hr>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li><p>变量的概念</p>
<ul>
<li>内存中的一个存储区域</li>
<li>该区域有自己的名称（变量名）和类型（数据类型）</li>
<li>变量必须先声明后使用</li>
<li>该区域的数据可以在同一类型范围内不断变化</li>
</ul>
</li>
<li><p>注意</p>
<ul>
<li>变量的作用域<br>一对 <code>{}</code> 之间有效</li>
<li>初始化值</li>
</ul>
</li>
<li><p>定义变量的格式<br><code>数据类型 变量名 = 初始化值;</code> <code>boolean flag = true;</code></p>
</li>
<li><p>变量通过使用变量名来访问这块区域</p>
</li>
</ul>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul>
<li>在方法体外，类体内声明的变量称为<strong>成员变量</strong></li>
<li>在方法体内部声明的变量称为<strong>局部变量</strong></li>
</ul>
<embed type="image/svg+xml" src="/images/javabasics/all-variables.svg">

<ul>
<li>注意二者在初始化值方面的异同<ul>
<li>同<br>都有生命周期。</li>
<li>异<br>局部变量除形参外，需显示初始化。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><embed type="image/svg+xml" src="/images/javabasics/data-type.svg">

<ul>
<li>自动类型转换<br>当容量小的数据类型与容量大的数据类型做运算时，容量小的会自动转换为容量大的数据类型。<br><code>char</code>、<code>byte</code>、<code>short</code> ==&gt; <code>int</code> ==&gt; <code>long</code> ==&gt; <code>float</code> ==&gt; <code>double</code></li>
</ul>
<blockquote>
<p>注意：当 <code>char</code>、<code>byte</code>、<code>short</code> 之间做运算时，默认的结果为 <code>int</code> 类型。</p>
</blockquote>
<ul>
<li>强制类型转换<br>强制类型转换符 <code>()</code>，括号中填写需要强制转换的类型。</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 IT 专业</title>
    <url>/chat/%E6%B5%85%E8%B0%88IT%E4%B8%93%E4%B8%9A.html</url>
    <content><![CDATA[<p>本文献给想从事本专业而又迷茫的朋友，希望对你有一丝帮助。</p><p>以下均为个人见解，如有不恰当之处请自行忽略。</p><p>IT 行业垂直分类可以分为硬件类、软件类、互联网类、增值服务类等 4 大类。我们就业时也必定会进入此类企业之一。IT 专业可以分为硬件和软件，物联网工程与软件工程不同，它将硬件和软件联系得更加紧密。大多数人也许都在思考，自己应该专研哪门课程，应该学习什么编程语言，什么样的技术适合自己，怎么学习将来才能找到满意的工作。但是我想告诉你的是，哪怕你专研最喜欢的课程，学习最流行的编程语言，也不一定可以找到满意的工作。现实是很残酷的，三百六十行，行行都水深，你必须先从宏观上去了解这个行业，才能给自己良好的定位，才能给自己正确的方向。</p><a id="more"></a>


<p>你可能会想，自己选择了一个不合适的专业，大学生活和我想要的不一样。如同武汉某老总所说，“你只需要考虑你要不要做技术。”，她嘴里别的话可以不信，但这句可以是真的。我认为本科的课程只是教学生基础知识和学习方法，换言之，你大学每堂课都认真听，考试成绩全优，顺利毕业也不会百分百找到好工作，课时真的很少，老师想把知道的一切都告诉你，但是时间能允许你接受多少，你自己又能吸收多少，显然老师和学生都做不到。老师教给了我们思考问题的方法，解决问题的套路，我们必须去使用，一遍遍重复地使用，最终我们会和老师一样优秀。</p>
<p>我们可以讨厌一门学科，但不能排斥一门学科，任何知识在有限的人生当中都是有意义的。</p>
<p>从本质上讲，物联网工程与软件工程没有区别，乃至所有本科计算机专业，毕业之后我们全部在同一起跑线，在企业看来我们都是 IT 专业的学生，他只在乎你会做什么，你有什么工作经验。别因为本科专业限制了我们的梦想，只要我们在学，而别人在玩，我们就在前面，我们就有竞争力。</p>
<p>世界确实不算好，但我们一定要以欣赏的眼光去看待。<br>交际确实不容易，但我们一定要以宽容的心态的待人。</p>
<p>学历决定我们的底线，能力决定我们的高度。</p>
<p>下面进入正题，谈一谈硬件和软件。</p>
<hr>
<h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>抱歉的是我对硬件不是很感冒，所以这里只是粗略地介绍。</p>
<p>硬件对应于以下课程</p>
<ul>
<li>模拟电路</li>
<li>数字电路</li>
<li>RFID 射频识别技术</li>
<li>单片机</li>
<li>嵌入式</li>
<li>ZigBee 技术</li>
</ul>
<p>特点</p>
<ul>
<li>有趣</li>
<li>成果明显</li>
<li>有成就感</li>
<li>难学</li>
<li>难入门</li>
<li>工资高</li>
<li>发展稳定</li>
</ul>
<p>学好了嵌入式，你的家就是未来。</p>
<hr>
<h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>软件又大致分为前端和后端。</p>
<p>软件的学习对应于以下课程</p>
<ul>
<li>C 程序设计</li>
<li>数据结构</li>
<li>计算机网络</li>
<li>操作系统</li>
<li>计算机组成原理</li>
<li>算法设计与分析</li>
<li>Java</li>
<li>UML</li>
<li>网页制作</li>
</ul>
<p>用代码，编写多彩人生。</p>
<hr>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>主要负责用户界面和交互的设计与制作。</p>
<p>前端三大法宝</p>
<ul>
<li>HTML（界面结构）</li>
<li>CSS（界面表现）</li>
<li>JavaScript（界面行为）</li>
</ul>
<p>前端适合喜欢美的事物、喜欢创造画面、有想象力、有耐心、有强迫症的同学（有一个像素的偏差都不行），那么从事前端我们要学习什么呢？多，而且一天比一天更多。</p>
<p>除了上面的三大法宝作为基础外，我们还需要各种日新月异的框架来帮助我们快速构建前端项目。</p>
<p><strong>JavaScript框架</strong></p>
<ul>
<li>JQuery<ul>
<li>一个快速、简洁的 JavaScript 框架</li>
<li>“write Less，Do More”</li>
<li>提供简便的 JavaScript 设计模式</li>
<li>优化 HTML 文档操作、事件处理、动画设计和 Ajax 交互</li>
<li>前不久开始面临淘汰的趋势，但目前仍然大量使用，我们抓住了尾巴</li>
</ul>
</li>
</ul>
<ul>
<li>AngularJ.js<ul>
<li>很流行的前端框架</li>
<li>使用 Angular.js 创建第一个 UI，成本很低</li>
<li>对于团队来说，AngularJ.js 有许多很棒的工具可用</li>
<li>很适合创建一个快速、混合型复杂的解决方案</li>
<li>比起 React，更合适于创建小型企业级应用</li>
<li>由 Google 负责维护基础包</li>
<li><a href="http://www.runoob.com/angularjs/angularjs-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/angularjs/angularjs-tutorial.html</a> (中文网)</li>
</ul>
</li>
</ul>
<ul>
<li>React.js<ul>
<li>很容易扩展</li>
<li>状态可预测（更小的规模）</li>
<li>很适合大型的前端项目</li>
<li>相对较小的 API</li>
<li>持续重复渲染的组件为日益增加的复杂性提供了有效的支撑</li>
<li>由 Facebook 开发和维护</li>
<li><a href="http://reactjs.cn/react/docs/why-react.html" target="_blank" rel="noopener">http://reactjs.cn/react/docs/why-react.html</a></li>
</ul>
</li>
</ul>
<ul>
<li>Vue.js<ul>
<li>具有非常简单的 API</li>
<li>可选择性添加的模块</li>
<li>易于被开发者接纳</li>
<li>易于与其它库和工程集成</li>
<li>可以通过两种数据绑定方式更新模型和视图</li>
<li>适合于大型的应用</li>
<li>由我们的中国同胞尤雨溪开发</li>
<li>在国内很火爆</li>
<li><a href="http://cn.vuejs.org/" target="_blank" rel="noopener">http://cn.vuejs.org/</a></li>
</ul>
</li>
</ul>
<p><strong>UI框架</strong></p>
<ul>
<li>Bootstrap</li>
<li>AUI</li>
<li>Amaze UI</li>
<li>Frozen UI</li>
<li>WeUIi</li>
<li>Semantic UI</li>
</ul>
<p>以上每一个框架都相当于一门学科，你不需要全部都会，但必须会使用最流行的和企业最需要的。</p>
<hr>
<h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>主要负责后台数据的处理和管理。</p>
<ul>
<li>Java<ul>
<li>性能好</li>
<li>适合大中项目</li>
<li>跨平台</li>
<li>安全性高</li>
<li>稳定可靠</li>
<li>运行效率高</li>
<li>不容易犯错</li>
<li>能有效的提高复用度</li>
<li>提升性能和吞吐能力</li>
<li>能规避安全问题</li>
<li>开发复杂</li>
<li>开发和发布的效率相对较低</li>
<li>维护成本高</li>
<li>开发人员费用高</li>
</ul>
</li>
</ul>
<ul>
<li>Python<ul>
<li>简单易学</li>
<li>开发快</li>
<li>语言简洁</li>
<li>易于维护</li>
<li>开源</li>
<li>可移植</li>
<li>可扩展</li>
<li>速度慢</li>
<li>格式强制</li>
<li>容易犯错</li>
</ul>
</li>
</ul>
<ul>
<li>PHP<ul>
<li>灵活</li>
<li>上手快</li>
<li>易修改</li>
<li>发布快捷</li>
<li>环境好部署</li>
<li>容易犯错</li>
<li>行效率不高</li>
<li>缺乏全局缓存</li>
</ul>
</li>
</ul>
<ul>
<li>Ruby<ul>
<li>快速开发</li>
<li>使用者多</li>
<li>开发控件非常丰富</li>
<li>性能差</li>
<li>第三方包少</li>
</ul>
</li>
</ul>
<ul>
<li>ASP.NET<ul>
<li>跨语言</li>
<li>中小型项目上性能好</li>
<li>开发快</li>
<li>适合 Windows 平台</li>
<li>维护成本低</li>
<li>代码逻辑混乱</li>
<li>难于管理</li>
<li>代码的可重用性差</li>
</ul>
</li>
</ul>
<p>这些语言大多也有框架，工作时极少使用原生语言，使用框架开发项目可以减小开发周期并易于维护。</p>
<hr>
<h2 id="主流编程语言"><a href="#主流编程语言" class="headerlink" title="主流编程语言"></a>主流编程语言</h2><p>编程语言就是我们与计算机沟通的工具，没有好坏之分，只有合适与不合适，你可以讨厌一门语言，但是不能排斥它，它对你使用喜欢的语言也有帮助。我认为目前最优雅最讨人喜欢的语言是 Python（虽然我们都不懂），但目前的主要任务是学好我们的第一门完全面向对象的 Java 语言，学会了它可以举一反三地去学习其他面向对象语言，其核心思想都是大同小异的，差异只存在于语言的某些独有特性，届时我们只需要关注那些特性，即可在数月内熟悉一门新的编程语言。</p>
<ul>
<li>Java<ul>
<li>大数据</li>
<li>电子商务系统开发</li>
<li>Web 应用系统开发</li>
<li>企业级应用开发</li>
<li>分布式系统开发</li>
<li>多媒体系统开发</li>
<li>交互式系统开发</li>
<li>桌面应用系统开发</li>
<li>嵌入式系统开发</li>
</ul>
</li>
</ul>
<ul>
<li>C<ul>
<li>嵌入式设备开发</li>
<li>对性能要求严格的领域</li>
<li>系统软件和图形处理</li>
<li>游戏软件开发</li>
<li>数字计算</li>
<li>应用软件</li>
</ul>
</li>
</ul>
<ul>
<li>C++<ul>
<li>游戏</li>
<li>嵌入式系统</li>
<li>虚拟现实</li>
<li>数字图像处理</li>
<li>设备驱动程序</li>
<li>操作系统</li>
<li>网络软件</li>
<li>服务器端开发</li>
<li>科学计算</li>
<li>分布式应用</li>
</ul>
</li>
</ul>
<ul>
<li>Python<ul>
<li>人工智能</li>
<li>网络爬虫</li>
<li>科学计算中</li>
<li>大数据、云计算</li>
<li>系统运维</li>
<li>WEB 开发</li>
<li>系统编程</li>
<li>金融方面</li>
<li>图形界面</li>
</ul>
</li>
</ul>
<ul>
<li>C#<ul>
<li>Unity 3D</li>
<li>网络服务</li>
<li>桌面应用</li>
<li>除了底层无所不能</li>
</ul>
</li>
</ul>
<ul>
<li>Visual Basic.NET<ul>
<li>桌面应用</li>
<li>Web</li>
<li>Windows Phone</li>
</ul>
</li>
</ul>
<ul>
<li>PHP<ul>
<li>Web</li>
</ul>
</li>
</ul>
<ul>
<li>JavaScript<ul>
<li>Web前端</li>
<li>Web后端</li>
<li>Web APP</li>
<li>插件开发</li>
<li>桌面开发</li>
</ul>
</li>
</ul>
<ul>
<li>SQL<ul>
<li>数据库</li>
</ul>
</li>
</ul>
<p>还有相当多没听说过的语言，在国内貌似不是很火，不再一一列举，到此结束。</p>
<p>我知道你还是很糊涂，包括我在内，也不知道自己究竟该怎么做，但是不要担心，并不是衣服不好看，而是你太胖；并不是编程语言不合适，而是你没学。等你瘦了穿啥都好看，等你学了用啥都合适。道理都懂，贵在行动。</p>
]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>专业</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/javascript-basics/19.html</url>
    <content><![CDATA[<p><strong>正则表达式</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;又称规则表达式，用来描述一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>包装类</title>
    <url>/javascript-basics/18.html</url>
    <content><![CDATA[<h2 id="包装类的概念"><a href="#包装类的概念" class="headerlink" title="包装类的概念"></a>包装类的概念</h2><ul>
<li>基本数据类型<ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>Null</li>
<li>Undefined</li>
</ul>
</li>
<li>引用数据类型<ul>
<li>Object</li>
</ul>
</li>
</ul><p>在JS中提供了三个包装类，通过这三个包装类可将基本数据类型转换为对象。</p><ul>
<li><code>String()</code> 可以将基本数据类型的的字符串转换为String对象</li>
<li><code>Number()</code> 可以将基本数据类型的数值转换为Number对象</li>
<li><code>Boolean()</code> 可以将基本数据类型的布尔值转换为Boolean对象</li>
</ul><a id="more"></a>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个String类型的对象</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Number类型的对象</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Boolean类型的对象</span></span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">"false"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(bool)&#123;</span><br><span class="line">  alert(<span class="string">"我运行了~~~"</span>); <span class="comment">// 会执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：在实际应用中，不会使用基本数据类型的对象，如果使用基本数据类型的对象，在作一些关系运算时会出现不可预期的结果。</p>
</blockquote>
<ul>
<li>方法和属性只能添加给对象，不能添加给基本数据类型。<br>当对一些基本数据类型的值调用属性和方法时，浏览器会临时使用包装类将其转换为对象，然后再调用对象的属性和方法。因此我们才能调用那些方法。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">n = n.toString();</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="String的方法"><a href="#String的方法" class="headerlink" title="String的方法"></a>String的方法</h2><p>在底层，字符串是以字符数组的形式保存的。<br><code>&quot;hello&quot;</code> ==&gt; <code>[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</code></p>
<ul>
<li><code>length</code>属性可以获取字符串的长度</li>
</ul>
<ul>
<li><code>charAT()</code>方法可以返回字符串中指定索引位置的字符</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello World!"</span></span><br><span class="line"><span class="keyword">var</span> result = str.charAT(<span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// W</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>charCodeAT()</code>方法可以返回字符串中指定索引位置字符的Unicode编码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello World!"</span></span><br><span class="line"><span class="keyword">var</span> result = str.charCodeAT(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 101</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>String.fromCharCode()</code>方法可以根据Unicode编码获取字符<br>必须通过String对象调用。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="built_in">String</span>.fromCharCode(<span class="number">20013</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 中</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>concat()</code>方法可以连接两个或多个字符串<br>作用和<code>+</code>相同。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> str.concat(<span class="string">"Hello"</span>, <span class="string">"World"</span>, <span class="string">"!"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// HelloWorld!</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>indexOf()</code>方法可以检索字符串中是否含有指定内容<br>如果字符串中含有该内容，则会返回该内容第一次出现的索引。<br>如果字符串中没有该内容，则会返回<code>-1</code>。<br>可以指定第二个参数作为开始查找的位置索引。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"I love you."</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"v"</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"o"</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"o"</span>, <span class="number">4</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>lastIndexOf()</code>方法的用法与<code>indexOf()</code>相同，不同的是<br>indexOf是从前至后查找，而<code>lastIndexOf()</code>是从后至前查找。</li>
</ul>
<ul>
<li><code>slice()</code>方法可以截取字符串中的指定内容<br>不影响原字符串，而是返回截取的字符串。<br>参数：<ol>
<li>开始位置的索引（包括开始位置）</li>
<li>结束位置的索引（不包括结束位置）<br>第2个参数省略时则截取开始位置起的所有内容。</li>
</ol>
<ul>
<li>参数为负数时将从后往前计算。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abcdefghijk"</span>;</span><br><span class="line">result = str.slice(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// cde</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>substring()</code>方法可以截取字符串中的指定内容<br>参数：<ol>
<li>开始位置的索引（包括开始位置）</li>
<li>结束位置的索引（不包括结束位置）</li>
</ol>
<ul>
<li>与<code>slice()</code>不同的是<code>substring()</code>会将负值作为<code>0</code>处理，并且会自动调整两个参数的位置，包正第1个参数小于第2个参数。</li>
</ul>
</li>
</ul>
<ul>
<li>*<code>substr()</code>方法可以截取字符串中的指定内容<ol>
<li>开始位置的索引（包括开始位置）</li>
<li>截取的长度</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>另外两个对象</title>
    <url>/javascript-basics/17.html</url>
    <content><![CDATA[<h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><ul>
<li>在JS中使用Date对象来表示时间<br>日期格式：<code>月/日/年 时:分:秒</code></li>
</ul><h3 id="创建Date对象"><a href="#创建Date对象" class="headerlink" title="创建Date对象"></a>创建Date对象</h3><ul>
<li>使用<code>new Date()</code>构造函数</li>
</ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个Date对象</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// 会输出楼上构造函数执行时刻的时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个指定时间的Date对象</span></span><br><span class="line"><span class="comment">// 日期格式：月/日/年 时:分:秒</span></span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"8/22/2018 7:30:00"</span>);</span><br></pre></td></tr></table></figure><a id="more"></a>



<h3 id="Date的方法"><a href="#Date的方法" class="headerlink" title="Date的方法"></a>Date的方法</h3><p>获取时间</p>
<ul>
<li>使用<code>getDate()</code>方法获取当前Date对象的日期（几号）</li>
<li>使用<code>getDay()</code>方法获取当前Date对象的星期(周几)<br>返回值：<code>0</code> 周日、<code>1</code> 周一、<code>2</code> 周二、<code>3</code> 周三、<code>4</code> 周四、<code>5</code> 周五、<code>6</code> 周六</li>
<li>使用<code>getMonth()</code>方法获取当前Date对象的月份（几月）<br>返回值：<code>0</code> 一月、<code>1</code> 二月、<code>2</code> 三月、· · · · · ·、<code>11</code> 十二月</li>
<li>使用<code>getFullYear()</code>方法获取当前Date对象的年份（几年）<br>· · · · · ·</li>
</ul>
<ul>
<li>使用<code>getTime()</code>方法获取当前Date对象的时间戳<br>时间戳，指的是从格林威治标准时间的1970年1月1日0时0分0秒到当前时刻所花费的毫秒数。计算机底层在保存时间时都是使用时间戳。</li>
<li>使用<code>Date.now();</code>可以获取当前的时间戳</li>
</ul>
<hr>
<h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><ul>
<li>Math对象和其他对象不同，它不是一个构造函数，它属于工具类，不需要创建对象，其中封装了数学运算相关的属性和方法。</li>
</ul>
<h3 id="Math的属性"><a href="#Math的属性" class="headerlink" title="Math的属性"></a>Math的属性</h3><ul>
<li><code>Math.PI</code> 圆周率</li>
<li><code>Math.E</code> 自然常数e<br>· · · · · ·</li>
</ul>
<h3 id="Math的方法"><a href="#Math的方法" class="headerlink" title="Math的方法"></a>Math的方法</h3><ul>
<li><code>Math.ceil(x)</code> 对x进行向上取整<br>例：<code>1.1</code>=&gt;&gt;<code>2</code>、<code>9.5</code>=&gt;&gt;<code>10</code>（小数位不为零直接进1）</li>
</ul>
<ul>
<li><code>Math.floor(x)</code> 对x进行向下取整<br>例：<code>1.1</code>=&gt;&gt;<code>1</code>、<code>9.5</code>=&gt;&gt;<code>9</code>（小数部分直接舍掉）</li>
</ul>
<ul>
<li><code>Math.round(x)</code> 对x进行四舍五入取整<br>例：<code>1.1</code>=&gt;&gt;<code>1</code>、<code>9.5</code>=&gt;&gt;<code>10</code>（四舍五入）</li>
</ul>
<ul>
<li><code>Math.random()</code> 生成一个(0,1)开区间的随机数<br>例：<code>Math.round(Math.random()*10)</code> 生成一个[0,10]闭区间的随机数<br>律：<code>Math.round(Math.random() * (y-x) + x)</code> 生成一个[x,y]闭区间的随机数</li>
</ul>
<ul>
<li><code>Math.max()</code> 获取多个数中的最大值</li>
</ul>
<ul>
<li><code>Math.min()</code> 获取过个数中的最小值</li>
</ul>
<ul>
<li><code>Math.pow(x,y)</code> 返回x的y次幂</li>
</ul>
<ul>
<li><code>Math.sqrt(x)</code> 返回x的平方根</li>
</ul>
<ul>
<li><code>Math.tan()</code></li>
</ul>
<ul>
<li><code>Math.cos()</code><br>· · · · · ·</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/javascript-basics/16.html</url>
    <content><![CDATA[<h2 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h2><ul>
<li>使用<code>push()</code>方法可以向数组的末尾添加一个或多个元素，并返回数组新的长度。<br>可以将需要添加的元素作为参数传递，这些元素将会自动添加到数组的末尾。</li>
</ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">"孙悟空"</span>, <span class="string">"猪八戒"</span>, <span class="string">"沙僧"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以将需要添加的元素作为参数传递</span></span><br><span class="line"><span class="comment">// 多个元素以逗号隔开</span></span><br><span class="line">arr.push(<span class="string">"唐僧"</span>, <span class="string">"白骨精"</span>, <span class="string">"蜘蛛精"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该方法会将数组新的长度返回</span></span><br><span class="line"><span class="keyword">var</span> result = arr.push(<span class="string">"唐僧"</span>, <span class="string">"白骨精"</span>, <span class="string">"蜘蛛精"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><a id="more"></a>


<ul>
<li>使用<code>pop()</code>方法可以删除数组的最后一个元素，并返回删除的元素。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">result = arr.pop();</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 蜘蛛精</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>unshift()</code>方法可以向数组的开头插入一个或多个元素，并返回数组新的长度。<br>向开头插入元素以后，其他元素的索引会依次调整。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = arr.unshift(<span class="string">"牛魔王"</span>, <span class="string">"二郎神"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>shift()</code>方法可以删除数组的第一个元素，并返回删除的元素。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = arr.shift();</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 牛魔王</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>slice()</code>方法可以提取数组中的指定元素<br>参数：（左闭右开区间）相当于<code>[begin,end)</code><ol>
<li>截取开始位置的索引，包含开始索引</li>
<li>截取结束位置的索引，不包含结束索引<br>第2个参数省略则截取从开始位置到数组最后</li>
</ol>
<ul>
<li>如果传递一个负值，则从后往前计算，例如<code>-2</code>为倒数第2个元素</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = arr.slice(<span class="number">2</span>, <span class="number">4</span>); <span class="comment">// 截取数组中从第3个到第5个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 沙僧,唐僧</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.slice(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 唐僧,白骨精,蜘蛛精</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.slice(<span class="number">1</span>,<span class="number">-2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 猪八戒,沙僧,唐僧</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>splice()</code>方法可以删除数组中的指定元素<br>会将指定元素从原数组中删除，并返回删除的元素。<br>参数：<ol>
<li>开始位置的索引</li>
<li>删除的数量</li>
<li>第三个及以后的参数会作为元素插入到开始位置索引之前</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = arr.splice(<span class="number">3</span>,<span class="number">2</span>,<span class="string">"二郎神"</span>,<span class="string">"武曲星君"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 唐僧,白骨精</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// 孙悟空,猪八戒,沙僧,二郎神,武曲星君,蜘蛛精</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>concat()</code>方法可以连接两个或多个数组，并返回新数组<br>不会修改原数组，新数组以返回值返回。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newarr = arr1.concat(arr2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newarr = arr2.concat(arr3,arr4,<span class="string">"元素"</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>join()</code>方法可以将数组转换为字符串<br>不会修改原数组，字符串以返回值返回。<br>可以指定一个字符串作为参数，该字符串将成为元素之间的连接符，默认是逗号作为连接符。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr_str = arr.join();</span><br><span class="line"><span class="built_in">console</span>.log(arr_str); <span class="comment">// 孙悟空,猪八戒,沙僧,二郎神,武曲星君,蜘蛛精</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr_str); <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line">arr_str = arr.join(<span class="string">"-"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr_str); <span class="comment">// 孙悟空-猪八戒-沙僧-二郎神-武曲星君-蜘蛛精</span></span><br><span class="line"></span><br><span class="line">arr_str = arr.join(<span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr_str); <span class="comment">// 孙悟空猪八戒沙僧二郎神武曲星君蜘蛛精</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用<code>reverse()</code>方法可以反转数组<br>直接修改原数组，颠倒整个数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">arr.reverse();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>sort()</code>方法可以对数组元素进行排序</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对字符串排序，默认按照Unicode编码排序</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">"b"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"a"</span>, <span class="string">"c"</span>];</span><br><span class="line">arr.sort();</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// a,b,c,d,e</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对数字排序，也会按照Unicode编码排序</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line">arr.sort();</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// 11,1,2,3,4,5</span></span><br></pre></td></tr></table></figure>

<p>自定义排序规则，给<code>sort()</code>添加一个回调函数来指定排序规则。<br>回调函数需要指定两个形式参数，两个形参分别代表了数组中的两个元素，第二个参数永远代表第一个参数之后的元素。<br>浏览器会根据回调函数的返回值来决定这两个元素的顺序：<br>若返回值大于0，则两个元素交换位置；<br>若返回值小于0，则元素位置不变；<br>若返回值等于0，则认为两元素相等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  if(a &gt; b)&#123;</span></span><br><span class="line"><span class="comment">    return -1;</span></span><br><span class="line"><span class="comment">  &#125;else if(a &lt; b)&#123;</span></span><br><span class="line"><span class="comment">    return 1;</span></span><br><span class="line"><span class="comment">  &#125;else&#123;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 更加简洁的方法</span></span><br><span class="line">  <span class="keyword">return</span> a - b; <span class="comment">// 升序</span></span><br><span class="line"><span class="comment">//return b - a;    降序</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// 1,2,3,4,5,11</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><h3 id="使用循环遍历数组中的每一个元素"><a href="#使用循环遍历数组中的每一个元素" class="headerlink" title="使用循环遍历数组中的每一个元素"></a>使用循环遍历数组中的每一个元素</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i &lt; arr.length ; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用forEach-方法遍历数组"><a href="#使用forEach-方法遍历数组" class="headerlink" title="使用forEach()方法遍历数组"></a>使用<code>forEach()</code>方法遍历数组</h3><p>  这个方法仅支持IE8以上的浏览器。</p>
<ul>
<li>由我们创建但不由我们调用的函数，称为回调函数<br>例如下面这个匿名函数。</li>
</ul>
<ul>
<li>数组中有多少个元素函数就会执行多少次，每次执行时，浏览器会将遍历到的元素以实参的形式传递进来，我们可以定义形参来读取这些内容。</li>
</ul>
<ul>
<li>浏览器会在回调函数中传递三个参数：<ol>
<li>当前正在遍历的元素</li>
<li>当前正在遍历的元素的索引</li>
<li>正在遍历的数组</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, obj</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数组简介</title>
    <url>/javascript-basics/15.html</url>
    <content><![CDATA[<p><strong>数组（Array）</strong></p><ul>
<li>数组也是一个对象（废话）。</li>
<li>数组和普通对象功能类似，也是用来存储一些值的。</li>
<li>不同的是普通对象是使用字符串作为属性名来操作属性的，而数组是使用数字作为索引来操作元素的。</li>
<li>索引：从<code>0</code>开始的整数就是索引。</li>
<li>数组的存储性能比普通对象更好，在开发中经常使用数组来存储一些数据。</li>
</ul><p><em>普通对象的存储</em></p><a id="more"></a>


<table>
<thead>
<tr>
<th>属性名</th>
<th>属性值</th>
</tr>
</thead>
<tbody><tr>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>“age”</td>
<td>18</td>
</tr>
<tr>
<td>“name”</td>
<td>“李建刚”</td>
</tr>
</tbody></table>
<p><em>数组对象的存储</em></p>
<table>
<thead>
<tr>
<th>索引（index）</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>5</td>
<td>57</td>
</tr>
<tr>
<td>4</td>
<td>24</td>
</tr>
<tr>
<td>3</td>
<td>90</td>
</tr>
<tr>
<td>2</td>
<td>22</td>
</tr>
<tr>
<td>1</td>
<td>33</td>
</tr>
<tr>
<td>0</td>
<td>10</td>
</tr>
</tbody></table>
<h2 id="数组的基本操作"><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h2><ul>
<li>使用<code>new Array()</code>创建数组</li>
</ul>
<ul>
<li>向数组中添加元素<br>语法：<code>数组[索引] = 值;</code></li>
</ul>
<ul>
<li>读取数组中的元素<br>语法<code>数组[索引]</code></li>
</ul>
<ul>
<li>如果读取不存在的索引，会返回<code>undefined</code>。</li>
</ul>
<ul>
<li>使用<code>length</code>属性获取数组的长度（数组中多少元素）<br>语法：<code>数组.length</code><br>length = 最大的索引 + 1</li>
</ul>
<ul>
<li>如果修改的length大于原长度，则多出部分会空出来；<br>如果修改的length小于原长度，则多出的元素会被删除。</li>
</ul>
<ul>
<li>向数组的最后一个位置添加元素<br>语法：<code>数组[数组.length] = 值;</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建数组对象</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查数组的类型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向数组中添加元素 语法：数组[索引] = 值;</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">10</span>; <span class="comment">// 向数组索引为0的位置添加一个值20</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">33</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取数组中的元素 语法：数组[索引]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">1</span>]); <span class="comment">// 33</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">2</span>]); <span class="comment">// 22</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组的长度</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数组的长度，末尾的元素会被删除</span></span><br><span class="line">length = <span class="number">2</span>; <span class="comment">// 22被删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向数组的末尾添加值</span></span><br><span class="line">arr[arr.length] = <span class="number">70</span>;</span><br><span class="line">arr[arr.length] = <span class="number">80</span>;</span><br><span class="line">arr[arr.length] = <span class="number">90</span>;</span><br></pre></td></tr></table></figure>

<p><strong>创建数组</strong></p>
<p>语法：<code>数组 = [];</code></p>
<ul>
<li>使用字面量创建数组时，可以在创建时就指定数组中的元素。<br>元素之间使用逗号隔开。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用字面量创建数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用构造函数创建数组，可以将元素作为函数的参数传递，</span></span><br><span class="line"><span class="comment">// 元素之间使用逗号隔开</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个数组只有一个元素10</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个长度为10的数组</span></span><br><span class="line"><span class="keyword">var</span> arr4 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>数组中的元素可以是任意的数据类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组中的元素可以是任何数据类型</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">"hello"</span>, <span class="number">2</span>, <span class="literal">true</span>, <span class="literal">null</span>, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以是对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">"李建刚"</span>&#125;;</span><br><span class="line">arr[arr.length] = obj;</span><br><span class="line">arr = [&#123;<span class="attr">name</span>:<span class="string">"name1"</span>&#125;, &#123;<span class="attr">name</span>:<span class="string">"name2"</span>&#125;, &#123;<span class="attr">name</span>:<span class="string">"name3"</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以是函数</span></span><br><span class="line">arr = [<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>);&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">2</span>);&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以是数组，如下这种也称为二维数组</span></span><br><span class="line">arr = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>]];</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>原型对象</title>
    <url>/javascript-basics/14.html</url>
    <content><![CDATA[<h2 id="构造函数的修改"><a href="#构造函数的修改" class="headerlink" title="构造函数的修改"></a>构造函数的修改</h2><p>创建一个Person构造函数</p><ul>
<li>在Person构造函数中，为每一个对象都添加了一个sayName方法，并且sayName方法是在构造函数内部创建的，也就是说，构造函数每执行一次，就会创建一个新的sayName方法，创建10000个Person实例就会创建10000个sayName方法，即所有实例的sayName方法都是唯一的。这是完全没必要的，可以使所有的对象共享同一个方法。</li>
</ul><a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    <span class="comment">// 向对象中添加一个方法</span></span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'Hello，大家好，我是'</span> + name + <span class="string">'，今年'</span> + age + <span class="string">'岁了。'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person(<span class="string">'李建刚'</span>,<span class="number">23</span>,<span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">'赵打铁'</span>,<span class="number">22</span>,<span class="string">'男'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(per1.sayName == per2.sayName); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>将sayName方法在全局作用域中定义</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在全局作用域中定义sayName</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'Hello，大家好，我是'</span> + name + <span class="string">'，今年'</span> + age + <span class="string">'岁了。'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    <span class="keyword">this</span>.sayName = sayName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person(<span class="string">'李建刚'</span>,<span class="number">23</span>,<span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">'赵打铁'</span>,<span class="number">22</span>,<span class="string">'男'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(per1.sayName == per2.sayName); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>但是，将函数定义在全局作用域，污染了全局作用域的命名空间，而且定义在全局作用域中也很不安全。</li>
</ul>
<hr>
<h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><p><strong>原型（prototype）</strong></p>
<ul>
<li>我们创建的每一个函数，解析器都会向函数中添加一个属性<code>prototype</code>。<br>这个属性对应着一个对象，这个对象就是所谓的原型对象。  </li>
<li>如果函数作为普通函数调用，<code>prototype</code>没有任何作用，当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性<code>__proto__</code>指向该类（构造函数）的原型对象。</li>
<li>原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象，我们可以将对象中共有的内容，统一设置到原型对象中。</li>
<li>当我们访问对象的某个属性或方法时，会先在对象自身中寻找，如果有则直接使用，如果没有则在原型对象中寻找，如果有则直接使用。</li>
<li>创建构造函数时，可以将对象们共有的属性和方法，统一添加到构造函数的原型对象中，这种方式不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法了。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加sayName方法到Person类的原型对象中</span></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'Hello，大家好，我是'</span> + name + <span class="string">'，今年'</span> + age + <span class="string">'岁了。'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person(<span class="string">'李建刚'</span>,<span class="number">23</span>,<span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">'赵打铁'</span>,<span class="number">22</span>,<span class="string">'男'</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>in</code>检查对象中是否含有某个属性时，如果对象中没有而原型对象中却存在，也会返回<code>true</code>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'sayHello'</span> <span class="keyword">in</span> per1); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sayHello'</span> <span class="keyword">in</span> per2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以使用对象的hasOwnProperty()方法来检查该对象自身中是否含有某属性，使用该方法只有当对象自身中含有该属性时，才会返回true。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(per1.hasOwnProperty(<span class="string">"sayHello"</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(per2.hasOwnProperty(<span class="string">"sayHello"</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><ul>
<li>原型对象也是对象，所以它本身也有原型，当我们使用一个对象的属性或方法时，如果对象自身中存在则直接使用，否则将去原型对象中寻找，如果有则使用，否则将去原型对象的原型中寻找，以此类推直至Object对象的原型对象为止，Object对象的原型中的原型对象是<code>null</code>空，所以在Object的原型中依然没有找到则返回<code>undefined</code>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(per1.hasOwnProperty(<span class="string">"hasOwnProperty"</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(per1.__proto__.hasOwnProperty(<span class="string">"hasOwnProperty"</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(per1.__proto__.__proto__.hasOwnPerty)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(per1.__proto__.__proto__.__proto__); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString( )"></a>toString( )</h2><ul>
<li>当直接在页面中打印一个对象时，实际上是输出的该对象的<code>toString()</code>方法的返回值，如果希望在输出对象时不为<code>[object Object]</code>，可以为对象添加一个<code>toString()</code>方法来覆盖默认的方法。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个Person类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建两个Person类的实例</span></span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person(<span class="string">'李建刚'</span>,<span class="number">23</span>,<span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">'赵打铁'</span>,<span class="number">22</span>,<span class="string">'男'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接打印两个实例</span></span><br><span class="line"><span class="built_in">console</span>.log(per1); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(per2); <span class="comment">// [object Object]</span></span><br></pre></td></tr></table></figure>
<p><strong>我们作如下更改：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改Person类原型中的toString()方法</span></span><br><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Person[name="</span> + <span class="keyword">this</span>.name + <span class="string">", age="</span> + <span class="keyword">this</span>.age + <span class="string">", gender="</span> + <span class="keyword">this</span>.gender + <span class="string">"]"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建两个Person类的实例</span></span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person(<span class="string">'李建刚'</span>,<span class="number">23</span>,<span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">'赵打铁'</span>,<span class="number">22</span>,<span class="string">'男'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接打印两个实例</span></span><br><span class="line"><span class="built_in">console</span>.log(per1); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(per2); <span class="comment">// [object Object]</span></span><br></pre></td></tr></table></figure>

<h2 id="垃圾回收（GC）"><a href="#垃圾回收（GC）" class="headerlink" title="垃圾回收（GC）"></a>垃圾回收（GC）</h2><p><strong>Garbage Collection</strong></p>
<ul>
<li>程序运行过程中会产生垃圾，这些垃圾积攒过多以后，会导致程序运行的速度减慢，所以需要一个垃圾回收机制来处理程序运行过程中产生的垃圾。</li>
<li>当一个对象没有任何的变量或者属性对它进行引用，此时将永远无法操作该对象，这个对象就是一个垃圾，这种对象过多时会占用大量的内存空间，导致程序运行变慢，所以这种垃圾必须进行清理。</li>
<li>在JS中拥有自动垃圾回收机制，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行人工的垃圾回收操作。</li>
<li>我们需要做的只是将不再使用的对象设置为<code>null</code>即可。</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>构造函数</title>
    <url>/javascript-basics/13.html</url>
    <content><![CDATA[<h2 id="使用Object-构造函数创建对象"><a href="#使用Object-构造函数创建对象" class="headerlink" title="使用Object( )构造函数创建对象"></a>使用Object( )构造函数创建对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个批量生成“人”对象的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatPerson</span>(<span class="params">name, age, gender</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个对象</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给对象添加属性</span></span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    obj.gender = gender;</span><br><span class="line">    obj.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"Hello，我叫"</span> + <span class="keyword">this</span>.name + <span class="string">"，今年"</span> + <span class="keyword">this</span>.age + <span class="string">"岁了。"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj; <span class="comment">// 返回创建的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用创建的函数</span></span><br><span class="line"><span class="keyword">var</span> obj_ljg = creatPerson(<span class="string">"李建钢"</span>, <span class="number">23</span>, <span class="string">"女"</span>);</span><br><span class="line">obj_ljg.sayHello();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj_zdt = creatPerson(<span class="string">"赵打铁"</span>, <span class="number">22</span>, <span class="string">"男"</span>);</span><br><span class="line">obj_zdt.sayHello();</span><br></pre></td></tr></table></figure><a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个批量生成“狗”对象的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatDog</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个对象</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给对象添加属性</span></span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    obj.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"汪汪汪~~~"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj; <span class="comment">// 返回创建的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> dog = createDog(<span class="string">"旺财"</span>, <span class="number">3</span>);</span><br><span class="line">dog.sayHello();</span><br></pre></td></tr></table></figure>

<ul>
<li>工厂方法创建的对象，都是使用了构造函数<code>new Object();</code>，因此创建的对象都是Object类型，就导致我们无法区分多种不同类型的对象。</li>
</ul>
<hr>
<h2 id="创建构造函数（类）"><a href="#创建构造函数（类）" class="headerlink" title="创建构造函数（类）"></a>创建构造函数（类）</h2><ul>
<li>创建一个构造函数，专门用来创建Person对象。<br>构造函数就是一个普通的函数，创建方式和普通的函数没有区别。不同的是构造函数习惯上首字母大写，而调用构造函数时也有区别，普通函数是直接调用<code>函数();</code>，而构造函数需要使用<code>new</code>关键字调用<code>new 函数();</code>。</li>
</ul>
<ul>
<li>构造函数的执行流程：<ol>
<li>立刻创建一个新的对象</li>
<li>将新建的对象设置为函数中的<code>this</code>，在构造函数中可以使用<code>this</code>引用新建的对象</li>
<li>逐行执行函数中的代码</li>
<li>将新的对象作为返回值返回</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"Hello，我叫"</span> + <span class="keyword">this</span>.name + <span class="string">"，今年"</span> + <span class="keyword">this</span>.age + <span class="string">"岁了。"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> liJianGang = <span class="keyword">new</span> Person(<span class="string">"李建钢"</span>, <span class="number">23</span>, <span class="string">"女"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(liJianGang <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(dog <span class="keyword">instanceof</span> Person); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(liJianGang <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(dog <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用同一个构造函数创建的所有对象，称为一类对象，也将一个构造函数称为一个类，比如上面的<code>Person</code>类。</li>
<li>使用同一个构造函数创建的一个对象，称为该类的一个实例，比如上面的<code>Person</code>类的<code>liJianGang</code>实例。</li>
<li>使用<code>instanceof</code>检查一个对象是否是某个类的实例<br>语法：<code>对象 instanceof 构造函数</code><br>如果是则返回<code>true</code>，否则返回<code>false</code></li>
<li>所有的对象都是<code>Object</code>的后代，因此任何对象与<code>Object</code>作<code>instanceof</code>检查都返回<code>true</code>。</li>
</ul>
<hr>
<h2 id="小结·this"><a href="#小结·this" class="headerlink" title="小结·this"></a>小结·this</h2><ol>
<li>当以函数的形式调用时，<code>this</code>是<code>window</code></li>
<li>当以方法的形式调用时，<code>this</code>是该方法</li>
<li>当以构造函数的形式调用时，<code>this</code>是新创建的实例（对象）</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>上下文对象</title>
    <url>/javascript-basics/12.html</url>
    <content><![CDATA[<ul>
<li>解析器在调用函数时，每次都会向函数内部传递一个隐含的参数，这个参数就是<code>this</code>。</li>
<li><code>this</code>指向的是一个对象，这个对象称为函数执行的上下文对象。</li>
<li>根据函数调用方式的不同，<code>this</code>会指向不同的对象。<ol>
<li>以函数的形式调用时，<code>this</code>永远都是<code>window</code>(函数是<code>window</code>对象的方法)</li>
<li>以方法的形式调用时，<code>this</code>就是调用方法的那个对象</li>
</ol>
</li>
</ul><a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    say:fun</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fun(); <span class="comment">// this是window对象</span></span><br><span class="line">obj.fun(); <span class="comment">// this是obj对象</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个name变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"全局"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个fun()函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建两个对象</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    name:<span class="string">"对象1"</span>,</span><br><span class="line">    sayName:fun</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    name:<span class="string">"对象2"</span>,</span><br><span class="line">    sayName:fun</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun(); <span class="comment">// name:全局     相当于window.fun();</span></span><br><span class="line">obj1.sayName(); <span class="comment">// name:对象1</span></span><br><span class="line">obj2.sayName(); <span class="comment">// name:对象2</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2><p>在调用函数时，浏览器每次都会传递进入两个隐含的参数：</p>
<ol>
<li>函数的上下文对象<code>this</code></li>
<li>封装实参的对象<code>arguments</code><ul>
<li>arguments是一个类数组对象，它也可以通过索引来操作数据，也可以获取长度</li>
<li>在调用函数时，我们所传递的实参都会在<code>arguments</code>中保存</li>
<li><code>arguments.length</code>可以获取实参的长度</li>
<li>即使不定义形参，也可以通过<code>arguments</code>使用实参，<code>arguments[0]</code>表示第一个实参，<code>arguments[1]</code>表示第二个实参……</li>
<li><code>atguments</code>有一个属性<code>callee</code>，对应当前正在指向的函数对象</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span> <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(<span class="built_in">arguments</span>)); <span class="comment">// false</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(<span class="string">"hello"</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>作用域</title>
    <url>/javascript-basics/11.html</url>
    <content><![CDATA[<p><strong>作用域</strong></p><ul>
<li>作用域指一个变量的作用范围</li>
<li>在JS中共有2种作用域<ul>
<li>全局作用域</li>
<li>函数作用域</li>
</ul>
</li>
</ul><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><ul>
<li>直接编写在script标签中的JS代码，都在全局作用域。</li>
<li>全局作用域在页面打开时创建，在页面关闭时销毁。</li>
<li>在全局作用域中有一个全局对象window，它代表浏览器的窗口，由浏览器创建，我们可以直接使用。</li>
<li>在全局作用域中：<ul>
<li>创建的变量都会作为window对象的属性保存。</li>
<li>创建的函数都会作为window对象的方法保存。</li>
</ul>
</li>
<li>全局作用域中的变量都是全局变量，在页面的任意位置都可以访问。</li>
</ul><a id="more"></a>


<h3 id="变量的声明提前"><a href="#变量的声明提前" class="headerlink" title="变量的声明提前"></a>变量的声明提前</h3><ul>
<li>使用<code>var</code>关键字声明的对象，会在所有的代码执行之前被声明，但是不会赋值。</li>
<li>如果声明变量时不适用var关键字，则变不会被声明提前，当顺序执行至声明语句时才被声明。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 结果是：undefined</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="number">123</span>;</span><br><span class="line"><span class="comment">//结果是：报错</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="函数的声明提前"><a href="#函数的声明提前" class="headerlink" title="函数的声明提前"></a>函数的声明提前</h3><ul>
<li>使用函数声明形式创建的函数<code>function 函数(){};</code>，会在所有代码执行之前就被创建，因此可以在函数声明钱调用函数。</li>
<li>使用函数表达式创建的函数，不会被提前声明，因此不能再声明前调用。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun1();</span><br><span class="line"><span class="comment">// 函数声明，会被提前创建</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是函数声明创建的函数"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果是：我是函数声明创建的函数</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun2();</span><br><span class="line"><span class="comment">// 函数表达式，不会被提前</span></span><br><span class="line"><span class="keyword">var</span> fun2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是函数表达式创建的函数"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果是：undefined is not a function.</span></span><br><span class="line"><span class="comment">// 一个未定义的对象被赋值给了变量fun2</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><ul>
<li>调用函数时创建函数作用域，函数执行完毕后，函数作用域销毁。</li>
<li>每调用一次函数就会创建一个新的函数作用域，它们之间是互相独立的。</li>
<li>在函数作用域中可以访问到全局作用域的变量。</li>
<li>在全局作用域中无法访问到函数作用域的变量。</li>
<li>在函数作用域中操作一个变量时，它会现在自身作用域中寻找该变量，如果有则直接使用，如果没有则向上一级作用域中寻找。</li>
<li>在函数中若要访问全局变量可以使用<code>window</code>对象。</li>
<li><del>在函数中，不使用<code>var</code>声明的变量都会成为全局变量。</del></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个全局变量</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个函数内的变量</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">"我是函数中的变量a~~~"</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a="</span> + a); <span class="comment">// a=10</span></span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 我是函数中的变量a~~~</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b="</span> + b); <span class="comment">// b is not defined.</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 22</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 22</span></span><br><span class="line">    a = <span class="number">11</span>; <span class="comment">// 此处成为全局变量操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>函数</title>
    <url>/javascript-basics/10.html</url>
    <content><![CDATA[<h2 id="函数简介"><a href="#函数简介" class="headerlink" title="函数简介"></a>函数简介</h2><p><strong>函数 function</strong></p><ul>
<li>函数也是一个对象</li>
<li>函数中可以封装一些功能（代码），在需要时可以执行（调用）这些功能（代码）。</li>
<li>使用<code>typeof</code>检查一个函数对象时返回<code>function</code></li>
</ul><h3 id="使用构造函数创建函数"><a href="#使用构造函数创建函数" class="headerlink" title="使用构造函数创建函数"></a>使用构造函数创建函数</h3><p>创建一个函数对象，可以将要封装的代码以字符串的形式传递给构造函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"><span class="string">"console.log('Hello,这是我的第一个函数。');"</span></span>);</span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">boyFriend</span> = <span class="title">new</span> <span class="title">function</span>(<span class="params"><span class="string">"alert('我是你的男朋友。');"</span></span>);</span></span><br></pre></td></tr></table></figure><a id="more"></a>




<p><strong>调用函数：</strong><br>封装到函数中的代码不会立即执行，函数中的代码会在函数被调用的时候顺序执行。</p>
<p>语法：<code>函数对象()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun();</span><br><span class="line">boyFriend();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在开发中很少（根本不）使用构造函数来创建函数对象。</p>
</blockquote>
<h3 id="使用函数声明创建函数"><a href="#使用函数声明创建函数" class="headerlink" title="使用函数声明创建函数"></a>使用函数声明创建函数</h3><p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">[形参<span class="number">1</span>, 形参<span class="number">2</span>, ... ,形参n]</span>)</span>&#123;</span><br><span class="line">  代码块...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"这是我的第二个函数~~~"</span>);</span><br><span class="line">  alert(<span class="string">"哈哈哈哈哈~~"</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"~~~~()&gt;_&lt;)~~~~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>调用函数：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun2();</span><br></pre></td></tr></table></figure>

<h3 id="使用函数表达式创建函数"><a href="#使用函数表达式创建函数" class="headerlink" title="使用函数表达式创建函数"></a>使用函数表达式创建函数</h3><p>实质上是创建一个匿名函数，再把匿名函数这个对象赋值给一个变量。<br>因此此方式是一个赋值语句，结尾处必须以分号结束。</p>
<p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名 = <span class="function"><span class="keyword">function</span>(<span class="params">[形参<span class="number">1</span>, 形参<span class="number">2</span>, ... ,形参n]</span>)</span>&#123;</span><br><span class="line">  代码块...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"我是匿名函数中封装的代码。"</span>); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>调用函数：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun3();</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><p><strong>定义用来求两数之和的函数</strong></p>
<ul>
<li>可以在函数的()中指定一个或多个形式参数，多个形式参数之间使用逗号隔开，声明形式参数就相当于在函数内部声明了对应了变量，但是并不赋值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>调用定义的求和函数</strong></p>
<ul>
<li>可以在()中指定实际参数，实际参数将会赋值给函数中对应的形式参数。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>函数的实际参数可以是任意的数据类型。</li>
<li>调用函数时解析器不会检查实际参数的类型，所以要注意，是否有可能会接受到非法的参数，如果有则需要对参数进行类型检查。</li>
<li>调用函数时解析器也不会检查实际参数的数量，多余的实际参数不会赋值而会忽略。</li>
<li>如果实际参数的数量少于形式参数的数量，则没有对应实际参数的形式参数为<code>undefined</code>。</li>
</ul>
<hr>
<h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p><strong>定义用来求三数之和的函数</strong></p>
<ul>
<li>使用<code>return</code>来设置函数的返回值。<br>语法：<code>return 值;</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>return</code>后面的值将会作为函数的执行结果返回。</li>
<li>在return后的语句都不会执行。</li>
<li>如果不写<code>return</code>或者return后直接写分号<code>return;</code>都会返回<code>undefined</code>。</li>
</ul>
<p><strong>调用定义的求和函数</strong></p>
<ul>
<li>可以定义一个变量来接收函数的返回值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</span><br></pre></td></tr></table></figure>

<p><strong>函数的返回值可以是任何数据类型，甚至可以是对象和函数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> boyFriend = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向对象中添加属性</span></span><br><span class="line">boyFriend.name = <span class="string">"手机"</span>;</span><br><span class="line">boyFriend.age = <span class="string">"1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的属性值可以是任何数据类型，也可以是个函数</span></span><br><span class="line">boyFriend.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"Hello,我是"</span> + boyFriend.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用这个函数</span></span><br><span class="line">boyFriend.sayHello();</span><br></pre></td></tr></table></figure>

<ul>
<li>函数也可以成为对象的属性，如果一个函数作为一个对象的属性保存，那么，我们称这个函数是这个对象的方法，调用这个函数就叫作调用对象的方法（method），但是方法与函数仅仅是名称上存在区别。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(); <span class="comment">// 调用console对象的log方法</span></span><br><span class="line"><span class="built_in">document</span>.write(); <span class="comment">// 调用document对象的write方法</span></span><br><span class="line">boyFriend.sayHello(); <span class="comment">// 调用boyFriend对象的sayHello方法</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><ul>
<li>函数定义之后，立即被调用，这种函数叫作立即执行函数。</li>
<li>立即执行函数往往只会执行一次。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参数的立即执行函数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"我是一个匿名函数~~~"</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参数的立即执行函数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"a = "</span> + a);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"b = "</span> + b);</span><br><span class="line">&#125;)(<span class="number">123</span>, <span class="number">456</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="函数的方法"><a href="#函数的方法" class="headerlink" title="函数的方法"></a>函数的方法</h2><ul>
<li>使用<code>call()</code>方法</li>
<li>使用<code>apply()</code>方法</li>
</ul>
<p><strong>call( )和apply( )</strong></p>
<ul>
<li>调用函数的这两个方法时都会执行函数本身，可以将一个对象作为首个参数传递给<code>call()</code>或<code>apply()</code>，此时该对象将会作为函数执行时的<code>this</code>。</li>
<li>call方法可以将实参在对象之后依次传递</li>
<li>apply方法必须将实参封装到一个数组中传递</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"a = "</span>+a);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"b = "</span>+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用两个方法调用函数</span></span><br><span class="line">fun.call(obj, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">fun.apply(obj, [<span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="this·小结"><a href="#this·小结" class="headerlink" title="this·小结"></a>this·小结</h2><ol>
<li>以函数的形式调用时，<code>this</code>永远都是<code>window</code></li>
<li>以某对象的方法的形式调用时，<code>this</code>就是该对象</li>
<li>以构造函数的形式调用时，<code>this</code>是新创建的对象</li>
<li>使用<code>call()</code>和<code>apply()</code>方法调用时，<code>this</code>是指定的对象</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>终于有对象了</title>
    <url>/javascript-basics/09.html</url>
    <content><![CDATA[<h2 id="JS中的数据类型"><a href="#JS中的数据类型" class="headerlink" title="JS中的数据类型"></a>JS中的数据类型</h2><ul>
<li>String（字符串）</li>
<li>Number（数值）</li>
<li>Boolean（布尔值）</li>
<li>Null（空值）</li>
<li>Undefined（未定义）</li>
</ul><p>以上5种类型属于基本数据类型，之后所见的值只要不是以上其中之一，都属于对象。</p><ul>
<li>Object（对象）</li>
</ul><p>基本数据类型都是单一的值，如<code>&quot;hello&quot;</code>、<code>123</code>、<code>true</code>、<code>Null</code>，值与值直接没有任何联系。</p><a id="more"></a>



<p>如果使用基本数据类型的数据，我们创建的变量都是独立的，不能成为一个整体。</p>
<p><em>但是，从现在起我们有对象了。</em></p>
<p>对象是一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。</p>
<hr>
<h2 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h2><ol>
<li>内建对象<ul>
<li>由ECMAScript标准中定义的对象，在任何ECMAScript的实现中都可以使用。<br>例如：<code>Math</code>、<code>String</code>、<code>Number</code>、<code>Function</code>、<code>Object</code>……</li>
</ul>
</li>
</ol>
<ol start="2">
<li>宿主对象<ul>
<li>有JavaScript的运行环境提供的对象，此处主要指由浏览器提供的对象。<br>例如：BOM（浏览器对象模型）、DOM（文档对象模型）中定义的各种对象</li>
</ul>
</li>
</ol>
<ol start="3">
<li>自定义对象<ul>
<li>由开发人员创建的对象。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="对象的基本操作"><a href="#对象的基本操作" class="headerlink" title="对象的基本操作"></a>对象的基本操作</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ul>
<li>使用<code>new</code>关键字调用的函数是构造函数（constructor）。<br>构造函数是专门用来创建对象的函数。<br>使用<code>typeof</code>检查一个对象时，返回值是<code>object</code>。</li>
</ul>
<ul>
<li>在对象中保存的值称为属性。<br>给对象添加属性：<br><code>对象.属性名 = 属性值;</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用构造函数创建一个girlFriend对象</span></span><br><span class="line"><span class="keyword">var</span> girlFriend = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="comment">// 给对象添加一个name属性</span></span><br><span class="line">grilFriend.name = <span class="string">"她的名字"</span>;</span><br><span class="line"><span class="comment">// 给对象添加一个gender属性</span></span><br><span class="line">grilFriend.gender = <span class="string">"女"</span>;</span><br><span class="line"><span class="comment">// 给对象添加一个age属性</span></span><br><span class="line">girlFriend.age = <span class="number">21</span>;</span><br><span class="line"><span class="comment">// 给对象添加一个description属性</span></span><br><span class="line">girlFriend.description = <span class="string">"美丽,温柔,可爱,人畜无害"</span>;</span><br></pre></td></tr></table></figure>

<h3 id="读取对象中的属性"><a href="#读取对象中的属性" class="headerlink" title="读取对象中的属性"></a>读取对象中的属性</h3><p>语法：<code>对象.属性名;</code><br>如果读取对象中没有改属性，不会报错而会返回<code>undefined</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(girlFriend.name);</span><br><span class="line"><span class="built_in">document</span>.write(girlFriend.description);</span><br></pre></td></tr></table></figure>

<h3 id="修改对象的属性值"><a href="#修改对象的属性值" class="headerlink" title="修改对象的属性值"></a>修改对象的属性值</h3><p>语法：<code>对象.属性名 = 新属性值;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">girlFriend.age = <span class="number">22</span>;</span><br><span class="line">girlFriend.description = <span class="string">"贤惠,勤奋,诚实,持家"</span>;</span><br></pre></td></tr></table></figure>

<h3 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h3><p>语法：<code>delete 对象.属性名;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> girlFriend.name;</span><br><span class="line"><span class="keyword">delete</span> girlFriend.description;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="属性名和属性值"><a href="#属性名和属性值" class="headerlink" title="属性名和属性值"></a>属性名和属性值</h2><p><strong>属性名：</strong></p>
<ul>
<li>对象的属性名不强制要求遵守标识符的命名规范，各种乱七八糟的名称都可以使用。</li>
</ul>
<ul>
<li>但是在开发过程中尽量按照标识符的规范去命名。</li>
</ul>
<ul>
<li>如果要使用特殊的属性名，不能采用<code>.</code>的方式来编写。<ul>
<li>需要使用另一种方式：<br>语法：<code>对象[&quot;属性名&quot;] = 属性值;</code><br>读取时也需采用这种方式。</li>
<li>使用<code>[ ]</code>这种形式去操作属性更加灵活，在中可以直接传递一个变量，此时会根据变量值读取对应的属性。</li>
</ul>
</li>
</ul>
<p><strong>属性值：</strong></p>
<ul>
<li>对象的属性值可以是任何数据类型的数据。<br>甚至也可以是一个对象。</li>
</ul>
<ul>
<li>通过<code>in</code>运算符可以检查一个对象中是否含有指定的属性<br>如果有则返回<code>true</code>，没有则返回<code>false</code>。<br>语法：<code>&quot;属性名&quot; in 对象;</code></li>
</ul>
<hr>
<h2 id="基本和引用数据类型"><a href="#基本和引用数据类型" class="headerlink" title="基本和引用数据类型"></a>基本和引用数据类型</h2><p>基本数据类型：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Null</code>、<code>Undefined</code>  </p>
<p>引用数据类型：<code>Object</code>  </p>
<ul>
<li>JS中的变量都是保存到栈内存中的<ul>
<li>基本数据类型的值直接在栈内存中存储，变量中保存的就是值，且值与值之间是独立存在的，修改一个变量不会影响其他的变量，</li>
<li>引用数据类型的值（对象）是保存在堆内存中的，每创建一个新的对象，就会在堆内存中开辟一个新的空间，而变量中保存的是对象的内存地址（对象的引用）。如果两个变量保存的是同一个对象引用（地址），那么通过其中一个变量修改属性值时，另一个也会受到影响。</li>
<li>如果两个变量保存的是同一个对象引用（地址），当修改一个对象为<code>null</code>时，另一个对象不会随之改变。</li>
</ul>
</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;举个形象的例子，你应该听说过，巫师有一种巫毒娃娃，将讨厌之人的名字和生辰八字写在娃娃背后，然后用针扎娃娃的眼睛，讨厌之人的眼睛就会疼甚至瞎。那么此时，“巫毒娃娃”就相当于“变量”，“名字和生辰八字”就相当于变量中存储的“地址”（对象的引用）。变量中存放的并不是对象本身，而你却可以通过变量来操作对象的属性，就如同“巫毒娃娃”并不是讨厌之人，而你却可以通过“巫毒娃娃”折磨讨厌之人，只是因为变量中的地址指向对象，而巫毒娃娃上的文字指向讨厌之人。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此时，如果讨厌之人特别讨厌以至于另一个人也讨厌他，那么他也会制作一只相似的“巫毒娃娃”，上面写着相同的名字和生辰八字，若此人百般痛恨以至于将“巫毒娃娃”的腿卸掉一只，那么另一只巫毒娃娃也会没了腿。就如同创建了一个相似的“变量”，其中存储了相同的“地址”（引用），那么通过其中一个“变量”修改了“对象”，从另一个变量读取时也会读取到被修改的对象。只因为两只巫毒娃娃指向同一个人，而两个变量指向同一个对象。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;又此时，其中一个巫毒娃娃的主人良心发现，决定不再通过娃娃折磨讨厌之人，于是将巫毒娃娃扔了，但是另一个人并不会随之扔掉，他可能还需要继续扎讨厌之人。就如同设置其中一个对象为<code>null</code>，而另一个对象不会随之改变。</p>
<ul>
<li>当比较两个基本数据类型的值时，就是比较它们的值，而比较两个引用数据类型的时，则是比较对象的内存地址，如果两个对象一模一样，但是地址不相同，它们也是不相等的。</li>
</ul>
<hr>
<h2 id="对象的字面量"><a href="#对象的字面量" class="headerlink" title="对象的字面量"></a>对象的字面量</h2><p><strong>使用构造函数创建对象</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> girlFriend = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">girlFriend.name = <span class="string">"她的名字"</span>;</span><br><span class="line">girlFriend.age = <span class="number">21</span>;</span><br><span class="line">girlFriend.cups = <span class="string">"C"</span>;</span><br><span class="line">girlFriend.hobby = <span class="string">"吃、睡、玩"</span>;</span><br></pre></td></tr></table></figure>

<p><strong>使用对象字面量来创建对象</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> girlFriend = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用对象字面量，可以在创建对象时，直接指定对象中的属性<br>语法：<code>{属性名:属性值,属性名:属性值......}</code><br>对象字面量的属性名可以加引号也可不加，建议不加，如果需要使用一些特殊符号的名称，则必须加引号。<br>属性名和属性值是一组组的名值对结构，名和值之间使用冒号<code>:</code>连接，多个名值对之间使用逗号<code>,</code>隔开，最后一个名值对后面不加逗号。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> girlFriend = &#123;</span><br><span class="line">    name:<span class="string">"她的名字"</span>,</span><br><span class="line">    age:<span class="number">21</span>,</span><br><span class="line">    hobby:<span class="string">"吃、睡、玩"</span>,</span><br><span class="line">    figure:&#123;<span class="attr">bust</span>:<span class="string">"C"</span>,<span class="attr">waist</span>:<span class="number">61.1</span>,<span class="attr">hip</span>:<span class="number">89.1</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="枚举对象中的属性"><a href="#枚举对象中的属性" class="headerlink" title="枚举对象中的属性"></a>枚举对象中的属性</h2><ul>
<li>使用<code>for ... in</code>语句<br>对象中有多少个属性，循环体就会执行多少次，每次执行时，会将对象中的一个属性名赋值给变量。</li>
</ul>
<p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> 变量 <span class="keyword">in</span> 对象)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> girlFriend = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">girlFriend.name = <span class="string">"她的名字"</span>;</span><br><span class="line">girlFriend.age = <span class="number">21</span>;</span><br><span class="line">girlFriend.cups = <span class="string">"C"</span>;</span><br><span class="line">girlFriend.hobby = <span class="string">"吃、睡、玩"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举对象中的名值对</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> n <span class="keyword">in</span> girlFriend)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(n + <span class="string">" = "</span> + girlFriend[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>流程控制语句</title>
    <url>/javascript-basics/08.html</url>
    <content><![CDATA[<p><strong>流程控制语句</strong></p><ul>
<li>JS中的程序是从上至下一行一行执行的，通过流程控制语句可以控制程序执行的流程，使程序可以根据一定的条件来选择执行。</li>
</ul><p>语句的分类：</p><ol>
<li>条件判断语句</li>
<li>条件分支语句</li>
<li>循环语句</li>
</ol><h2 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h2><p>使用条件判断语句可以在执行某个语句之前进行判断，如果条件成立才会执行语句，条件不成立则不执行。  </p><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p><strong>语法一：</strong></p><a id="more"></a>





<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) 语句;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(条件表达式) &#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">    语句<span class="number">3</span>;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>if</code>语句在执行时，会先对条件表达式进行求值判断，如果条件表达式的值为<code>true</code>，则执行<code>if</code>后的语句，如果条件表达式的值为<code>false</code>，则不执行<code>if</code>后的语句。</li>
<li><code>if</code>语句只能控制紧随其后的那条语句，如果需要控制多条语句，可以将这些语句统一放到代码块中<code>{ }</code>。</li>
</ul>
<p><strong>语法二：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) &#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">    ....</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>if...else</code>语句在执行时，会先对条件表达式进行求值判断，如果条件表达式的值为<code>true</code>，则执行<code>if</code>后的语句，如果条件表达式的值为<code>false</code>，则执行<code>else</code>后的语句。</li>
</ul>
<p><strong>语法三：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) &#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">    ....</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> &#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">    ....</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> &#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">    ....</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>if...else if...else</code>语句在执行时，会从上到下对条件表达式依次进行求值判断，如果值为<code>true</code>，则执行当前语句，如果值为<code>false</code>，则继续向下判断,如果所有条件都不满足，则执行<code>else</code>后的语句。</li>
<li>该语句中，只会有一个代码块被执行，一旦有代码块执行了，则直接结束语句。</li>
</ul>
<hr>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>语句和代码块</strong></p>
<ul>
<li>语句是一个程序的基本单位，JS的程序就是由一条条语句构成的，每一条语句使用 <code>;</code> 结尾。</li>
</ul>
<ul>
<li>JS中的语句默认是由上至下顺序执行的，但是也可以通过一些流程控制语句来控制语句的执行顺序。</li>
</ul>
<ul>
<li>可以使用一对<code>{ }</code>为多条语句进行分组，一组语句称为一个代码块，一个代码块需整体执行，或不执行。</li>
</ul>
<ul>
<li>JS中的代码块，只具有分组的作用，没有其他的用途。</li>
</ul>
<hr>
<h2 id="条件分支语句"><a href="#条件分支语句" class="headerlink" title="条件分支语句"></a>条件分支语句</h2><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p><strong>语法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(条件表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 表达式:</span><br><span class="line">        语句...</span><br><span class="line">    <span class="keyword">case</span> 表达式:</span><br><span class="line">        语句...</span><br><span class="line">    <span class="keyword">case</span> 表达式:</span><br><span class="line">        语句...</span><br><span class="line">    <span class="keyword">case</span> 表达式:</span><br><span class="line">        语句...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        语句...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>switch...case...</code>语句在执行时，会依次将<code>case</code>后的表达式的值和<code>switch</code>后的条件表达式的值进行<strong>全等</strong>比较。如果比较结果为<code>true</code>，则从当前<code>case</code>处开始执行代码；如果比较结果为<code>false</code>，则继续向下比较；如果所有比较结果都为<code>false</code>，则执行<code>default</code>后的代码。</li>
</ul>
<ul>
<li>使用<code>break</code>可以退出switch语句。</li>
</ul>
<hr>
<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>使用循环语句可以反复地执行一段代码多次。</p>
<h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><p><strong>语法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式) &#123;</span><br><span class="line">    语句;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"n++"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>while</code>语句在执行时，先对条件表达式进行求值判断，如果值为<code>true</code>，则执行循环体，循环体执行完毕之后，继续对条件表达式进行求值判断，如果值为<code>true</code>，则继续执行循环体，以此类推，直到条件表达式的值为<code>false</code>时则终止循环。</li>
</ul>
<ul>
<li>条件表达式的值恒为true的循环，称为死循环，慎用死循环。</li>
</ul>
<ul>
<li>创建循环的一般步骤：<ol>
<li>初始化一个变量作为初始化表达式</li>
<li>在循环中设置一个条件表达式</li>
<li>定义一个更新表达式，以每次循环时更新变量</li>
</ol>
</li>
</ul>
<h3 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do while语句"></a>do while语句</h3><p><strong>语法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    语句;</span><br><span class="line">    ....</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>do...while...</code>语句在执行时，会先执行循环体，循环体执行完毕之后，再对<code>while</code>后的条件表达式进行求值判断，如果结果为<code>true</code>，则继续执行循环体，以此类推，直到条件表达式的值为<code>false</code>时则终止循环。</li>
</ul>
<h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><p><strong>语法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式; 条件表达式; 更新表达式) &#123;</span><br><span class="line">    语句;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>for</code>语句在执行时的流程<ol>
<li>执行初始化表达式，初始化变量（仅执行一次）</li>
<li>执行条件表达式，判断是否执行循环<br>如果为true，则执行循环体<br>如果为false，则终止循环不再继续</li>
<li>执行更新表达式，更新表达式执行完毕继续从步骤2开始重复</li>
</ol>
</li>
</ul>
<ul>
<li>for循环中的桑部分都可以省略，也可以写在外部。如果for循环中不写任何表达式，只写两个分号<code>for(;;)</code>，此时循环是一个死循环，慎用。</li>
</ul>
<hr>
<h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><ul>
<li><code>break</code>关键字可以用来退出<code>switch</code>或循环语句。<ul>
<li>不能在<code>if</code>语句中单独使用<code>break</code>和<code>continue</code>。</li>
<li><code>break</code>关键字会立即终止离它最近的循环语句。</li>
<li>可以为循环语句创建一个label来标识该循环。<br>语法：<code>label: 循环语句</code><br>使用<code>break</code>语句时，可以在<code>break</code>后写一个<code>label</code>，此时<code>break</code>将结束指定的循环，而不是最近的。<br><code>break: label名称</code></li>
</ul>
</li>
</ul>
<ul>
<li><code>continue</code>关键字可以用来跳过本次循环<ul>
<li><code>continue</code>默认只会对离它最近的循环起作用。<ul>
<li>可以为循环语句创建一个label来标识该循环。<br>语法：<code>label: 循环语句</code><br>使用<code>continue</code>语句时，可以在<code>continue</code>后写一个<code>label</code>，此时<code>continue</code>将跳过指定的循环，而不是最近的。<br><code>continue: label名称</code></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>运算符</title>
    <url>/javascript-basics/07.html</url>
    <content><![CDATA[<p>运算符又称为操作符，通过运算符可以对一个或多个值进行运算，并获取运算结果。<br>比如：<code>typeof</code> 就是一个运算符，可以获取一个字面量的类型，它会将字面量的类型以字符串的形式返回。</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><ul>
<li><p><code>+</code> 加法运算</p>
</li>
<li><p><code>-</code> 减法运算</p>
</li>
<li><p><code>*</code> 乘法运算</p>
</li>
<li><p><code>/</code> 除法运算</p>
</li>
<li><p><code>%</code> 取模运算</p>
</li>
<li><p>对非 Number 类型的值进行运算时，会将其先转换为 Number 类型再进行运算。</p>
</li>
<li><p>任何值与 <code>NaN</code> 进行运算结果都为 <code>NaN</code>。</p>
</li>
<li><p>如果对两个字符串进行加法操作，会将两个字符串进行拼接。</p>
</li>
<li><p>任何值与字符串作加法运算，都会将其先转换为 String 再进行拼串。</p>
<ul>
<li>可以利用这一特点，将任意类型的数据类型转换为 String，只需要为任意的数据<code>+</code>一个<code>&quot;&quot;</code>空串，即可将其转换为 String，这是一种隐式的类型转换，由浏览器自动完成，实际上也是调用了 <code>String()</code> 函数。</li>
</ul>
</li>
<li><p>任何值与字符串作<code>-</code>、<code>*</code>、<code>/</code>运算，都会将其先转换为 Number 再进行运算。</p>
<ul>
<li>可以利用这一特点作隐式的类型转换，通过为一个值<code>- 0</code>、<code>* 1</code>、<code>/ 1</code>来将其转换为 Number。</li>
</ul>
</li>
</ul><a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">result = <span class="number">1</span> + <span class="number">2</span> + <span class="string">"3"</span>; <span class="comment">// result 为 33</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">"1"</span> + <span class="number">2</span> + <span class="number">3</span>; <span class="comment">// result 为 123</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">2</span> * <span class="literal">null</span>; <span class="comment">// result 为 0</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">9</span> % <span class="number">3</span>; <span class="comment">// 9 除以 3 余 0，结果为 0</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">9</span> % <span class="number">4</span>; <span class="comment">// 9 除以 4 余 1，结果为 1</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><ul>
<li><p><code>+</code> 正号<br>正号不会对数值产生任何影响。</p>
</li>
<li><p><code>-</code> 负号<br>负号可以对数值进行负号的取反。</p>
</li>
<li><p>对于非 Number 的值，它会将其先转换为 Number，再进行运算。<br>可以对其他的数据类型使用<code>+</code>正号运算，来将其转换为 Number，原理和 <code>Number()</code> 相同。</p>
</li>
</ul>
<hr>
<h2 id="自增和自减"><a href="#自增和自减" class="headerlink" title="自增和自减"></a>自增和自减</h2><ul>
<li><p><code>++</code> 自增<br>通过自增可以使变量在自身的基础上增加1，并且原变量的值会立即改变。<br><code>a++;</code>相当于<code>a = a + 1;</code></p>
<ul>
<li>表达式<code>a++</code>的值是自增前的值</li>
<li>表达式<code>++a</code>的值是自增后的值</li>
</ul>
</li>
<li><p><code>--</code> 自减<br>通过自减可以使变量在自身的基础上减去1，并且原变量的值会立即改变。<br><code>a--;</code>相当于<code>a = a - 1;</code></p>
<ul>
<li>表达式<code>a--</code>的值是自减前的值</li>
<li>表达式<code>--a</code>的值是自减后的值</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">a = a++;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a的值是"</span> + a);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a的值是1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意区分变量与表达式。</p>
</blockquote>
<hr>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>JS 中提供了三种逻辑运算符，用来作逻辑判断。</p>
<p><strong>Boolean 的逻辑运算：</strong></p>
<ul>
<li><p><code>!</code>  非运算<br>非运算就是对一个布尔值进行取反操作，<code>true</code> 变 <code>false</code>，<code>false</code> 变 <code>true</code>。</p>
<ul>
<li>如果对一个值进行两次非运算，它不会改变。</li>
<li>如果对一个非布尔值进行非运算，则会将其转换为布尔值再运算。<ul>
<li>可以利用该特点，为任意数据类型作两次非运算，来将其转换为布尔值。</li>
</ul>
</li>
</ul>
</li>
<li><p><code>&amp;&amp;</code> 与运算<br>可以对符号两侧的值进行与运算并返回结果。</p>
<ul>
<li>运算规则<ul>
<li>只要有一个 <code>false</code> 则返回 <code>false</code></li>
<li>两个值都为 <code>true</code> 时才返回 <code>true</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>JS 中的与运算是“短路的与”，当第一个值为 <code>false</code> 时，便不会再考虑第二个值。</p>
</blockquote>
<ul>
<li><code>||</code> 或运算<br>可以对符号两侧的值进行或运算并返回结果。<ul>
<li>运算规则<ul>
<li>只要有一个 <code>true</code> 则返回 <code>true</code></li>
<li>两个值都为 <code>false</code> 时才返回 <code>false</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>JS中的或运算是“短路的或”，当第一个值为 <code>true</code> 时，便不会再考虑第二个值。</p>
</blockquote>
<p><strong>非 Boolean 的逻辑运算：</strong></p>
<p>对于非布尔值进行与或运算时，会先将其转换为布尔值，然后再进行运算，并且返回原值。</p>
<ul>
<li><p>与运算</p>
<ul>
<li>如果第一个值为 <code>true</code>，则返回第二个值。<br>例：<code>var result = 5 &amp;&amp; 6;</code> 返回 <code>6</code></li>
<li>如果第一个值为 <code>false</code>，则返回第一个值。<br>例：<code>var result = NaN &amp;&amp; 9;</code> 返回 <code>NaN</code></li>
</ul>
</li>
<li><p>或运算</p>
<ul>
<li>如果第一个值为 <code>true</code>，则返回第一个值。<br>例：<code>var result = 2 || NaN;</code> 返回 <code>2</code></li>
<li>如果第一个值为 <code>false</code>，则返回第二个值。<br>例：<code>var result = &quot;&quot; || &quot;hello&quot;</code> 返回 <code>&quot;hello&quot;</code></li>
</ul>
</li>
</ul>
<hr>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><ul>
<li><p><code>=</code><br><code>str = &quot;I love you.&quot;</code><br>可以将符号右侧的值赋值给符号左侧的变量。</p>
</li>
<li><p><code>+=</code><br><code>a += 5;</code> 等价于 <code>a = a + 5;</code></p>
</li>
<li><p><code>-=</code><br><code>a -= 5;</code> 等价于 <code>a = a - 5;</code></p>
</li>
<li><p><code>*=</code><br><code>a *= 5;</code> 等价于 <code>a = a * 5;</code></p>
</li>
<li><p><code>/=</code><br><code>a /= 5;</code> 等价于 <code>a = a / 5;</code></p>
</li>
<li><p><code>%=</code><br><code>a -%= 5;</code> 等价于 <code>a = a % 5;</code></p>
</li>
</ul>
<hr>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>通过关系运算符可以比较两个值之间的大小关系，如果关系成立则返回 <code>true</code>，如果关系不成立则返回 <code>false</code>。</p>
<h3 id="自动转换类型"><a href="#自动转换类型" class="headerlink" title="自动转换类型"></a>自动转换类型</h3><p><strong>Number的关系运算：</strong></p>
<ul>
<li><p><code>&gt;</code> 大于<br>判断符号左侧的值是否大于右侧的值。<br>关系成立则返回 true，反之则返回 false。</p>
</li>
<li><p><code>&gt;=</code> 大于或等于<br>判断符号左侧的值是否大于或等于右侧的值。<br>关系成立则返回 true，反之则返回 false。</p>
</li>
<li><p><code>&lt;</code> 小于<br>判断符号左侧的值是否小于右侧的值。<br>关系成立则返回 true，反之则返回 false。</p>
</li>
<li><p><code>&lt;=</code> 小于或等于<br>判断符号左侧的值是否小于或等于右侧的值。<br>关系成立则返回 true，反之则返回 false。</p>
</li>
<li><p><code>==</code> 等于<br>判断符号左侧的值是否等于右侧的值。<br>关系成立则返回 <code>true</code>，反之则返回 <code>false</code>。</p>
</li>
<li><p><code>!=</code> 不等于<br>判断符号左侧的值是否不等于右侧的值。<br>关系成立则返回 <code>true</code>，反之则返回 <code>false</code>。</p>
</li>
</ul>
<p><strong>非 Number 的关系运算：</strong></p>
<ul>
<li><p>对于非数值类型的值进行关系运算时，会将其先转换为 Number 再进行计算。</p>
</li>
<li><p>如果符号两侧的值都是字符串时，不会将其转换为数字进行比较，而会从左至右按位分别比较字符的 Unicode 编码。<br>因此可以用来对英文进行排序，但是比较中文时无任何意义。<br>注意：在比较两个字符串型的数字时，一定要先手动转换类型。</p>
</li>
<li><p>任何值与 <code>NaN</code> 进行关系运算，都返回 <code>false</code>。</p>
</li>
<li><p><code>undefined</code> 衍生自 <code>null</code>，因此这两个值作相等判断时返回 <code>true</code>。<br><code>console.log(undefined == null);</code> 结果为 <code>true</code></p>
</li>
</ul>
<h3 id="不自动转换类型"><a href="#不自动转换类型" class="headerlink" title="不自动转换类型"></a>不自动转换类型</h3><ul>
<li><code>===</code> 全等<br>判断符号两侧的值是否全等，不会自动做类型转换。<br>关系成立则返回 <code>true</code>，反之则返回 <code>false</code>。</li>
</ul>
<ul>
<li><code>!==</code> 不全等<br>判断符号两侧的值是否不全等，不会自动做类型转换。<br>关系成立则返回 <code>true</code>，反之则返回 <code>false</code>。</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li><code>NaN</code> 不与任何值相等，包括它本身。</li>
</ul>
<ul>
<li><code>console.log(undefined === null);</code> 结果为 <code>false</code></li>
</ul>
<ul>
<li>可以使用 <code>isNaN()</code> 函数来判断一个值是否为 <code>NaN</code>，若该值是 <code>NaN</code> 则返回 <code>true</code>，反之则返回 <code>false</code>。</li>
</ul>
<hr>
<h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p>也叫三元运算符或者三目运算符。</p>
<ul>
<li><p>语法：<br><code>条件表达式 ? 语句 1 : 语句 2;</code></p>
</li>
<li><p>执行流程<br>首先对<code>条件表达式</code>进行求值，如果该值为 <code>true</code>，则执行<code>语句 1</code>，并返回结果；如果该值为 <code>false</code>，则执行<code>语句 2</code>，并返回结果。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>, b = <span class="number">20</span>, c = <span class="number">30</span>;</span><br><span class="line"><span class="comment">/** 获取 a、b、c 中的最大值 **/</span></span><br><span class="line"><span class="keyword">var</span> max = a &gt; b ? a : b; <span class="comment">// 将 a 和 b 中的最大值赋值给 max</span></span><br><span class="line">max = max &gt; c ? max : c; <span class="comment">// 将 max 和 c 中的最大值赋值给 max</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">max = a &gt; b ? a &gt; c ? a : b &gt; c ? b : c;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><p>使用 <code>,</code> 可以分割多个语句，一般可以在声明多个变量时使用，使用 <code>,</code> 运算符同时声明多个变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, c;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>, y = <span class="number">20</span>, z = <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><p>与数学中一样，JavaScript 的运算符也有优先级。</p>
<p>运算符的优先级：</p>
<ul>
<li><code>.</code> <code>[]</code> <code>new</code></li>
<li><code>()</code></li>
<li><code>++</code> <code>--</code></li>
<li><code>!</code> <code>~</code> <code>+（单目）</code> <code>-（单目）</code> <code>typeof</code> <code>void</code> <code>delete</code></li>
<li><code>%</code> <code>*</code> <code>/</code></li>
<li><code>+（双目）</code> <code>-（双目）</code></li>
<li><code>&lt;&lt;</code> <code>&gt;&gt;</code> <code>&gt;&gt;&gt;</code></li>
<li><code>&lt;</code> <code>&lt;=</code> <code>&gt;</code> <code>&gt;=</code></li>
<li><code>==</code> <code>!==</code> <code>===</code></li>
<li><code>&amp;</code></li>
<li><code>^</code></li>
<li><code>|</code></li>
<li><code>&amp;&amp;</code></li>
<li><code>||</code></li>
<li><code>?:</code></li>
<li><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>&lt;&lt;=</code> <code>&gt;&gt;=</code> <code>&gt;&gt;&gt;=</code> <code>&amp;=</code> <code>^=</code> <code>|=</code></li>
<li><code>,</code></li>
</ul>
<blockquote>
<p>上表列出的优先级从上至下由高到低，同一行优先级相同。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>强制类型转换</title>
    <url>/javascript-basics/06.html</url>
    <content><![CDATA[<p><strong>强制类型转换</strong><br>指的是将一个数据类型强制转换为其他的数据类型。<br>类型转换主要指，将其他数据类型转换为</p><ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
</ul><h2 id="转换为-String"><a href="#转换为-String" class="headerlink" title="转换为 String"></a>转换为 String</h2><p><strong>方式一：</strong></p><ul>
<li>调用被转换数据类型的 <code>toString()</code> 方法<br>该方法不会影响原变量的值，它会将转换的结果返回。<br>注意：<code>null</code> 和 <code>undefined</code> 这两个值没有 <code>toString()</code> 方法。</li>
</ul><a id="more"></a>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 调用 a 的 toString() 方法，并将返回结果赋值给变量 b</span></span><br><span class="line"><span class="keyword">var</span> b = a.toString(string);</span><br></pre></td></tr></table></figure>

<p><strong>方式二：</strong></p>
<ul>
<li>调用 <code>String()</code> 函数，并将被转换数据作为参数传递给函数<br>对于 Number 和 Boolean 实际上依然是调用的 <code>toString()</code> 方法，但对于 <code>null</code> 和 <code>undefined</code> 就有所不同，它会将 <code>null</code> 直接转换为 <code>&quot;null&quot;</code>，将 <code>undefined</code> 直接转换为 <code>&quot;undefined&quot;</code>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 将 a 作为参数并调用 String() 函数</span></span><br><span class="line">a = <span class="built_in">String</span>(a); <span class="comment">// 将转换结果赋值给 a</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>调用 <code>xxx</code> 的 <code>yyy()</code> 方法，就是 <code>xxx.yyy();</code><br>调用 <code>zzz()</code> 函数，就是 <code>zzz();</code></p>
</blockquote>
<hr>
<h2 id="转换为Number"><a href="#转换为Number" class="headerlink" title="转换为Number"></a>转换为Number</h2><p><strong>方式一：</strong></p>
<ul>
<li>调用 <code>Number()</code> 函数，并将被转换数据作为参数传递给函数<ul>
<li>String –&gt; Number<ul>
<li>如果是纯数字的字符串，则直接将其转换为数字</li>
<li>如果字符串中有非数字的内容，则转换为 <code>NaN</code></li>
<li>如果字符串是一个空串或者只有空格的串，则转换为 <code>0</code></li>
</ul>
</li>
<li>Boolean –&gt; Number<ul>
<li><code>true</code> 转换为 <code>1</code></li>
<li><code>false</code> 转换为 <code>0</code></li>
</ul>
</li>
<li>Null –&gt; Number<ul>
<li>结果为 <code>0</code></li>
</ul>
</li>
<li>Undefined –&gt; Number<ul>
<li>结果为 <code>NaN</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"123"</span>;</span><br><span class="line"><span class="comment">// 将 a 作为参数并调用 Number() 函数</span></span><br><span class="line">a = <span class="built_in">Number</span>(a); <span class="comment">// 将转换结果赋值给 a</span></span><br></pre></td></tr></table></figure>

<p><strong>方式二：</strong><br>这种方式专门用来对付字符串。</p>
<ul>
<li>调用 <code>parseInt()</code> 函数<br>把字符串转换为整数。<br>该函数可以将一个字符串中有效的整数内容取出，然后转换为 Number。</li>
</ul>
<ul>
<li>调用 <code>parseFloat()</code> 函数<br>把字符串转换为浮点数。<br>该函数可以将一个字符串中有效的浮点数内容取出，然后转换为 Number。</li>
</ul>
<p>如果对非 String 使用 <code>parseInt()</code> 或 <code>parseFloat()</code> 函数，它会将其先转换为 String 再进行操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"200px"</span>;</span><br><span class="line"><span class="comment">// 将 a 作为参数并调用 parseInt() 函数</span></span><br><span class="line">a = <span class="built_in">parseInt</span>(a); <span class="comment">// 将转换结果赋值给 a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">"3.1415926 cm"</span>;</span><br><span class="line">b = <span class="built_in">parseInt</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="string">"3.1415926 cm"</span></span><br><span class="line">c = <span class="built_in">parseFloat</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="string">"123.456.789.abc"</span></span><br><span class="line">d = <span class="built_in">parseFloat</span>(d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="literal">true</span>;</span><br><span class="line">e = <span class="built_in">parseInt</span>(e);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">结果:</span><br><span class="line">a = 200</span><br><span class="line">b = 3</span><br><span class="line">c = 3.1415926</span><br><span class="line">d = 123.456</span><br><span class="line">e = NaN</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="转换为-Boolean"><a href="#转换为-Boolean" class="headerlink" title="转换为 Boolean"></a>转换为 Boolean</h2><ul>
<li>调用 <code>Boolean()</code> 函数<ul>
<li>Number –&gt; Boolean<br>除了 <code>0</code> 和 <code>NaN</code> 是 <code>false</code>，其余的都是 <code>true</code></li>
<li>String –&gt; Boolean<br>除了空串是 <code>false</code>，其余的都是 <code>true</code></li>
<li>Null 和 Undefined 都会转换为 <code>false</code></li>
<li>Object会转换为 <code>true</code></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">a = <span class="built_in">Boolean</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">-456</span>;</span><br><span class="line">b = <span class="built_in">Boolean</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">0</span>;</span><br><span class="line">c = <span class="built_in">Boolean</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="literal">null</span>;</span><br><span class="line">d = <span class="built_in">Boolean</span>(d);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p><strong>JS 中其他进制的表示</strong></p>
<ul>
<li>以 <code>0x</code> 开头表示十六进制数<br>例：<code>0xff</code>、<code>0x10</code>、<code>0xcafe</code></li>
</ul>
<ul>
<li>以 <code>0</code> 开头表示八进制数<br>例：<code>070</code>、<code>022</code>、<code>065535</code></li>
</ul>
<ul>
<li>以 <code>0b</code> 开头表示二进制数<br>例：<code>0b11</code>、<code>0b1001</code>、<code>0b10100101101</code><br>注意：不是所有浏览器都支持。</li>
</ul>
<p>注意以下情况：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"070"</span></span><br><span class="line">a = <span class="built_in">parseInt</span>(a);</span><br></pre></td></tr></table></figure>

<p>像 <code>070</code> 这种字符串，有些浏览器会当作八进制解析，有些会当作十进制解析，那么可以在 <code>parseInt()</code> 中传递第二个参数，来指定数字的进制，以解决浏览器不统一的问题。<br>例：<code>a = parseInt(a, 10);</code></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 数据类型</title>
    <url>/javascript-basics/05.html</url>
    <content><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型指的就是字面量的类型。</p><p>在 JS 中一共有 6 种数据类型：</p><ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>Null</li>
<li>Undefined</li>
<li>Object</li>
</ul><p>其中 <code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Null</code>、<code>Undefined</code> 属于基本数据类型，<code>Object</code> 属于引用数据类型。</p><hr><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><a id="more"></a>




<p><strong>字符串</strong></p>
<ul>
<li>在 JS 中字符串需要使用引号引起来</li>
<li>使用双引号或单引号都可以，但是必须两两对应</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">var</span> massage = <span class="string">'I miss you.'</span>;</span><br><span class="line">str = <span class="string">'我说："今晚月亮真圆啊。"'</span>; <span class="comment">// 注意嵌套时的问题</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"I miss you too."</span>);</span><br></pre></td></tr></table></figure>

<p>在字符串中可以使用 <code>\</code> 作为转义字符，当表示一些特殊符号时可以使用 <code>\</code> 进行转义。</p>
<p>例：</p>
<ul>
<li><code>\&quot;</code> 表示 <code>&quot;</code></li>
<li><code>\&#39;</code> 表示 <code>&#39;</code></li>
<li><code>\\</code> 表示 <code>\</code></li>
<li><code>\n</code> 表示换行</li>
<li><code>\t</code> 表示制表符</li>
</ul>
<hr>
<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p><strong>数值</strong></p>
<ul>
<li>在 JS 中所有的数值都是 Number 类型<br>包括整数和浮点数。</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">a = <span class="number">456</span>;</span><br><span class="line"><span class="keyword">var</span> PI = <span class="number">3.1415926</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以使用运算符 <code>typeof</code> 来检查一个变量的类型。<br>语法：<code>typeof 变量名</code><br>检查字符串时，会返回 <code>string</code><br>检查数值时，会返回 <code>number</code><br>例：<code>console.log(typeof a);</code></p>
</li>
<li><p>JS中可以表示的数值的最值<br>可以使用 <code>Number.MAX_VALUE</code> 来表示最大值，其值为 <code>1.7976931348623157e+308</code>。<br>可以使用 <code>Number.MIN_VALUE</code> 来表示最小<strong>正数</strong>数值，其值为 <code>5e-324</code>。<br>如果使用 Number 表示的数值超过了最大值，则会返回 <code>Infinity</code>，表示正无穷。<br>如果将两个非 Number 的值进行运算，将会返回 <code>NaN</code>，表示 Not a Number。<br>使用 <code>typeof</code> 来检查 <code>Infinity</code> 和 <code>NaN</code> 都会返回 <code>number</code>。</p>
</li>
</ul>
<blockquote>
<p>在 JavaScript 中，整数的运算基本可以保证精确，但浮点数的运算可能得到一个不精确的结果，因此千万不要使用 JS 进行对精确度要求较高的运算，比如财务方面。</p>
</blockquote>
<hr>
<h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><p><strong>布尔值</strong></p>
<p>布尔值有两个值：</p>
<ul>
<li><code>true</code> 真</li>
<li><code>false</code> 假</li>
</ul>
<p>主要用于逻辑判断。</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bool = <span class="literal">false</span>;</span><br><span class="line">bool = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>使用 <code>typeof</code> 检查布尔值时，会返回 <code>boolean</code>。</p>
<hr>
<h2 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h2><ul>
<li>Null 类型的值只有一个，就是 <code>null</code><br><code>null</code>专门用来表示一个为空的“对象”，表示空值。</li>
</ul>
<p>例：<code>var a = null;</code></p>
<p>使用 <code>typeof</code> 检查 <code>null</code> 值时，会返回 <code>object</code>。</p>
<ul>
<li>Undefined 类型的值只有一个，就是 <code>undefined</code><br>当声明一个变量但并不为其赋值时，该变量的值就是 <code>undefined</code>，表示未定义。</li>
</ul>
<p>例：<code>var b;</code></p>
<p>使用 <code>typeof</code> 检查 <code>undefined</code> 值时，会返回<code>undefined</code>。</p>
<hr>
<h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p><strong>Object类型暂不作介绍。</strong></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>标识符</title>
    <url>/javascript-basics/04.html</url>
    <content><![CDATA[<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>在 JS 中所有可以由我们自主命名的都可以称为标识符。<br>例如：变量名、函数名、属性名等。</p><p>命名一个标识符时需遵守如下规则：</p><ul>
<li>标识符可以由字母、数字、下划线和 <code>$</code> 组成</li>
<li>标识符不能以数字开头</li>
<li>标识符不能与 ECMAScript 中的关键字或保留字相同</li>
<li>标识符一般建议采用驼峰命名法</li>
</ul><p>例如以下标识符都是错误的：</p><a id="more"></a>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">var #a*b&amp;c = 123; // 不能包含规定以外的字符</span><br><span class="line"><span class="keyword">var</span> <span class="number">2</span>abnc = <span class="number">123</span>; <span class="comment">// 不能以数字开头</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">var</span> = <span class="number">123</span>; <span class="comment">// 不能包含关键字也不能学狗叫</span></span><br></pre></td></tr></table></figure>

<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><table><tr><td>break</td><td>do</td><td>instanceof</td><td>typeof</td><td>case</td></tr><tr><td>else</td><td>new</td><td>var</td><td>catch</td><td>finally</td></tr><tr><td>return</td><td>void</td><td>continue</td><td>for</td><td>switch</td></tr><tr><td>while</td><td>default</td><td>if</td><td>throw</td><td>delete</td></tr><tr><td>in</td><td>try</td><td>function</td><td>this</td><td>with</td></tr><tr><td>debugger</td><td>false</td><td>true</td><td>null</td><td></td></tr></table>

<h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><table><tr><td>class</td><td>enum</td><td>extends</td><td>super</td><td>const</td><td>export</td></tr><tr><td>import</td><td>implements</td><td>let</td><td>private</td><td>public</td><td>yield</td></tr><tr><td>interface</td><td>package</td><td>protected</td><td>static</td><td></td><td></td></tr></table>

<blockquote>
<p>实际上 JS 底层保存标识符时采用的是 Unicode 编码，因此理论上讲，所有 UTF-8 中的字符都可以作为标识符，即包括中文。但是千万不要这么使用，你会被嘲笑得无颜回乡。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>字面量和变量</title>
    <url>/javascript-basics/03.html</url>
    <content><![CDATA[<h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>字面量，都是一些不可改变的值。<br>比如：<code>1</code>、<code>2</code>、<code>3</code>……、<code>&quot;hello&quot;</code>、<code>true</code> 等。</p><p>字面量都是可以直接使用的，但是一般不会直接使用字面量。<br>例：<code>alert(3.1415926);</code></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量，变量可以用来保存字面量，而且变量的值可以任意改变。<br>变量更加方便使用，所以在开发中都是通过变量去保存一个字面量，而很少直接使用字面量。<br>可以通过变量名对字面量进行描述。</p><a id="more"></a>


<p>例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 js 中使用 var 关键字来声明一个变量</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为变量赋值</span></span><br><span class="line">a = <span class="number">123</span>;</span><br><span class="line">a = <span class="number">456</span>;</span><br><span class="line">a = <span class="number">3.1415926</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明和赋值同时进行</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0.618</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1314520</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用变量名描述字面量</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">80</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>牵手 JavaScript 走向幸福</title>
    <url>/javascript-basics/02.html</url>
    <content><![CDATA[<h2 id="JS-代码的编写位置"><a href="#JS-代码的编写位置" class="headerlink" title="JS 代码的编写位置"></a>JS 代码的编写位置</h2><ul>
<li>将 JS 代码编写到标签的 <code>onclick</code> 属性中<br>当点击该元素时，JS 代码则会执行。不推荐使用。</li>
</ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"alert('讨厌！你点我干嘛~~~');"</span>&gt;</span>你点我一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul>
<li>将 JS 代码编写到超链接的 <code>href</code> 属性中<br>当点击超链接时，JS 代码则会执行。不推荐使用。<br>例：</li>
</ul><a id="more"></a>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript: arlert('让你点你就点~~~');"</span>&gt;</span>你也点我一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>click<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>将 JS 代码编写到 <code>script</code> 标签中<br>是比较推荐的方法。<br>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">"我是 script 标签中的 JS 语句。"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">"HelloWorld!"</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>将 JS 代码编写到外部 <code>*.js</code> 文件中<br>通过 <code>script</code> 标签引入外部 JS 文件，外部 JS 文件可以在不同的页面中同时引用，也可以利用到浏览器的缓存机制，这是最为推荐的方式。<br>例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/script.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>script</code> 标签一旦用于引入外部文件，就不能再编写内部 JS 了，即使编写了浏览器也会忽略，如果需要则可以重新创建一个 <code>script</code> 标签用于编写内部 JS。</p>
</blockquote>
<h2 id="JavaScript-注释"><a href="#JavaScript-注释" class="headerlink" title="JavaScript 注释"></a>JavaScript 注释</h2><ul>
<li>多行注释<br>使用 <code>/*</code> 开始，<code>*/</code> 结束。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    多行注释</span></span><br><span class="line"><span class="comment">    JS 注释</span></span><br><span class="line"><span class="comment">    多行注释，注释中的内容不会被执行，但是可以在源代码中查看。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>单行注释<br>使用 <code>//</code> 注释一整行内容，<code>//</code> 之后的内容会被注释，而之前的内容不会。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">document.wirte("Hello!"); // 单行注释</span><br><span class="line">// 要养成良好的编写注释的习惯，可以增强可读性和维护性，</span><br><span class="line">// 也可以通过注释来对代码进行一些简单的调试。</span><br></pre></td></tr></table></figure>

<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul>
<li><p>JS 中严格区分大小写</p>
</li>
<li><p>JS 中每一条语句以 <code>;</code> 分号结尾<br>如果不写分号，浏览器会自动添加，但会消耗一些系统资源，而且有些情况浏览器会加错分号，导致程序出错，所以开发中必须使用分号结尾。</p>
</li>
<li><p>JS 中忽略多个空格和换行<br>因此可以利用空格和换行对代码进行格式化，增强可读性。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>与 JavaScript 初次邂逅</title>
    <url>/javascript-basics/01-%E4%B8%8EJavaScript%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85.html</url>
    <content><![CDATA[<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><ul>
<li><p>JavaScript 诞生于 1995 年，它的出现主要是用于处理网页中的前端验证。</p>
</li>
<li><p>所谓的前端验证，就是指检查用户输入的内容是否符合一定的规则。</p>
</li>
<li><p>比如：用户名的长度、密码的长度、邮箱地址的格式等。</p>
</li>
</ul><h2 id="简史"><a href="#简史" class="headerlink" title="简史"></a>简史</h2><ul>
<li><p>JavaScript 是由网景公司发明，起初命名为 LiveScript，后来由于 Sun 公司的介入更名为了 JavaScript。</p>
</li>
<li><p>1996 年微软公司在其最新的 IE3 浏览器中引入了自己对 JavaScript 的实现 “JScript”。</p>
</li>
<li><p>于是在市面上存在两个版本的 JavaScript，一个网景公司的 JavaScript 和微软的 JScript。</p>
</li>
<li><p>为了确保不同的浏览器上运行的 JavaScript 标准一致，所以几个公司共同制定了 JS 的标准，命名为 ECMAScript。</p>
</li>
</ul><a id="more"></a>

<h2 id="时间表"><a href="#时间表" class="headerlink" title="时间表"></a>时间表</h2><table>
<thead>
<tr>
<th>年份</th>
<th>事件</th>
</tr>
</thead>
<tbody><tr>
<td>1995年</td>
<td>网景公司开发了 JavaScript</td>
</tr>
<tr>
<td>1996年</td>
<td>微软发布了和 JavaScript 兼容的 JScript</td>
</tr>
<tr>
<td>1997年</td>
<td>ECMAScript 第 1 版（ECMA-262）</td>
</tr>
<tr>
<td>1998年</td>
<td>ECMAScript 第 2 版</td>
</tr>
<tr>
<td>1998年</td>
<td>DOM Level1 的制定</td>
</tr>
<tr>
<td>1998年</td>
<td>新型语言 DHTML 登场</td>
</tr>
<tr>
<td>1999年</td>
<td>ECMAScript 第 3 版</td>
</tr>
<tr>
<td>2000年</td>
<td>DOM Level2 的制定</td>
</tr>
<tr>
<td>2002年</td>
<td>ISO/IEC 16262:2002 的确立</td>
</tr>
<tr>
<td>2004年</td>
<td>DOM Level3 的制定</td>
</tr>
<tr>
<td>2006年</td>
<td>新型语言 Ajax 登场</td>
</tr>
<tr>
<td>2009年</td>
<td>ECMAScript 第 5 版</td>
</tr>
<tr>
<td>2009年</td>
<td>新型语言 HTML5 登场</td>
</tr>
<tr>
<td>2015年</td>
<td>ECMAScript 第 6 版</td>
</tr>
</tbody></table>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul>
<li><p>ECMAScript 是一个标准，而这个标准需要由各个厂商去实现。</p>
</li>
<li><p>不同浏览器厂商对该标准会有不同的实现。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>浏览器</th>
<th>JavaScript 实现方式（引擎）</th>
</tr>
</thead>
<tbody><tr>
<td>Firefox</td>
<td>SpiderMonkey</td>
</tr>
<tr>
<td>Internet Explorer</td>
<td>JScript / Chakra</td>
</tr>
<tr>
<td>Safari</td>
<td>JavaScriptCore</td>
</tr>
<tr>
<td>Chrome</td>
<td>V8</td>
</tr>
<tr>
<td>Carakan</td>
<td>Carakan</td>
</tr>
</tbody></table>
<ul>
<li><p>ECMAScript 是 JavaScript 标准，所以一般情况下这两个词语我们认为是同一事物。<br>但实际上，JavaScript 的含义却要更大些。</p>
</li>
<li><p>一个完整的 JavaScript 实现应该由以下三个部分构成：</p>
<ul>
<li>ECMAScript</li>
<li>DOM（文档对象模型）</li>
<li>BOM（浏览器对象模型）</li>
</ul>
</li>
</ul>
<h2 id="JavaScript-的特点"><a href="#JavaScript-的特点" class="headerlink" title="JavaScript 的特点"></a>JavaScript 的特点</h2><ul>
<li><p>解释型语言</p>
</li>
<li><p>类似于 C 和 Java 的语法结构</p>
</li>
<li><p>动态语言</p>
</li>
<li><p>基于原型的面向对象</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>图片的垂直水平居中</title>
    <url>/css/08-%E5%9B%BE%E7%89%87%E7%9A%84%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD.html</url>
    <content><![CDATA[<h2 id="vertical-align的使用"><a href="#vertical-align的使用" class="headerlink" title="vertical-align的使用"></a>vertical-align的使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>docment<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">		* &#123;</span><br><span class="line">			margin: 0;</span><br><span class="line">			padding: 0;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line">			width: 500px;</span><br><span class="line">			height: 500px;</span><br><span class="line">			margin: 50px auto;</span><br><span class="line">			border: 1px solid black;</span><br><span class="line">			text-align: center;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="selector-class">.wrap</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">			content: "";</span><br><span class="line">			display: inline-block;</span><br><span class="line">			height: 100%;</span><br><span class="line">			vertical-align: middle;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="selector-class">.wrap</span> <span class="selector-class">.img</span> &#123;</span></span><br><span class="line">			display: inline-block;</span><br><span class="line">			width: 150px;</span><br><span class="line">			height: 150px;</span><br><span class="line"><span class="css">			<span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">			vertical-align: middle;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>

<p>查看效果&gt;&gt;<a href="/mypages/css2.1/2008.html" target="_blank">传送门</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>CSS2.1</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>垂直水平居中</title>
    <url>/css/07-%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD.html</url>
    <content><![CDATA[<h2 id="已知元素高度和宽度的情况"><a href="#已知元素高度和宽度的情况" class="headerlink" title="已知元素高度和宽度的情况"></a>已知元素高度和宽度的情况</h2><p>方法一：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>已知高宽居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">			* &#123;</span><br><span class="line">				margin: 0;</span><br><span class="line">				padding: 0;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line">				position: relative;</span><br><span class="line">				width: 800px;</span><br><span class="line">				height: 600px;</span><br><span class="line">				margin: auto;</span><br><span class="line"><span class="css">				<span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.wrap</span> <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">				position: absolute;</span><br><span class="line">				top: 50%;</span><br><span class="line">				left: 50%;</span><br><span class="line">				margin-top: -100px;</span><br><span class="line">				margin-left: -100px;</span><br><span class="line">				width: 200px;</span><br><span class="line">				height: 200px;</span><br><span class="line">				background: orange;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>inner<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>


<p><a href="/mypages/css2.1/2007-1.html" target="_blank">戳我查看效果</a>！</p>
<p>方法二：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>已知高宽居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">			* &#123;</span><br><span class="line">				margin: 0;</span><br><span class="line">				padding: 0;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line">				position: relative;</span><br><span class="line">				width: 800px;</span><br><span class="line">				height: 600px;</span><br><span class="line">				margin: auto;</span><br><span class="line"><span class="css">				<span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.wrap</span> <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">				position: absolute;</span><br><span class="line">				top: 0;</span><br><span class="line">				right: 0;</span><br><span class="line">				bottom: 0;</span><br><span class="line">				left: 0;</span><br><span class="line">				margin: auto;</span><br><span class="line">				width: 200px;</span><br><span class="line">				height: 200px;</span><br><span class="line">				background: orange;</span><br><span class="line">				text-align: center;</span><br><span class="line">				line-height: 200px;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>inner<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="/mypages/css2.1/2007-2.html" target="_blank">戳我查看效果</a>！</p>
<h2 id="未知元素高度和宽度的情况"><a href="#未知元素高度和宽度的情况" class="headerlink" title="未知元素高度和宽度的情况"></a>未知元素高度和宽度的情况</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>未知高宽居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">			* &#123;</span><br><span class="line">				margin: 0;</span><br><span class="line">				padding: 0;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line">				position: relative;</span><br><span class="line">				width: 800px;</span><br><span class="line">				height: 600px;</span><br><span class="line">				margin: auto;</span><br><span class="line"><span class="css">				<span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.wrap</span> <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">				position: absolute;</span><br><span class="line">				top: 50%;</span><br><span class="line">				left: 50%;</span><br><span class="line">				transform: translate(-50%,-50%);</span><br><span class="line">				background: orange;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">				inner inner inner inner <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				inner inner inner inner <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				inner inner inner inner <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				inner inner inner inner <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				inner inner inner inner <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				inner inner inner inner <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="/mypages/css2.1/2007-3.html" target="_blank">戳我查看效果</a>！</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>CSS2.1</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>清楚浮动</title>
    <url>/css/06-%E6%B8%85%E6%A5%9A%E6%B5%AE%E5%8A%A8.html</url>
    <content><![CDATA[<h2 id="六种清楚浮动的方法"><a href="#六种清楚浮动的方法" class="headerlink" title="六种清楚浮动的方法"></a>六种清楚浮动的方法</h2><ul>
<li>给父元素添加高度（扩展性不好）<br>  例：</li>
</ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line"><span class="css">		<span class="comment">/* 指定高度为子元素的高度 */</span></span></span><br><span class="line">		height: 100px;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="css">	<span class="selector-class">.wrap</span> <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">		float: left;</span><br><span class="line">		width: 100px;</span><br><span class="line">		height: 100px;</span><br><span class="line">		background: orange;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- HTML --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><a id="more"></a>


<ul>
<li>给父元素添加浮动（页面中所有元素都加浮动，<code>margin</code>左右自动失效(floats bad!)）<br>  例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">		float: left;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="css">	<span class="selector-class">.wrap</span> <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">		float: left;</span><br><span class="line">		width: 100px;</span><br><span class="line">		height: 100px;</span><br><span class="line">		background: orange;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- HTML --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>空标签清楚浮动（IE6最小高度19px(处理后IE6下还有2px偏差)）<br>  例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="css">	<span class="selector-class">.wrap</span> <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">		float: left;</span><br><span class="line">		width: 100px;</span><br><span class="line">		height: 100px;</span><br><span class="line">		background: orange;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- HTML --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear: both;"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;br/&gt;</code>清楚浮动（不符合“结构、样式、行为”三者分离的要求）<br>  例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="css">	<span class="selector-class">.wrap</span> <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">		float: left;</span><br><span class="line">		width: 100px;</span><br><span class="line">		height: 100px;</span><br><span class="line">		background: orange;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- HTML --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">br</span> <span class="attr">clear</span>=<span class="string">"all"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>overall</code>开启BFC<br>  例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">		overflow: hidden;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="css">	<span class="selector-class">.wrap</span> <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">		float: left;</span><br><span class="line">		width: 100px;</span><br><span class="line">		height: 100px;</span><br><span class="line">		background: orange;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- HTML --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>伪元素<code>after</code><br>  例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">	<span class="selector-class">.wrap</span> <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">		float: left;</span><br><span class="line">		width: 100px;</span><br><span class="line">		height: 100px;</span><br><span class="line">		background: orange;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="css">	<span class="comment">/* 兼容IE6，开启haslayout */</span></span></span><br><span class="line">	.clearfix &#123; *zoom: 1; &#125;</span><br><span class="line">	</span><br><span class="line"><span class="css">	·<span class="selector-tag">clearfix</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">		content: "";</span><br><span class="line">		display: block;</span><br><span class="line">		clear: both;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- HTML --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap clearfix"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="推荐使用的clearfix写法"><a href="#推荐使用的clearfix写法" class="headerlink" title="推荐使用的clearfix写法"></a>推荐使用的clearfix写法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.clearfix &#123;</span><br><span class="line">	*zoom: 1;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix:before,</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">	content: "";</span><br><span class="line">	display: table;</span><br><span class="line">	clear: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个<code>clearfix</code>的写法既可以解决高度塌陷问题，也可以解决<code>margin</code>重叠问题。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>CSS2.1</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Block Formatting Context（BFC）</title>
    <url>/css/05-BFC.html</url>
    <content><![CDATA[<h2 id="Box的概念"><a href="#Box的概念" class="headerlink" title="Box的概念"></a>Box的概念</h2><p>Box是CSS布局的对象和基本单位，直观来说，即一个页面是由很多个Box组成的。<br>元素的类型和<code>display</code>属性，决定了这个Box的类型，不同类型的Box，会参与不同的Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。        </p><ul>
<li>block-level box：<br><code>display</code>属性为<code>block</code>、<code>list-item</code>、<code>table</code>的元素，会生成block-level box，并参与Block Formatting Context。</li>
<li>inline-level box：<br><code>display</code>属性为<code>inline</code>、<code>inline-block</code>、<code>inline-table</code>的元素，会生成inline-level box，并参与Inline Formatting Context。</li>
</ul><a id="more"></a>

<h2 id="Formatting-Context的概念"><a href="#Formatting-Context的概念" class="headerlink" title="Formatting Context的概念"></a>Formatting Context的概念</h2><p>Formatting Context是W3C CSS2.1规范中的一个概念。<br>它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素如何定位，以及和其他元素的关系和相互作用。<br>最常见的Formatting Context有：</p>
<ul>
<li>Block Formatting Context（简称BFC）</li>
<li>Inline Formatting Context（简称IFC）</li>
</ul>
<h3 id="BFC的概念"><a href="#BFC的概念" class="headerlink" title="BFC的概念"></a>BFC的概念</h3><p>BFC（Block Formatting Context）直译为“块级格式化上下文”。它是一个独立的渲染区域，只有block-level box参加，它规定了内部的block-level box如何布局，并且与这个区域外部毫不相干。</p>
<h3 id="BFC的布局规则"><a href="#BFC的布局规则" class="headerlink" title="BFC的布局规则"></a>BFC的布局规则</h3><ul>
<li>内部的Box会在垂直方向一个接一个地放置。</li>
<li>BFC的区域不会与float box重叠。</li>
<li>内部的Box垂直方向的距离由<code>margin</code>决定，属于同一个BFC的两个相邻Box的<code>margin</code>会发生重叠。</li>
<li>就是BFC的高度时，浮动元素也参与计算（清楚浮动 Haslayout）。</li>
<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之也是如此。</li>
</ul>
<h3 id="BFC的产生"><a href="#BFC的产生" class="headerlink" title="BFC的产生"></a>BFC的产生</h3><p>以下情况均会产生BFC：</p>
<ul>
<li>根元素</li>
<li><code>float</code>属性不为<code>none</code></li>
<li><code>position</code>属性为<code>absolute</code>或<code>fixed</code></li>
<li><code>overflow</code>不为<code>visible</code></li>
<li><code>display</code>为<code>inline-block</code>、<code>table-cell</code>、<code>table-caption</code>、<code>flex</code>、<code>inline-flex</code></li>
</ul>
<h2 id="BFC实现两列布局"><a href="#BFC实现两列布局" class="headerlink" title="BFC实现两列布局"></a>BFC实现两列布局</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>BFC实现两列布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">			width: 600px;</span><br><span class="line">			height: 600px;</span><br><span class="line">			margin: 0 auto;</span><br><span class="line">			border: 1px solid black;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="selector-class">.warp</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">			float: left;</span><br><span class="line">			width: 200px;</span><br><span class="line">			height: 600px;</span><br><span class="line">			background: orange;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="selector-class">.warp</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">			<span class="comment">/*开启right的BFC,使right不与float box2004.html重叠*/</span></span></span><br><span class="line">			overflow: hidden;</span><br><span class="line">			height: 600px;</span><br><span class="line"><span class="css">			<span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">			padding-left: 2em;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">			right right right right right right<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			right right right right right right<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			right right right right right right<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			right right right right right right<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			right right right right right right<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			right right right right right right<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="/mypages/css2.1/2005.html" target="_blank">戳我查看最终效果</a>！&lt;&lt;</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>CSS2.1</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>粘连布局</title>
    <url>/css/04-%E7%B2%98%E8%BF%9E%E5%B8%83%E5%B1%80.html</url>
    <content><![CDATA[<h2 id="CSS-stickyFooter（粘连布局）"><a href="#CSS-stickyFooter（粘连布局）" class="headerlink" title="CSS stickyFooter（粘连布局）"></a>CSS stickyFooter（粘连布局）</h2><p>有一块内容<code>&lt;main&gt;</code>，当<code>&lt;main&gt;</code>的高度足够长的时候，<code>&lt;footer&gt;</code>会紧紧跟在<code>&lt;main&gt;</code>后面。<br>当<code>&lt;main&gt;</code>元素比较短的时候（比如小于屏幕高的度），<code>&lt;footer&gt;</code>会“粘连”在屏幕底部。</p><a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>粘连布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">		* &#123;</span><br><span class="line">			margin: 0;</span><br><span class="line">			padding: 0;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		html,</span><br><span class="line">		body &#123;</span><br><span class="line">			height: 100%;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">			min-height: 100%;</span><br><span class="line"><span class="css">			<span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="selector-class">.warp</span> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">			padding-bottom: 50px;</span><br><span class="line">			text-align: center;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">			margin-top: -50px;</span><br><span class="line">			height: 50px;</span><br><span class="line">			background: gray;</span><br><span class="line">			line-height: 50px;</span><br><span class="line">			text-align: center;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">				main <span class="tag">&lt;<span class="name">br</span> /&gt;</span> main <span class="tag">&lt;<span class="name">br</span> /&gt;</span> main <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				main <span class="tag">&lt;<span class="name">br</span> /&gt;</span> main <span class="tag">&lt;<span class="name">br</span> /&gt;</span> main <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				main <span class="tag">&lt;<span class="name">br</span> /&gt;</span> main <span class="tag">&lt;<span class="name">br</span> /&gt;</span> main <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				main <span class="tag">&lt;<span class="name">br</span> /&gt;</span> main <span class="tag">&lt;<span class="name">br</span> /&gt;</span> main <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				main <span class="tag">&lt;<span class="name">br</span> /&gt;</span> main <span class="tag">&lt;<span class="name">br</span> /&gt;</span> main <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">			footer</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="/mypages/css2.1/2004.html" target="_blank">戳我查看最终效果</a>！&lt;&lt;</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>CSS2.1</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>absolute模拟fixed</title>
    <url>/css/03-absolute%E6%A8%A1%E6%8B%9Ffixed.html</url>
    <content><![CDATA[<ul>
<li><code>absolute</code>绝对定位，参照于包含块进行定位。</li>
<li><code>fixed</code>固定定位，参照于视口进行定位。</li>
</ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>text<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        * &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"></span><br><span class="line">        html &#123;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            height: 100%;</span><br><span class="line">            &#125;</span><br><span class="line">        body &#123;</span><br><span class="line">            overflow: auto;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.test</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            margin: 100px;</span><br><span class="line">            background: orange;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 10000px;"</span>&gt;</span>占位以撑开父元素从而出现滚动条<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>


<p><a href="/mypages/css2.1/2003.html" target="_blank">戳我查看最终效果</a>！&lt;&lt;</p>
<h2 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h2><ul>
<li><p>视口（viewport）是指网页中你能看见的所有部分，不包括浏览器的菜单栏、工具栏、地址栏等。</p>
</li>
<li><p>当<code>html</code>和<code>body</code>仅指定其中之一的<code>overflow</code>属性时，<code>overflow</code>都作用于文档。</p>
</li>
<li><p>当<code>html</code>和<code>body</code>同时指定<code>overflow</code>属性时，<code>html</code>的<code>overflow</code>作用于文档，而<code>body</code>的<code>overflow</code>作用于<code>body</code>。</p>
</li>
<li><p><code>html</code>的包含块是初始包含块（一个视口大小的矩形），当指定<code>html</code>的高度为<code>100%</code>时，<code>html</code>与视口的大小相同。</p>
</li>
<li><p><code>body</code>的包含块是<code>html</code>，当指定<code>body</code>的高度为<code>100%</code>时，<code>body</code>与<code>html</code>的大小相同（即视口大小）。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>禁止系统滚动条</p>
</li>
<li><p>给body添加滚动条</p>
</li>
<li><p>设置body的尺寸为视口的尺寸</p>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>CSS2.1</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>三列布局</title>
    <url>/css/02-%E4%B8%89%E5%88%97%E5%B8%83%E5%B1%80.html</url>
    <content><![CDATA[<h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>圣杯布局的要求：</p><ul>
<li>三列布局</li>
<li>两侧固定，中间自适应</li>
<li>中间列要完整显示</li>
<li>中间列要优先加载</li>
</ul><p>浮动：搭建完整的布局框架<br>外边距：<code>margin</code>设为负值，调整两侧的列的位置（使三列布局到一行内）<br>相对定位：调整两侧的列的位置（使两侧位置达到窗口边界）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>圣杯布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line">            min-width: 900px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            content: "";</span><br><span class="line">            display: table;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.header</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">            height: 50px;</span><br><span class="line">            background: gray;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">            padding: 0 300px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">            height: 600px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            background: orange;</span><br><span class="line">            float: left;</span><br><span class="line">            margin-left: -100%;</span><br><span class="line">            position: relative;</span><br><span class="line">            left: -300px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            background: orange;</span><br><span class="line">            float: left;</span><br><span class="line">            margin-left: -300px;</span><br><span class="line">            position: relative;</span><br><span class="line">            left: 300px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>




<p><a href="/mypages/css2.1/2002-1.html" target="_blank">戳我查看最终效果</a>!!!</p>
<hr>
<h3 id="伪等高布局"><a href="#伪等高布局" class="headerlink" title="伪等高布局"></a>伪等高布局</h3><p>伪等高布局要求：      </p>
<ul>
<li>所有列的高度由内容撑开</li>
<li>所有列的高度相等</li>
<li>所有列的高度由内容最多的列决定</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>伪等高布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.header</span>,<span class="selector-class">.footer</span>&#123;</span></span><br><span class="line">            width: 940px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            background: gray;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">            content: "";</span><br><span class="line">            display: table;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            width: 940px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            border: 2px dashed red;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            float: left;</span><br><span class="line">            background: orange;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            width: 640px;</span><br><span class="line">            float: left;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> <span class="selector-class">.left</span>,<span class="selector-class">.warp</span> <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            padding-bottom: 99999px;</span><br><span class="line">            margin-bottom: -99999px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">            left <span class="tag">&lt;<span class="name">br</span>&gt;</span> left <span class="tag">&lt;<span class="name">br</span>&gt;</span> left <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            left <span class="tag">&lt;<span class="name">br</span>&gt;</span> left <span class="tag">&lt;<span class="name">br</span>&gt;</span> left <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">            right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span> right <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="/mypages/css2.1/2002-2.html" target="_blank">戳我查看最终效果<a>!!!</a></a></p>
<hr>
<h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>双飞翼布局的要求：</p>
<ul>
<li>三列布局</li>
<li>两侧固定，中间自适应</li>
<li>中间列要完整显示</li>
<li>中间列要优先加载</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>双飞翼布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">		* &#123;</span><br><span class="line">			margin: 0;</span><br><span class="line">			padding: 0;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		body &#123;</span><br><span class="line">			min-width: 600px;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="selector-class">.header</span>,</span></span><br><span class="line"><span class="css">		<span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">			height: 50px;</span><br><span class="line">			line-height: 50px;</span><br><span class="line">			text-align: center;</span><br><span class="line">			background: gray;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="selector-class">.content</span> &#123;</span></span><br><span class="line">			overflow: hidden;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="selector-class">.content</span> <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line">			float: left;</span><br><span class="line">			width: 100%;</span><br><span class="line">			padding-bottom: 99999px;</span><br><span class="line">			margin-bottom: -99999px;</span><br><span class="line"><span class="css">			<span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="selector-class">.content</span> <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">		<span class="selector-class">.content</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">			float: left;</span><br><span class="line">			width: 200px;</span><br><span class="line">			padding-bottom: 99999px;</span><br><span class="line">			margin-bottom: -99999px;</span><br><span class="line">			background: orange;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="selector-class">.content</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">			margin-left: -100%;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="selector-class">.content</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">			margin-left: -200px;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"><span class="css">		<span class="selector-class">.content</span> <span class="selector-class">.middle</span> <span class="selector-class">.m-inner</span> &#123;</span></span><br><span class="line">			margin: 0 200px;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-inner"</span>&gt;</span></span><br><span class="line">					middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">					middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">					middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">					middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">					middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">					middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span> middle <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">				left <span class="tag">&lt;<span class="name">br</span> /&gt;</span> left <span class="tag">&lt;<span class="name">br</span> /&gt;</span> left <span class="tag">&lt;<span class="name">br</span> /&gt;</span> left <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">				right <span class="tag">&lt;<span class="name">br</span> /&gt;</span> right <span class="tag">&lt;<span class="name">br</span> /&gt;</span> right <span class="tag">&lt;<span class="name">br</span> /&gt;</span> right <span class="tag">&lt;<span class="name">br</span> /&gt;</span> right <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				right <span class="tag">&lt;<span class="name">br</span> /&gt;</span> right <span class="tag">&lt;<span class="name">br</span> /&gt;</span> right <span class="tag">&lt;<span class="name">br</span> /&gt;</span> right <span class="tag">&lt;<span class="name">br</span> /&gt;</span> right <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="/mypages/css2.1/2002-3.html" target="_blank">戳我查看最终效果<a>!!!</a></a></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>两种布局方式都是把主列放在文档流最前面，使主列优先加载。</li>
<li>两种布局方式在实现上，都是让三列浮动，然后通过负外边距形成三列布局。</li>
<li>两种布局方式的不同之处在于如何处理中间主列的位置：<ul>
<li>圣杯布局是利用父容器的左、右内边距+两个从列的相对定位。</li>
<li>双飞翼布局是把主列嵌套在一个新的父级块中，利用主列的左、右外边距进行布局调整。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>CSS2.1</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>浮动、包含块、盒模型相关</title>
    <url>/css/01-%E6%B5%AE%E5%8A%A8%E5%8C%85%E5%90%AB%E5%9D%97%E7%9B%92%E6%A8%A1%E5%9E%8B%E7%9B%B8%E5%85%B3.html</url>
    <content><![CDATA[<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>浮动仅提升元素的半个层级。</p><h2 id="浮动元素的包含块"><a href="#浮动元素的包含块" class="headerlink" title="浮动元素的包含块"></a>浮动元素的包含块</h2><p>其定义为最近的块级祖先元素。        </p><h2 id="定位元素的包含块"><a href="#定位元素的包含块" class="headerlink" title="定位元素的包含块"></a>定位元素的包含块</h2><p>其定义如下：</p><ul>
<li><p>在HTML中，根元素就是<code>html</code>元素，不过有些浏览器会使用<code>body</code>作为根元素。<br>根元素的包含块称为初始包含块，由用户代理建立。<br>在大多数浏览器中，初始包含块是一个视窗大小的矩形，但初始包含块并不是视窗。      </p>
</li>
<li><p>对于一个非根元素，如果其<code>position</code>值是<code>relative</code>或<code>static</code>，包含块则由最近的块级框、表单元格或行内块祖先的的内容边界构成。</p>
</li>
<li><p>对于一个非根元素，如果其<code>position</code>值是<code>absolute</code>，包含块设置为该元素的内边距边界，也就是由边框界定的区域。</p>
</li>
<li><p>如果没有祖先元素（即根元素），包含块定义为初始包含块。</p>
</li>
</ul><a id="more"></a>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>定位元素的参照<br>没有定位：包含块<br>相对定位：元素本来的位置<br>绝对定位：包含块<br>固定定位：视口</p>
</li>
<li><p>初始包含块是根元素的包含块，是一个视窗（viewport）大小的矩形，但并不是视窗。</p>
</li>
<li><p><code>width</code>、<code>height</code>、<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>的默认值为<code>auto</code>。</p>
</li>
<li><p><code>margin</code>、<code>padding</code>的默认值为<code>0</code>。</p>
</li>
<li><p><code>boder-width</code>默认值为中等大小。</p>
</li>
<li><p>百分比的计算<br><code>width</code>、<code>margin</code>、<code>padding</code>是相对于包含块的<code>width</code>进行计算。<br><code>height</code>为百分比是相对于包含块的<code>height</code>进行计算。<br><code>left</code>为百分比时相对于包含块的<code>width</code>进行计算。<br><code>top</code>为百分比时相对于包含块的<code>height</code>进行计算。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>CSS2.1</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>与基础知识分手</title>
    <url>/front-end-basics/70.html</url>
    <content><![CDATA[<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p><code>id</code>、<code>class</code>和<code>文件</code>的命名规范：</p><ul>
<li>命名使尽量使用英文<br>不会可以查词典，实在不会可以使用拼音，但是不可以英文和拼音混合使用。</li>
</ul><ul>
<li>命名格式<ul>
<li>驼峰命名法<br>首字母小写，之后每个单词开头字母大写<br>例：<code>aaaBbbCcc</code> <code>helloWorld</code></li>
<li>所有字母小写，单词之间使用“_”或“-”连接<br>例：<code>aaa_bbb_ccc</code> <code>hellow-word</code></li>
</ul>
</li>
</ul><a id="more"></a>


<h2 id="IE6双倍边距Bug"><a href="#IE6双倍边距Bug" class="headerlink" title="IE6双倍边距Bug"></a>IE6双倍边距Bug</h2><p>在IE6浏览器中，当为一个向左浮动的元素设置左外边距或为一个向右浮动的元素设置右外边距时，该外边距将被IE6以指定值的2倍渲染。        </p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">				widht: 100px;</span><br><span class="line">				height: 100px;</span><br><span class="line">				float: left;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加<code>display: inline;</code>来解决该问题。        </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">				widht: 100px;</span><br><span class="line">				height: 100px;</span><br><span class="line">				float: left;</span><br><span class="line">				display: inline;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于一个浮动元素来说，设置<code>display: inline;</code>没有任何意义，但是该设置可以解决IE6的双倍边距问题，并且不影响其他浏览器显示效果。</p>
<h2 id="页面练习"><a href="#页面练习" class="headerlink" title="页面练习"></a>页面练习</h2><p><a href="/mypages/polo360/index.html" target="_blank">页面练习效果</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS Hack</title>
    <url>/front-end-basics/69.html</url>
    <content><![CDATA[<p>在一些特殊情况，需要某一段代码仅在某些特殊浏览器（IE，不具体点名）中执行，而在其他浏览器中忽略，此时则可以使用CSS Hack。    </p><h2 id="条件Hack"><a href="#条件Hack" class="headerlink" title="条件Hack"></a>条件Hack</h2><p>  条件Hack仅对IE浏览器有效，其他浏览器都会将其识别为注释。<br>  仅支持IE10以下的浏览器，不包括IE10.</p><p>  语法：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if keywords IE version]&gt;</span></span><br><span class="line"><span class="comment">    HTML代码块</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>




<p>keywords：<br><code>空</code>：是否<br><code>gt</code>：大于（greater than）<br><code>gte</code>：大于等于（greater than or equal）<br><code>lt</code>：小于（less than）<br><code>lte</code>：小于等于（less than or equal）<br><code>!</code>：非指定版本     </p>
<p>version：<code>6</code>、<code>7</code>、<code>8</code>、<code>9</code>   </p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 以下内容只显示在IE10以下的浏览器 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE]&gt;</span></span><br><span class="line"><span class="comment">    &lt;h1&gt;为了您和家人的健康，请远离IE！&lt;h1/&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 以下内容只显示在IE6浏览器 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 6]&gt;</span></span><br><span class="line"><span class="comment">    &lt;h1&gt;为了您和家人的健康，请远离IE6！&lt;h1/&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 以下内容只显示在小于IE9的浏览器 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE9]&gt;</span></span><br><span class="line"><span class="comment">    &lt;h1&gt;我只在小于IE9的浏览器中显示&lt;h1/&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="属性级Hack"><a href="#属性级Hack" class="headerlink" title="属性级Hack"></a>属性级Hack</h2><p>  语法：<code>选择器{&lt;hack&gt;?样式名:样式值&lt;hack&gt;?;}</code><br>  在样式前添加：<br>  <code>_</code>： 选择IE6及以下<br>  <code>*</code>：选择IE7及以下        </p>
<p>  在样式后添加：<br>  <code>\9</code>：选择IE6以上<br>  <code>\0</code>：选择IE8+和Opera15以下       </p>
<blockquote>
<p>Hack有风险，使用需谨慎。<br>CSS Hack不到万不得已时尽量不要使用。</p>
</blockquote>
<h2 id="条件符级别Hack"><a href="#条件符级别Hack" class="headerlink" title="条件符级别Hack"></a>条件符级别Hack</h2><p>  <code>* html 选择器{样式名:样式值}</code>：仅选择IE6</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>IE6浏览器png图片问题</title>
    <url>/front-end-basics/68.html</url>
    <content><![CDATA[<p>在IE6浏览器中，对png-24图片格式的支持度不高，若使用的图片格式是png-24，则会导致透明效果无法正常显示。       </p><p>解决方法：    </p><ul>
<li>使用png-8代替png-24<br>此种方法虽然可以解决问题，但是图片的清晰度会有所下降，影响用户体验。</li>
</ul><ul>
<li>使用JavaScript解决<br>需要引入一个外部的JavaScript文件，之后编写简单的js代码即可解决该问题。    </li>
</ul><a id="more"></a>



<p>  在body标签的最后引入外部的js文件并编写如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE 6]&gt;</span></span><br><span class="line"><span class="comment">    &lt;script type="text/javascript" src="js/DD_belatedPNG_0.0.8a-min.js"&gt;&lt;script&gt;</span></span><br><span class="line"><span class="comment">    &lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="comment">        DD_belatedPNG.fix("img");</span></span><br><span class="line"><span class="comment">    &lt;script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>框架集</title>
    <url>/front-end-basics/67.html</url>
    <content><![CDATA[<p>框架集合内联框架的作用类似，都是用于在一个在一个页面中移入其他的外部页面，不同的是，框架集可以同时引入多个页面，而内联框架只能引入一个，在HTML5标准中，推荐使用的是框架集，而不推荐使用内联框架。       </p><ul>
<li>使用<code>&lt;frameset&gt;&lt;frameset/&gt;</code>来创建一个框架集<br>需要特别注意的是，<code>frameset</code>不能与<code>body</code>出现在同一个页面中，所以如需使用框架集，页面中就不可以使用<code>body</code>标签。<br>属性：        <ul>
<li>rows，指定框架集中的所有框架一行行排列</li>
<li>cols，指定框架集中的所有框架一列列排列<br>frameset必须指定其一，并且需要在属性中指定没个部分所占大小。</li>
</ul>
</li>
</ul><a id="more"></a>

<ul>
<li>使用<frame src="url">子标签在<code>frameset</code>中引入一个页面</li>
</ul>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">"20%,*,30%"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"1.html"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"2.html"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"3.html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;frameset&gt;&lt;frameset&gt;</code>中可以嵌套<code>&lt;frameset&gt;&lt;/frameset&gt;</code></li>
</ul>
<blockquote>
<p><code>frameset</code>和<code>iframe</code>一样，其中的内容不会被搜索引擎检索，因此当搜索引擎检索到的页面是一个框架页面时，是不能判断其中的内容的。<br>使用框架集也意味着页面中不能有其余自定义内容，只能引入其他的页面，而每加载一个页面，浏览器都需要单独发送一次请求，用户的体验相对差。<br>实际开发中框架集和内联框架都不推荐使用。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>表单项</title>
    <url>/front-end-basics/66.html</url>
    <content><![CDATA[<ul>
<li>使用<code>&lt;input type=&quot;radio&quot;/&gt;</code>来创建一个单选框<br>单选框通过<code>name</code>属性进行分组，<code>name</code>属性值相同的为一组单选框，一组内只能选中其一。<br>仅供用户选择而不能直接填写内容的表单项，必须指定一个value属性，此时被选中的value属性值将会提交给服务器。</li>
</ul><p>  例：</p><a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">性别：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"male"</span>/&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"female"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span>女</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>使用<code>&lt;input type=&quot;checkbox&quot;&gt;</code>来创建一个复选框<br>复选框也必须指定<code>value</code>属性。<br>  如果需要单选框或复选框中默认选中某个或某些选项，可以给希望默认选中的选项添加<code>checked=&quot;checked&quot;</code>属性。</li>
</ul>
<p>  例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">爱好：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"football"</span>/&gt;</span>足球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"basketball"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span>篮球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"volleyball"</span>/&gt;</span>排球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"badminton"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span>羽毛球</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>使用<code>&lt;select&gt;&lt;select/&gt;</code>标签来创建一个下拉列表<br>在<code>select</code>标签中使用<code>&lt;option&gt;&lt;option/&gt;</code>标签来创建列表项（即选择项）。<br>下拉列表的<code>name</code>属性需指定给<code>select</code>，而<code>value</code>属性需指定给<code>option</code>。<br>如果需要下拉列表默认选中某个选项，可以给希望默认选中的选项添加<code>select=&quot;select&quot;</code>属性。<br>若给<code>select</code>标签添加multiple=”multiple”属性，则下拉列表会变为可以多选的下拉列表。</li>
</ul>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">你喜欢的姑娘：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"girl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"yourfriend"</span>&gt;</span>你的朋友<span class="tag">&lt;<span class="name">option</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"yourclassmate"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>你的同学<span class="tag">&lt;<span class="name">option</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"friendcalssmate"</span>&gt;</span>你朋友的同学<span class="tag">&lt;<span class="name">option</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"calssmatefriend"</span>&gt;</span>你同学的朋友<span class="tag">&lt;<span class="name">option</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>  在<code>select</code>中可以使用<code>&lt;optgroup&gt;&lt;optgroup/&gt;</code>对列表项进行分组，一个<code>optgroup</code>内为一组。<br>    可以使用<code>label</code>属性来指定分组的名称。</p>
<hr>
<ul>
<li>使用<code>&lt;input type=&quot;text&quot;&gt;</code>来创建一个单行文本框</li>
</ul>
<ul>
<li>使用<code>&lt;textarea&gt;&lt;textarea/&gt;</code>来创建一个文本域（多行文本框）<br>例：<code>自我介绍&lt;textarea name=&quot;info&quot;&gt;&lt;textarea/&gt;</code></li>
</ul>
<ul>
<li>使用<code>&lt;input type=&quot;submit&quot;/&gt;</code>来创建一个提交按钮<br>点击提交按钮之后表单中的所有内容将被提交到服务器。</li>
</ul>
<ul>
<li>使用<code>&lt;input type=&quot;reset&quot;&gt;</code>来创建一个重置按钮<br>点击重置按钮之后表单中的所有内容将恢复为默认值。</li>
</ul>
<ul>
<li>使用<code>&lt;input type=&quot;button&quot;&gt;</code>来创建一个单纯的按钮<br>这个按钮没有任何默认功能，只能被点击。<br>  主要用来绑定JavaScript事件。</li>
</ul>
<ul>
<li>使用<code>&lt;button&gt;&lt;button/&gt;</code>来创建一个按钮<br><code>button</code>创建按钮与<code>input</code>类似，由于它是成对出现的标签，所以使用时更加灵活，推荐使用。</li>
</ul>
<hr>
<ul>
<li>使用<code>&lt;lable&gt;&lt;lable/&gt;</code>标签来选中表单中的提示文字<br>  HTML中提供了一个<code>lable</code>标签，专门用来选中表单中的提示文字，该标签可以指定一个<code>for</code>属性，该属性的值需指定一个表单项的<code>id</code>值。    </li>
</ul>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"redio name="</span><span class="attr">gender</span>" <span class="attr">id</span>=<span class="string">"male"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>男<span class="tag">&lt;<span class="name">lable</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>&lt;fieldset&gt;&lt;fieldset/&gt;</code>标签为表单项分组<br>  可以将表单项中的同一组放入一个<code>fieldset</code>中。</li>
</ul>
<ul>
<li>使用<code>&lt;legend&gt;&lt;ledend/&gt;</code>子标签为<code>fieldset</code>指定组名</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>与表单的初次邂逅</title>
    <url>/front-end-basics/65.html</url>
    <content><![CDATA[<p>现实生活中的表单是用来提交信息的，例如：办理银行卡填写的申请表、找工作填写的简历、入学时填写的个人信息表等。这些都是表单的一种。        </p><p>网页中的表单是用来向服务器提交信息的，我们最常用的表单就是<a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a>的搜索框。      </p><ul>
<li>使用<code>&lt;form&gt;&lt;/form&gt;</code>标签来创建一个表单<br><code>form</code>标签中必须指定一个<code>action</code>属性，该属性指向的是一个服务器的地址，当我们提交表单时将会提交到<code>action</code>属性对应的地址。<br>使用<code>form</code>标签创建的仅仅是一个空白的表单，我们还需要向<code>form</code>中添加各种表单项。</li>
</ul><a id="more"></a>


<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fotm</span> <span class="attr">action</span>=<span class="string">"target.html"</span>&gt;</span></span><br><span class="line">    用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fotm</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>使用<code>&lt;input type=&quot;text&quot;/&gt;</code>来创建一个文本框</li>
</ul>
<p>  它的<code>type</code>属性是<code>text</code>。<br>  例：<code>&lt;input type=&quot;text&quot;/&gt;</code></p>
<p>  如果希望表单项中的数据被提交到服务器中，还需给表单项指定一个<code>name</code>属性，以表示提交内容的名称。<br>  例：<code>&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;</code></p>
<p>  用户填写的信息会附在URL的最后，且以“查询字符串”的形式发送给服务器。<br>  例：<code>URL?查询字符串</code></p>
<p>  查询字符串格式：<code>属性名=属性值&amp;属性名=属性值&amp;属性名=属性值&amp;属性名=属性值</code><br>  在文本框中可以通过<code>value</code>属性来指定文本框中的默认文字，即默认已经填入的文字。</p>
<hr>
<ul>
<li>使用<code>&lt;input type=&quot;password&quot;/&gt;</code>来创建一个密码框<br>它的<code>type</code>是<code>password</code>。<br>密码框中输入的文本不会直接显示在屏幕上给用户看，以防被坏人看见。</li>
</ul>
<ul>
<li>使用<code>&lt;input type=&quot;submit&quot;/&gt;</code>来创建一个提交按钮<br>它的<code>type</code>属性是<code>submit</code>。<br>例：<code>&lt;input type=&quot;submit&quot;/&gt;</code></li>
</ul>
<p>  在提交按钮中可以通过<code>value</code>属性来指定按钮上的文字。<br>  例：<code>&lt;input type=&quot;submit&quot; value=&quot;注册&quot;&gt;</code></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>完善clearfix</title>
    <url>/front-end-basics/64.html</url>
    <content><![CDATA[<p>子元素和父元素的垂直外边距会发生重叠，子元素的外边距会传递给父元素。        </p><p>使用空的<code>table</code>元素可以隔离父子元素的外边距，使其不再相邻，从而阻止垂直外边距的重叠。       </p><p>例如：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>clearfix<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="comment">/* 给box2设置上外边距100px */</span></span></span><br><span class="line">            margin-top: 100px;</span><br><span class="line">            background: orange;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        解决垂直外边距重叠问题</span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">            content: "";</span><br><span class="line">            display: table;</span><br><span class="line">        &#125;</span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            border: 10px solid red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box4</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置box4浮动 */</span></span></span><br><span class="line">            float: left;</span><br><span class="line">            background: yellowgreen;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        解决父元素高度塌陷问题</span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line">            content: "";</span><br><span class="line">            display: block;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 将两个问题合并解决 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            content: "";</span><br><span class="line">            display: table;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 兼容IE6 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span>&#123;</span></span><br><span class="line">            zoom: 1;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3 clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1 clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>




<p><a href="/mypages/htmlcssbasics/1064.html" target="_blank">戳我查看效果！</a></p>
<p>经过修改完善的<code>clearfix</code>是一个多功能的样式，既可以解决高度塌陷问题，又可以解决垂直外边距重叠问题。</p>
<blockquote>
<p><code>display: table;</code>可以将一个元素设置为表格显示。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>使用表格布局*</title>
    <url>/front-end-basics/63.html</url>
    <content><![CDATA[<p>在很久以前，表格更多的是用来对页面进行布局，但是这种方式早已经被CSS淘汰了。         </p><p>例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"150px"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"450px"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"15%"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"85%"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"450px"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100px"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>



<p><a href="/mypages/htmlcssbasics/1063.html" target="_blank">效果</a> &lt;&lt;戳它！！！</p>
<p>使用表格布局的两大缺点：</p>
<ul>
<li>层次结构复杂，难以维护</li>
<li>标签没有语义，搜索引擎难以检索</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>长表格</title>
    <url>/front-end-basics/62.html</url>
    <content><![CDATA[<p>有一些特殊情况下，需要绘制比较长的表格，例如一年的资金流水记账表等，此时就需要将表格分为三个部分，分别是表头、表格主体和表格底部。          </p><p>在HTML中有三个标签：</p><ul>
<li><code>thead</code> 表头</li>
<li><code>tbody</code> 表格主体</li>
<li><code>tfoot</code> 表格底部</li>
</ul><p>这三个标签的作用，就是区分表格不同的部分，它们都是<code>table</code>的子标签，都需要写在<code>&lt;table&gt;&lt;/table&gt;</code>中。<br>而<code>tr</code>则写在<code>&lt;thead&gt;&lt;/thead&gt;</code>、<code>&lt;tbody&gt;&lt;/tbody&gt;</code>和<code>&lt;tfoot&gt;&lt;/tfoot&gt;</code>中。         </p><a id="more"></a>



<ul>
<li><code>thead</code>中的内容，永远都会显示在表格的头部</li>
<li><code>tfoot</code>中的内容，永远都会显示在表格的底部</li>
<li><code>tbody</code>中的内容，永远都会显示在表格的中间</li>
</ul>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 代码片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>收入<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>支出<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>合计<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>若干元<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2018/1/1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2018/1/2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2018/1/3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2018/1/4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，如果表格没有编写<code>tbody</code>，那么浏览器会自动在表格中添加<code>tbody</code>，并且将所有的<code>tr</code>放入<code>tbody</code>中。         </p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">table</span>&gt;<span class="selector-tag">tr</span>&#123;    &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时<code>table &gt; tr</code>不能选中<code>tr</code>，因为<code>tr</code>是<code>tbody</code>的子元素，所以需要使用<code>tbody &gt; tr</code>。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>给表格化个妆</title>
    <url>/front-end-basics/61.html</url>
    <content><![CDATA[<ul>
<li><code>table</code>和<code>td</code>之间默认存在一个距离，通过<code>border-spacing</code>属性可以设置这个距离。           </li>
</ul><ul>
<li><code>border-collapse</code>可以用来设置表格边框合并。<br>如果设置了边框合并，则<code>border-spacing</code>自动失效。</li>
</ul><ul>
<li>使用<code>&lt;th&gt;&lt;/th&gt;</code>标签来表示表头<br>用法和<code>td</code>相同，不同之处在于<code>th</code>的默认样式，加粗居中。</li>
</ul><a id="more"></a>


<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>table<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        table &#123;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置表格总宽度 */</span></span></span><br><span class="line">            width: 300px;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置表格总高度 */</span></span></span><br><span class="line">            height: 120px;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置表格居中 */</span></span></span><br><span class="line">            margin: 50px auto;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置边框间距,自动失效，不信你试试 */</span></span></span><br><span class="line">            border-spacing: 0;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置边框合并 */</span></span></span><br><span class="line">            border-collapse: collapse;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        th,td &#123;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置边框 */</span></span></span><br><span class="line">            border: 1px solid black;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>住址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>沙僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="/mypages/htmlcssbasics/1061/1061-1.html" target="_blank">查看效果</a> &lt;&lt;戳它！！！</p>
<hr>
<p>请看以下代码和效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>table<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        table &#123;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置表格总宽度 */</span></span></span><br><span class="line">            width: 300px;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置表格居中 */</span></span></span><br><span class="line">            margin: 50px auto;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置边框合并 */</span></span></span><br><span class="line">            border-collapse: collapse;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        th,td &#123;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置边框 */</span></span></span><br><span class="line">            border: 1px solid rgb(170, 170, 170);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 设置表格隔行换色 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child(even)</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 设置鼠标移入的颜色 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">tr</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            background-color: aquamarine;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>住址<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>沙僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>沙僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>沙僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>沙僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>沙僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>沙僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>沙僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>沙僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="/mypages/htmlcssbasics/1061/1061-2.html" target="_blank">查看效果</a> &lt;&lt;戳它！！！</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>表格简介</title>
    <url>/front-end-basics/60.html</url>
    <content><![CDATA[<p>表格在日常生活在使用的非常广泛，比如Excel就是专门用来创建表格的工具。       </p><p>表格是指按所需的内容项目画成格子，分别填写文字或数字的书面材料，便于统计查看，例如：课程表、花名册、银行对账单等。</p><p>在网页中也可以创建表格。</p><ul>
<li>使用<code>&lt;table&gt;&lt;/table&gt;</code>标签来创建表格<ul>
<li>使用<code>&lt;tr&gt;&lt;/tr&gt;</code>标签来创建<code>table</code>中的一行<ul>
<li>使用<code>&lt;td&gt;&lt;/td&gt;</code>标签来创建<code>tr</code>中的一个单元格</li>
</ul>
</li>
</ul>
</li>
</ul><a id="more"></a>



<p>例如下面这个四行四列的表格：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 创建一个表格 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"40%"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 创建第一行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>A1<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 创建第一个单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>A2<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 创建第二个单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>A3<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 创建第三个单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>A4<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 创建第四个单元格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 创建第二行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>B1<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 创建第一个单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>B2<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 创建第二个单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>B3<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 创建第三个单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>B4<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 创建第四个单元格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 创建第三行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>C1<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 创建第一个单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>C2<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 创建第二个单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>C3<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 创建第三个单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>C4<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 创建第四个单元格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 创建第四行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>D1<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 创建第一个单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>D2<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 创建第二个单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>D3<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 创建第三个单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>D4<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!-- 创建第四个单元格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="/mypages/htmlcssbasics/1060/1060-1.html" target="_blank">效果</a> &lt;&lt;戳它！！！</p>
<hr>
<ul>
<li><code>clospan</code>用来横向合并单元格（合并列）</li>
<li><code>rowspan</code>用来纵向合并单元格（合并行）</li>
</ul>
<p>例如分别合并单元格D3和D4、B4和C4,只需要作如下操作：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 创建一个表格 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"40%"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>A1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>A2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>A3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>A4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>B1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>B2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>B3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 合并B4和C4单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>B4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>C1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>C2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>C3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>D1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>D2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 合并D3和D4单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>D3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="/mypages/htmlcssbasics/1060/1060-2.html" target="_blank">效果</a> &lt;&lt;戳它！！！</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>背景属性的简写</title>
    <url>/front-end-basics/59.html</url>
    <content><![CDATA[<p>如有以下样式：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">5000px</span>;</span><br><span class="line">    <span class="comment">/* 设置背景颜色 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span><br><span class="line">    <span class="comment">/* 设置背景图片 */</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(bg.png);</span><br><span class="line">    <span class="comment">/* 设置背景图片不重复 */</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="comment">/* 设置背景图片位置 */</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: center;</span><br><span class="line">    <span class="comment">/* 设置背景图片不随滚动条滚动 */</span></span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>


<p>这样设置背景没有任何问题，但是会显得有些麻烦和复杂，因此我们可以使用背景属性的简写。        </p>
<ul>
<li>使用<code>background</code>来同时设置所有背景相关的样式<ul>
<li>无顺序要求，样式编写的顺序不影响效果</li>
<li>无数量要求，没有设置的样式则使用默认值</li>
</ul>
</li>
</ul>
<p>因此以上样式可以简写为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">5000px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#bfa</span> <span class="built_in">url</span>(bg.png) no-repeat center fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>按钮练习</title>
    <url>/front-end-basics/58.html</url>
    <content><![CDATA[<p>我们可以将一张按钮形状的图片设置为一个块元素的背景图片，那么就有了一个简单的按钮。<br>目前我们学习了<code>&lt;a&gt;&lt;/a&gt;</code>标签，是可以被点击的元素，那么我们暂时先使用<code>&lt;a&gt;&lt;/a&gt;</code>标签来制作按钮。          </p><p>3个按钮背景图片：<br><img src="/images/htmlcssbasics/1058/link.png" style="display: inline"><img src="/images/htmlcssbasics/1058/hover.png" style="display: inline; margin: 0 20px"><img src="/images/htmlcssbasics/1058/active.png" style="display: inline"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>按钮练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置超链接为块元素 */</span></span></span><br><span class="line">            display: block;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置超链接大小 */</span></span></span><br><span class="line">            width: 120px;</span><br><span class="line">            height: 55px;</span><br><span class="line"><span class="css">            <span class="comment">/* 使超链接居中显示以方便观察 */</span></span></span><br><span class="line">            margin: 300px auto;</span><br><span class="line"><span class="css">            <span class="comment">/* 给超链接设置背景图片 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">link</span><span class="selector-class">.png</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 设置鼠标移入的背景图片 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">hover</span><span class="selector-class">.png</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 设置鼠标点击的背景图片 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">active</span><span class="selector-class">.png</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>



<p>效果就像<a href="/mypages/htmlcssbasics/1058-1.html" target="_blank">这样</a> &lt;&lt;戳它            </p>
<p>貌似很完美的结局，但我们不难发现，在第一次切换背景图片时（即网页刚打开或者刷新后，第一次鼠标移入和点击时），背景图片会有一个短暂的闪烁现象，这个闪烁现象会造成一次不佳的用户体验。          </p>
<p>产生问题的原因：<br>背景图片是以外部资源的形式加载进入网页的，浏览器每加载一个外部资源就需要单独发送一次请求，但是外部资源并不是同时加载的，浏览器只会在资源被使用时才去加载资源。          </p>
<p>这个按钮的网页，刚打开时浏览器只会加载<code>link.png</code>，由于<code>hover</code>和<code>active</code>的状态没有马上被触发，所以<code>hover.png</code>和<code>active.png</code>并不是立即加载的。        </p>
<p>只有当<code>hover</code>和<code>active</code>分别被触发时浏览器才会分别加载<code>hover.png</code>和<code>active.png</code>。        </p>
<p>由于加载图片需要一定的时间，所以在加载和显示的过程中会存在一段时间，背景图片无法显示，导致出现闪烁现象。<br>而“第二次”浏览器会直接使用图片缓存，因此不会出现闪烁情况。      </p>
<p>为了解决该问题，可以将3个按钮图片整合为一张图片，这样可以同时将3张图片一起加载，就不会出现闪烁问题了，然后再通过<code>background-position</code>来切换要显示的图片的位置。         </p>
<p>这种技术叫做图片整合技术（CSS-Sprite）。            </p>
<p>优点：</p>
<ol>
<li>浏览器只需要发送一次请求，可以同时加载多个图片元素，，提高了访问效率和用户体验。</li>
<li>减小了图片的中大小，节省了请求时间，增加了用户体验。</li>
</ol>
<p>整合后的1张图片：<br><img src="/images/htmlcssbasics/1058/btn.png" style="display: inline"></p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>按钮练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置超链接为块元素 */</span></span></span><br><span class="line">            display: block;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置超链接大小 */</span></span></span><br><span class="line">            width: 120px;</span><br><span class="line">            height: 55px;</span><br><span class="line"><span class="css">            <span class="comment">/* 使超链接居中显示以方便观察 */</span></span></span><br><span class="line">            margin: 300px auto;</span><br><span class="line"><span class="css">            <span class="comment">/* 给超链接设置背景图片 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">btn</span><span class="selector-class">.png</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 设置鼠标移入的背景图片 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* hover状态时使图片向左移动121像素 */</span></span></span><br><span class="line">            background-position: -121px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 设置鼠标点击的背景图片 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* active状态时使图片向左移动242像素 */</span></span></span><br><span class="line">            background-position: -242px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#null"</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果就与之前完全不同，而是像<a href="/mypages/htmlcssbasics/1058-2.html" target="_blank">这样</a> &lt;&lt;戳它</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>背景 - 2</title>
    <url>/front-end-basics/57.html</url>
    <content><![CDATA[<p>背景图片默认是贴着元素的左上角显示。</p><h3 id="使用background-position来指定背景图片的位置"><a href="#使用background-position来指定背景图片的位置" class="headerlink" title="使用background-position来指定背景图片的位置"></a>使用<code>background-position</code>来指定背景图片的位置</h3><ul>
<li>使用<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>、<code>center</code>中的任意两个来指定一个背景图片的位置<br>例如：<br><code>background-position: top left;</code>图片显示在左上角<br><code>background-position: bottom right;</code>图片显示在右下角</li>
</ul><a id="more"></a>

<p>下表列出了所有的情况：</p>
<table>
<thead>
<tr>
<th>top left</th>
<th>top center</th>
<th>top right</th>
</tr>
</thead>
<tbody><tr>
<td>center left</td>
<td>center center</td>
<td>center right</td>
</tr>
<tr>
<td>bottom left</td>
<td>bottom center</td>
<td>bottom right</td>
</tr>
</tbody></table>
<blockquote>
<p>如果只给出一个值，则第二个值默认是<code>center</code>。</p>
</blockquote>
<ul>
<li><p>使用两个偏移量来指定一个背景图片的位置</p>
<p>第一个值为水平偏移量</p>
<ul>
<li>若指定的是正值，则图片向右移动指定的距离</li>
<li>若指定的是负值，则图片向左移动指定的距离</li>
</ul>
<p>第二个值为垂直偏移量</p>
<ul>
<li>若指定的是正值，则图片向下移动指定的距离</li>
<li>若指定的是负值，则图片向上移动指定的距离</li>
</ul>
<p>例如：<br><code>background-position: 100px 0;</code><br><code>background-position: 50% 50%;</code></p>
</li>
</ul>
<h3 id="使用background-attchment来指定背景图片是否随页面滚动"><a href="#使用background-attchment来指定背景图片是否随页面滚动" class="headerlink" title="使用background-attchment来指定背景图片是否随页面滚动"></a>使用<code>background-attchment</code>来指定背景图片是否随页面滚动</h3><p>可选值：<br>        <code>scroll</code>：背景图片会随页面其余部分的滚动而滚动（默认值）<br>        <code>fixed</code>：页面其余部分滚动时背景图片不会移动</p>
<blockquote>
<p>当背景图片的<code>background-attachment</code>设置为<code>fixed</code>时，背景图片的定位变为相对于<strong>浏览器窗口</strong>定位。</p>
<p><code>background-attachment: fixed;</code>一般仅设置给<code>body</code>，而不设置给其他元素。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>导航条背景练习</title>
    <url>/front-end-basics/56.html</url>
    <content><![CDATA[<p>导航条图片背景练习：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">DOCTYPE</span> <span class="attr">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>导航条背景练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">            * &#123;</span><br><span class="line">                margin: 0;</span><br><span class="line">                padding: 0;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line">                width: 1000px;</span><br><span class="line">                height: 39px;</span><br><span class="line">                margin: 50px auto;</span><br><span class="line">                line-height: 39px;</span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#dedede</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">bg</span><span class="selector-class">.png</span>);</span></span><br><span class="line">                background-repeat: repeat-x;</span><br><span class="line">                list-style: none;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">                width: 20%;</span><br><span class="line">                float: left;</span><br><span class="line">                text-align: center;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.nav</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">                display: block;</span><br><span class="line">                width: 100%;</span><br><span class="line">                height: 39px;</span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">                font-size: 17px;</span><br><span class="line">                font-weight: bold;</span><br><span class="line">                text-decoration: none;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#e61013</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首 页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>推 荐<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>分 类<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关 于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>联 系<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>


<p>你可以先按照样图自己动手编写<a href="/images/htmlcssbasics/1056/1.png" target="_blank"> &gt;&gt;戳我查看样图&lt;&lt; </a></p>
<p>最终效果<a href="/mypages/htmlcssbasics/1056/1056.html" target="_blank"> &gt;&gt;请戳我&lt;&lt; </a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>背景 - 1</title>
    <url>/front-end-basics/55.html</url>
    <content><![CDATA[<ul>
<li>使用<code>background-color</code>来设置背景颜色<br>语法：<code>background-color: 颜色值</code><br>例：<code>background-color: red;</code> <code>background-color: #bfa;</code> <code>background-color: #e44e23</code></li>
</ul><hr><ul>
<li>使用<code>background-image</code>来设置背景图片<br>语法：<code>background-image: url(相对路径);</code><br>例：<code>background-image: url(images/bg.jpg);</code><ul>
<li>如果背景图片大于元素，则默认只会显示图片的左上部分。</li>
<li>如果背景图片和元素大小相同，则会将图片全部显示。</li>
<li>如果背景图片小于元素，则默认会将图片平铺以充满元素。</li>
</ul>
</li>
</ul><a id="more"></a>


<p>可以同时为一个元素设置背景颜色和背景图片，此时背景颜色会作为背景图片的底色显示。</p>
<p>一般情况下，设置背景图片的同时都会设置一个背景颜色。</p>
<blockquote>
<p>再次强调，相对路径写在哪一个文档就相对于哪一个文档进行查找。</p>
</blockquote>
<hr>
<ul>
<li>使用<code>background-repeat</code>来设置背景图片的重复方式<br>可选值：<ul>
<li><code>repeat</code>：背景图片会在水平和垂直方向重复（默认值）</li>
<li><code>no repeat</code>：背景图片不会重复，有多大就显示多大</li>
<li><code>repeat-x</code>：背景图片会沿着水平方向重复</li>
<li><code>repeat-y</code>：背景图片会沿着垂直方向重复</li>
</ul>
</li>
</ul>
<p>  例：<code>background-repeat: repeat-x;</code></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>元素的层级与元素的透明</title>
    <url>/front-end-basics/54.html</url>
    <content><![CDATA[<p>如果定位元素的层级相同，则结构中写在后面的元素会盖住写在前面的元素。</p><ul>
<li>通过<code>z-index</code>属性来设置元素的层级<br>可以为<code>z-index</code>指定一个正整数的值，该值将会作为当前元素的层级，层级高的显示在层级底的上层。<br>父元素的层级再高，也不会盖住子元素。</li>
</ul><blockquote>
<p>对于没有开启定位的元素不能使用<code>z-index</code>。</p>
</blockquote><hr><ul>
<li>通过<code>opacity</code>来设置元素背景的透明<br>可以为<code>opacity</code>指定一个0~1之间的值，如：<ul>
<li><code>opacity: 0;</code>表示完全透明</li>
<li><code>opacity: 0.5;</code>表示半透明</li>
<li><code>opacity: 1;</code>表示完全不透明</li>
</ul>
</li>
</ul><a id="more"></a>




<blockquote>
<p>不幸的是IE8及以下的浏览器不支持<code>opacity</code>属性。</p>
</blockquote>
<ul>
<li>通过<code>filter：alpha(opacity=透明度);</code>来兼容这些浏览器。<br>可以指定一个0~100之间的值，如：<ul>
<li><code>filter: alpha(opacity=0);</code>表示完全透明</li>
<li><code>filter: alpha(opacity=50);</code>表示半透明</li>
<li><code>filter: alpha(opacity=100);</code>表示完全不透明</li>
</ul>
</li>
</ul>
<blockquote>
<p>这种方式支持IE6，但是无法在IE Tester中进行测试，这是IE Tester的一个bug.</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>固定定位</title>
    <url>/front-end-basics/53.html</url>
    <content><![CDATA[<p>当元素的<code>position</code>属性值设置为<code>fixed</code>时，则开启了元素的固定定位。</p><p>固定定位也是一种绝对定位，它的大部分特点都和绝对定位相同。</p><p>不同的是：</p><ol>
<li>固定定位永远都会相对于浏览器窗口进行定位。</li>
<li>固定定位会固定在浏览器窗口的某个位置，不会随着滚动条滚动。</li>
</ol><blockquote>
<p>不幸的是IE6不支持固定定位。</p>
</blockquote>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>绝对定位</title>
    <url>/front-end-basics/52.html</url>
    <content><![CDATA[<p>当元素的<code>position</code>属性值设置为<code>absolute</code>时，则开启了元素的绝对定位。</p><ol>
<li>开启绝对定位会使元素脱离文档流。</li>
</ol><ol start="2">
<li>开启绝对定位后，如果不设置偏移量，则元素的位置不会发生任何变化。</li>
</ol><ol start="3">
<li>绝对定位是相对于距离它最近并开启了定位的祖先元素进行定位的。<br>如果所有的祖先元素都没有开启定位，则会相对于浏览器窗口进行定位。<br>一般情况，开启了子元素的绝对定位都会同时开启父元素的相对定位。</li>
</ol><a id="more"></a>



<ol start="4">
<li>绝对定位会使元素提升一个层级。</li>
</ol>
<ol start="5">
<li>绝对定位会改变元素的性质，内联元素变为块元素，块元素的宽度和高度默认都被内容撑开。</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>定位和相对定位</title>
    <url>/front-end-basics/51.html</url>
    <content><![CDATA[<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul>
<li>定位指的是将指定的元素摆放到页面的任意位置<br>通过定位可以任意摆放元素</li>
</ul><ul>
<li>通过<code>position</code>属性来设置元素的定位类型<br>可选值：<ul>
<li><code>static</code>：不开启元素的定位（默认值）            </li>
<li><code>relative</code>：开启元素的相对定位</li>
<li><code>absolute</code>：开启元素的绝对定位</li>
<li><code>fixed</code>：开启元素的固定定位（也是绝对定位的一种）</li>
</ul>
</li>
</ul><a id="more"></a>

<hr>
<h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>当元素的<code>position</code>属性设置为<code>relative</code>时，则开启了元素的相对定位。</p>
<ol>
<li>当开启了元素的相对定位以后，而不设置偏移量时，元素不会发生任何变化。</li>
<li>相对行为是相对于元素在文档流中原来的位置进行定位。</li>
<li>相对定位的元素不会脱离文档流。</li>
<li>相对定位会使元素提升一个层级。</li>
<li>相对定位不会改变元素的性质，块元素和内联元素不会变换。</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br></pre></td></tr></table></figure>

<p>当开启了元素的定位（<code>position</code>属性值是一个非<code>static</code>的值）时，可以通过<code>top</code>、<code>right</code>、<code>bottom</code>和<code>left</code>四个属性来设置元素的偏移量。</p>
<p><code>top</code>：元素相对于其定位位置上边的偏移量</p>
<p><code>right</code>：元素相对于其定位位置右侧的偏移量</p>
<p><code>bottom</code>：元素相对于其定位位置下边的偏移量</p>
<p><code>left</code>：元素相对于其定位位置左侧的偏移量</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">left</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">top</span>: 200<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>通常只需要使用两个偏移量就可以对一个元素进行定位，一般选择水平和垂直两个方向上各一个偏移量来为一个元素进行定位。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>侧边信息栏案例练习</title>
    <url>/front-end-basics/50.html</url>
    <content><![CDATA[<p>网页侧边栏信息栏练习：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>开班信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">            * &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">body</span> &#123; <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1</span> <span class="string">"微软雅黑"</span>; &#125;</span></span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="comment">/******容器******/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line">                width: 300px;</span><br><span class="line">                margin: 50px auto 0px;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="comment">/******标题******/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">                height: 43px;</span><br><span class="line">                line-height: 43px;</span><br><span class="line">                padding: 0 1em;</span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#F3F3F3</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">border-top</span>: 3<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#039E86</span></span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.title</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">                float: right;</span><br><span class="line">                color: red;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.title</span> <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line">                font: 16px/46px;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="comment">/******内容******/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#E4E3E0</span>;</span></span><br><span class="line">                padding: 0 2em 0 1em;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.content</span> <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">margin</span>: 1<span class="selector-tag">em</span> 0 1<span class="selector-class">.2em</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.content</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line">                list-style: none;</span><br><span class="line"><span class="css">                <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-id">#DEDDD9</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.content</span> <span class="selector-tag">ul</span><span class="selector-pseudo">:last-of-type</span> &#123;</span></span><br><span class="line">                border: none;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.content</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">                margin: 1em 0;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.content</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">                text-decoration: none;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.content</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">                text-decoration: underline;</span><br><span class="line">                color: purple;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.content</span> <span class="selector-class">.red</span> &#123;</span></span><br><span class="line">                color: red;</span><br><span class="line">                font-weight: bold;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.content</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">                float: right;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>18年面授开班计划<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>近期开班<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>JavaEE+大数据-全程就业班<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>开班时间：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>2018-08-08(北京)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"red right"</span>&gt;</span>预约报名<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>开班时间：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>2018-09-06(深圳)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"red right"</span>&gt;</span>预约报名<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>开班时间：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2018-07-25(深圳)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>开班盛况<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>开班时间：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2018-07-15(北京)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>开班盛况<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>大数据+机器学习-全程就业班<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>开班时间：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>2018-08-08(北京)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"red right"</span>&gt;</span>预约报名<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>开班时间：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>2018-09-06(深圳)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"red right"</span>&gt;</span>预约报名<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>开班时间：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2018-07-25(深圳)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>开班盛况<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>开班时间：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2018-07-05<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>开班盛况<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>HTML5前端+全栈-全程就业班<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>开班时间：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>2018-08-10(北京)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"red right"</span>&gt;</span>预约报名<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>开班时间：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>2018-09-20(北京)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"red right"</span>&gt;</span>预约报名<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>开班时间：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2018-07-15(深圳)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>开班盛况<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>开班时间：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2018-07-10(北京)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>开班盛况<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>Python+人工智能-全程就业班<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>开班时间：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>2018-08-10<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"red right"</span>&gt;</span>预约报名<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>开班时间：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>2018-09-20<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"red right"</span>&gt;</span>预约报名<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>开班时间：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2018-07-10<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>开班盛况<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>开班时间：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2018-5-24<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>开班盛况<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>


<p>你可以先按照样图自己动手编写<a href="/images/htmlcssbasics/1050/1.png" target="_blank"> &gt;&gt;戳我查看样图&lt;&lt; </a></p>
<p>最终效果<a href="/mypages/htmlcssbasics/1050.html" target="_blank"> &gt;&gt;请戳我&lt;&lt; </a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>练习</tag>
      </tags>
  </entry>
  <entry>
    <title>解决高度塌陷问题总结</title>
    <url>/front-end-basics/49.html</url>
    <content><![CDATA[<ul>
<li>开启BFC或者hasLayout<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul><ul>
<li>使用清除浮动<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul><a id="more"></a>

<blockquote>
<p>使用方法是在高度塌陷的父元素的<code>class</code>属性中添加值<code>clear</code>或者<code>clearfix</code>。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>解决高度塌陷问题 - 2</title>
    <url>/front-end-basics/48.html</url>
    <content><![CDATA[<ul>
<li>添加空白<code>div</code><br>  以直接在高度塌陷的父元素的最后添加一个空白的<code>div</code>或任何块元素，由于这个<code>div</code>并没有浮动，所以它是可以撑开父元素的高度的，然后再对这个<code>div</code>清除浮动，通过这个空白的<code>div</code>撑起父元素的高度来解决高度塌陷，基本没有副作用。<br>用法如下：</li>
</ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****样式*****/</span></span><br><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加在最后的块元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用这种方式虽然可以解决问题，但是会在页面中添加多余的结构。</p>
<hr>
<ul>
<li>使用<code>:after</code>伪类<br>  过<code>:after</code>伪类向父元素的最后添加一个空白的块元素，然后对其清除浮动，这种方式和添加空白<code>div</code>的原理相同，有相同的效果，并且不会影响页面结构，几乎没有副作用，是我们最为推荐的方式。<br>  法如下：            </li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*********样式*********/</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="comment">/*添加一个空白内容*/</span></span><br><span class="line">    <span class="attribute">conten</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="comment">/*转换为块元素*/</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="comment">/*清除两侧浮动*/</span></span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 给高度塌陷的父元素的class属性添加值clearfix --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"someclass clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>IE6的兼容<br>  IE6中不支持<code>:after</code>伪类，所以在IE6中还需使用<strong>hasLayout</strong>来处理。            </li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>清除浮动</title>
    <url>/front-end-basics/47.html</url>
    <content><![CDATA[<p>如有以下代码片段：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*样式*/</span></span><br><span class="line"><span class="selector-tag">box1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">box2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellowgreen;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">box3</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>


<p>其效果如图-1：<br><img src="/images/htmlcssbasics/1047/1.png" alt="图-1"><br>如果将<strong>box1</strong>设置为向左浮动：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*样式*/</span></span><br><span class="line"><span class="selector-tag">box1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/*设置box1向左浮动*/</span></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">box2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellowgreen;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">box3</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其效果如图-2：<br><img src="/images/htmlcssbasics/1047/2.png" alt="图-2"><br>由于受到<strong>box1</strong>浮动的影响，<strong>box2</strong>整体向上移动了100px。<br>我们有时希望清除掉其他元素浮动对当前元素产生的影响，这时可以使用<code>clear</code>来完成功能。            </p>
<ul>
<li>使用<code>clear</code>来清除其他浮动元素对当前元素的影响<br>可选值：<br><code>none</code>：不清除浮动。<br><code>left</code>：清除左侧浮动元素对当前元素的影响。<br><code>right</code>：清除右侧浮动元素对当前元素的影响。<br><code>both</code>：清除两侧浮动元素对当前元素的影响（清除对他影响最大的那个元素的浮动）。            </li>
</ul>
<p>设置<strong>box2</strong>清除左侧浮动元素对当前元素的影响：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*样式*/</span></span><br><span class="line"><span class="selector-tag">box1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/*设置box1向左浮动*/</span></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">box2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellowgreen;</span><br><span class="line">	</span><br><span class="line">    设置清除左侧浮动元素box2的影响*/</span><br><span class="line">    <span class="selector-tag">clear</span>: <span class="selector-tag">left</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">box3</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其效果如图-3：<br><img src="/images/htmlcssbasics/1047/1.png" alt="图-3"></p>
<p>清除<strong>box1</strong>对<strong>box2</strong>产生的影响，清除浮动之后，元素会回到其他元素浮动之前的位置。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>导航条练习</title>
    <url>/front-end-basics/46.html</url>
    <content><![CDATA[<p>进行简单导航条练习：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>导航条<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="comment">/*清除默认样式*/</span></span></span><br><span class="line"><span class="css">            * &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span> &#125;</span></span><br><span class="line">            ul &#123;</span><br><span class="line"><span class="css">                <span class="comment">/*设置导航条宽度*/</span></span></span><br><span class="line">                width: 1000px;</span><br><span class="line"><span class="css">                <span class="comment">/*设置背景颜色*/</span></span></span><br><span class="line">                background: skyblue;</span><br><span class="line"><span class="css">                <span class="comment">/*设置导航条居中*/</span></span></span><br><span class="line">                margin: 50px auto 0;</span><br><span class="line"><span class="css">                <span class="comment">/*清除无序列表的项目符号*/</span></span></span><br><span class="line">                list-style: none;</span><br><span class="line"><span class="css">                <span class="comment">/*解决高度塌陷问题*/</span></span></span><br><span class="line">                overflow: hidden;</span><br><span class="line">            &#125;</span><br><span class="line">            ul li &#123;</span><br><span class="line"><span class="css">                <span class="comment">/*设置每个菜单的宽度*/</span></span></span><br><span class="line">                width: 25%;</span><br><span class="line"><span class="css">                <span class="comment">/*使菜单水平显示*/</span></span></span><br><span class="line">                float: left;</span><br><span class="line">            &#125;</span><br><span class="line">            ul li a &#123;</span><br><span class="line"><span class="css">                <span class="comment">/*将a转换为块元素*/</span></span></span><br><span class="line">                display: block;</span><br><span class="line"><span class="css">                <span class="comment">/*给a设置大小*/</span></span></span><br><span class="line">                width: 100%;</span><br><span class="line">                padding: 5px 0;</span><br><span class="line"><span class="css">                <span class="comment">/*文字居中*/</span></span></span><br><span class="line">                text-align: center;</span><br><span class="line"><span class="css">                <span class="comment">/*清除超链接下划线*/</span></span></span><br><span class="line">                text-decoration: none;</span><br><span class="line"><span class="css">                <span class="comment">/*统一字体样式*/</span></span></span><br><span class="line">                color: white;</span><br><span class="line">                font-size: 16px;</span><br><span class="line">                font-weight: blod;</span><br><span class="line">                font-family: airal 微软雅黑;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="comment">/*设置鼠标移入超链接的效果*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#b00</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>联系<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>


<p>最终效果<a href="/mypages/htmlcssbasics/1046.html" target="_blank"> &gt;&gt;请戳我&lt;&lt; </a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>练习</tag>
      </tags>
  </entry>
  <entry>
    <title>解决高度塌陷问题 - 1</title>
    <url>/front-end-basics/45.html</url>
    <content><![CDATA[<p>根据W3C的标准，在页面中元素都有一个隐含的属性叫作<strong>Block Formatting Context</strong>，简称<strong>BFC</strong>，该属性可以设置打开或者关闭，默认是关闭的。            </p><ul>
<li>当开启元素的<strong>BFC</strong>之后，元素将会具有以下特性<ol>
<li>父元素的垂直外边距不会和子元素重叠</li>
<li>开启<strong>BFC</strong>的元素不会被浮动元素所覆盖</li>
<li>开启<strong>BFC</strong>的元素可以包含浮动的子元素</li>
</ol>
</li>
</ul><a id="more"></a>

<ul>
<li>如何开启元素的<strong>BFC</strong><ol>
<li>设置元素浮动<ul>
<li>使用这种方式开启，虽然可以撑开父元素，但是会导致父元素的宽度丢失，而且使用这种方式也会导致下面的元素上移，不能解决问题。</li>
</ul>
</li>
<li>设置元素绝对定位</li>
<li>设置元素为<code>inline-block</code><ul>
<li>可以解决问题，但是会导致宽度丢失，不推荐使用这种方式。</li>
</ul>
</li>
<li>设置元素的<code>overflow</code>为一个非<code>visible</code>的值<ul>
<li><code>scroll</code>、<code>auto</code>、<code>hidden</code></li>
</ul>
</li>
</ol>
</li>
</ul>
<blockquote>
<p>推荐方式：将<code>overflow</code>设置为<code>overflow: hidden;</code>是副作用最小的开启<strong>BFC</strong>的方式。</p>
</blockquote>
<hr>
<p>不幸的是，在IE6及以下的浏览器中并不支持<strong>BFC</strong>，所以使用这种方式不能兼容IE6。<br>在IE6中虽然没有<strong>BFC</strong>，但是具有另一个隐含的属性叫作<strong>HasLayout</strong>.<br>该属性的作用和<strong>BFC</strong>类似，在IE6及以下浏览器中可以通过开启<strong>HasLayout</strong>来解决该问题。<br>开启方式有很多，我们直接使用副作用最小的：            </p>
<ul>
<li>将元素的<code>zoom</code>设置为<code>zoom: 1;</code>即可<br>zoom<code>表示放大，后面的数值表示放大的倍数。            
zoom: 1;</code>表示不放大元素，但是通过该设置可以开启<strong>HasLayout</strong>。<br>是这种方法只支持IE8及以下的浏览器,不支持任何其他浏览器。            </li>
</ul>
<p>综上，我们通常会在需要兼容IE6时如下编写样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">zoom</span>: 1;</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>高度塌陷问题</title>
    <url>/front-end-basics/44.html</url>
    <content><![CDATA[<p>在文档流中，父元素的高度默认是被子元素撑开的，即子元素多高父元素就多高。            </p><p>但是当子元素设置浮动之后，子元素完全脱离了文档流，此时将会导致子元素无法撑起父元素的高度，导致父元素的高度塌陷。            </p><p>由于父元素的高度塌陷了，则父元素下的所有元素都会向上移动，这样的将会导致页面布局混乱。        </p><a id="more"></a>


<p>所以在开发中一定要避免出现高度塌陷问题。<br>我们可以将父元素的高度写死，以避免高度塌陷问题的出现，但是高度一旦写死，父元素的高度将不能自动适应子元素的高度，所以这种方案是不推荐使用的。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>简单布局</title>
    <url>/front-end-basics/43.html</url>
    <content><![CDATA[<p>进行简单布局练习：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>简单布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="comment">/*通用样式*/</span></span></span><br><span class="line"><span class="css">            * &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line">			</span><br><span class="line"><span class="css">            <span class="selector-class">.w</span> &#123; <span class="attribute">width</span>: <span class="number">1000px</span>; <span class="attribute">margin</span>: <span class="number">0</span> auto; &#125;</span></span><br><span class="line">			</span><br><span class="line"><span class="css">            <span class="selector-class">.ftl</span> &#123; <span class="attribute">float</span>: left; &#125;</span></span><br><span class="line">			</span><br><span class="line"><span class="css">            <span class="comment">/*头部样式*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.header</span> &#123;</span></span><br><span class="line">                height: 120px;</span><br><span class="line">                background: orange;</span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line"><span class="css">            <span class="comment">/*内容样式*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">                width: 1000px;</span><br><span class="line">                height: 500px;</span><br><span class="line">                margin: 10px auto;</span><br><span class="line">                background: yellowgreen;</span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line"><span class="css">            <span class="selector-class">.content</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">                width: 200px;</span><br><span class="line">                height: 100%;</span><br><span class="line">                background: pink;</span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line"><span class="css">            <span class="selector-class">.content</span> <span class="selector-class">.center</span> &#123;</span></span><br><span class="line">                width: 580px;</span><br><span class="line">                height: 100%;</span><br><span class="line">				margin: 0 10px;</span><br><span class="line">                background: skyblue;</span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line"><span class="css">            <span class="selector-class">.content</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">                width: 200px;</span><br><span class="line">                height: 100%;</span><br><span class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line"><span class="css">            <span class="comment">/*底部样式*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">                height: 100px;</span><br><span class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 头部div --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header w"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">&lt;!-- 内容div --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 左边div --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left ftl"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 中间div --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center ftl"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 右边div --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right ftl"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">&lt;!-- 底部div --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer w"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>

<p>最终效果<a href="/mypages/htmlcssbasics/1043.html" target="_blank"> &gt;&gt;请戳我&lt;&lt; </a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>浮动</title>
    <url>/front-end-basics/42.html</url>
    <content><![CDATA[<p>块元素在文档流中默认从上至下排列，若希望块元素在页面中水平排列，可以使块元素脱离文档流。</p><h3 id="使用float来设置元素的浮动"><a href="#使用float来设置元素的浮动" class="headerlink" title="使用float来设置元素的浮动"></a>使用<code>float</code>来设置元素的浮动</h3><p>可选值：<br><code>none</code>：元素默认在文档流中排列（默认值）<br><code>left</code>：元素会立即脱离文档流，向页面的左侧浮动<br><code>right</code>：元素会立即脱离文档流，向页面的右侧浮动<br><br></p><h3 id="浮动的特点"><a href="#浮动的特点" class="headerlink" title="浮动的特点"></a>浮动的特点</h3><ul>
<li>当为元素设置浮动以后（<code>float</code>属性是一个非<code>none</code>的值），元素会立即脱离文档流，元素脱离文档流以后，它下面的元素会立即向上移动。            <br></li>
<li>元素浮动以后，会尽量向页面的左上或右上漂浮，直到父元素的边框处或其他浮动元素为止。<br></li>
<li>如果浮动元素上面有一个没有浮动的块元素，则浮动元素不会超过块元素。<br></li>
<li>浮动的元素不会超过它上面的兄弟元素，顶多平齐。<br></li>
<li>浮动的元素不会盖住文字，文字会自动环绕在浮动元素的周围，所以我们可以通过浮动来设置文字环绕的效果。<br>如图-1所示：</li>
</ul><a id="more"></a>


<p><img src="/images/htmlcssbasics/1043/1.png" alt="图-1"></p>
<ul>
<li>当元素设置浮动以后，会完全脱离文档流。<ul>
<li>块元素脱离文档流之后，宽度和高度都被内容撑开，而不再占据父元素的全部。（在文档流中，块元素的宽度默认占父元素的全部。）            </li>
<li>内联元素脱离文档流之后，会变成块元素。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>文档流</title>
    <url>/front-end-basics/41.html</url>
    <content><![CDATA[<ul>
<li>文档流<br>文档流处在网页的最底层，它表示的是页面中的位置，我们所创建的元素默认都处在文档流中。<br></li>
<li>元素在文档流中的特点<ul>
<li>块元素<ol>
<li>块元素在文档流中会独占一行，从上至下排列。            </li>
<li>块元素在文档流中的宽度默认是父元素的100%（<code>width: auto</code>）。</li>
<li>块元素在文档流中的高度默认是被内容撑开的。<br></li>
</ol>
</li>
<li>内联元素<ol>
<li>内联元素在文档流中只占用自身的大小，会默认从左至右排列。若一行内不足以容纳所有的内联元素，则会自动换行，换到下一行后继续从左至右排列。</li>
<li>内联元素在文档流中的宽度和高度默认都是被内容撑开的。<br></li>
</ol>
</li>
</ul>
</li>
<li>拓展：<br>当元素的宽度的值为<code>auto</code>时，指定内边距不会影响可见框的大小，而是会自动调整元素的宽度，以适应内边距。</li>
</ul>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>overflow</title>
    <url>/front-end-basics/40.html</url>
    <content><![CDATA[<p>子元素默认是存在于父元素的内容区中，理论上来说，子元素的大小最大只能等于父元素的内容区大小，如果子元素的大小超过了父元素的内容区，则超过的部分会在父元素以外的位置显示，超出父元素的内容，我们称为<strong>溢出的内容</strong>。</p><p>父元素默认会将溢出的内容在自身外部显示。        </p><ul>
<li>使用<code>overflow</code>来设置父元素如何处理溢出内容<br>可选值：<ul>
<li><code>visible</code>：<br>  不会对溢出内容作任何处理，<br>  元素会在父元素以外的位置显示（默认值）。<br></li>
<li><code>hidden</code>：<br>  溢出的内容会被修剪，不会显示。<br></li>
<li><code>scroll</code>：<br>  会为父元素添加滚动条，通过滚动条可以查看完整的子元素内容。<br>  该属性不论内容是否溢出，都会添加水平和垂直方向的滚动条。<br></li>
<li><code>auto</code>：<br>  会根据实际情况自动添加滚动条，<br>  水平方向溢出时自动添加水平滚动条，<br>  垂直方向溢出时自动添加垂直滚动条，<br>  都不溢出时则不添加滚动条。        </li>
</ul>
</li>
</ul>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>display和visibility</title>
    <url>/front-end-basics/39.html</url>
    <content><![CDATA[<ul>
<li>使用<code>display</code>来修改元素的类型<br>元素的类型指内联元素、块元素等。</li>
</ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">可选值：</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">inline</span>：将元素设置为内联元素来显示。</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">block</span>：将元素设置为块元素来显示。</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">inline-block</span>：将元素设置为行内块元素来显示。</span><br><span class="line">                <span class="selector-tag">-</span> 可以使元素既有内联元素的特点，又有块元素的特点，</span><br><span class="line">                  既可以设置宽高，又不会独占一行。</span><br><span class="line">			  </span><br><span class="line">    <span class="selector-tag">none</span>：不显示元素，并且元素不会在页面中继续占用位置和空间。</span><br></pre></td></tr></table></figure><a id="more"></a>

<br>
- 使用`visibility`来修改元素影藏和显示的状态

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可选值：</span><br><span class="line"></span><br><span class="line">    visible：元素会在页面中正常显示（默认值）</span><br><span class="line"></span><br><span class="line">    hidden：不显示元素，并且元素会在页面中就行占用位置和空间。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用<code>display: none;</code>隐藏的元素，不会在页面中显示，并且不会再占据页面的位置。<br>使用<code>visibility: hidden;</code>隐藏的元素，虽然不会在页面中显示，但是会占据页面的位置。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>内联元素的盒模型</title>
    <url>/front-end-basics/38.html</url>
    <content><![CDATA[<p>盒子模型包括</p><ul>
<li>内容区</li>
<li>内边距</li>
<li>边框</li>
<li>外边距</li>
</ul><hr><ul>
<li>内联元素不支持<code>width</code>和<code>height</code>。<br></li>
<li>内联元素可以设置水平方向的内边距，且会影响页面的布局。</li>
<li>内联元素可以设置垂直方向的内边距，但不会影响页面的布局。<br></li>
<li>内联元素可以设置水平方向的边框，且会影响页面的布局。</li>
<li>内联元素可以设置垂直方向的边框，但不会影响页面的布局。<br></li>
<li>内联元素可以设置水平方向的外边距，且会影响页面的布局。</li>
<li>内联元素不支持垂直方向的外边距。</li>
</ul><a id="more"></a>



<blockquote>
<p>水平方向的相邻外边距不会重叠，而是求和。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器的默认样式</title>
    <url>/front-end-basics/37.html</url>
    <content><![CDATA[<p>浏览器为了使页面在没有样式时，也可以有一个较好的显示效果，便为很多元素都设置了一些默认的<code>margin</code>和<code>padding</code>，而这些默认的样式，正常情况下我们是不需要使用的。</p><p>因此我们往往需要在编写样式之前将浏览器默认的<code>margin</code>和<code>padding</code>清除。<br>我们使用以下方法来清除默认样式：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>



<blockquote>
<p><code>*</code>通配符选择器对浏览器的性能有较大影响，所以在以后的开发中不建议使用，但作为初学者的我们，暂时使用这种方法即可。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML+CSS基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>WELCOME</title>
    <url>/chat/welcome.html</url>
    <content><![CDATA[<p>一首歌，一个故事送给你，相信你会喜欢。</p><blockquote>
<p>高三那年，我暗恋我的男同桌。<br>自开学起他天天都吃糖，用糖纸来织星星。<br>我问他：“你折这么多小星星干嘛？”<br>他说：“送给我喜欢的人啊！”<br>毕业的时候他送了我一个超大的布熊，多年后，我两岁的儿子在玩那个布熊的时候不小心划了个口子，许多星星掉了出来。<br>这时我老公走过来说：“我那时手艺还不错吧！还好我们没错过。”</p>
</blockquote><a id="more"></a>

<audio controls>
      <source src="http://www.ytmp3.cn/down/50474.mp3" type="audio/mpeg">
</audio>


<p>欢迎来到我的博客，我是 Ninefire，玖燃，这是一个用 <a href="https://hexo.io/" title="快速、简洁且高效的博客框架" target>Hexo</a> 框架搭建的个人博客网站。</p>
<p>这里有许多笔记、资源、音乐、故事，希望你喜欢，希望可以帮到你。</p>
<p>下面是传送门：</p>
<p><strong><a href="../HTML&CSS.basics/04.html">HTML+CSS基础</a></strong></p>
<p><strong><a href="../CSS2.1/01.html">CSS2.1入门</a></strong></p>
<p><strong><a href="../JavaScript.basics/01.html">JavaScript基础</a></strong></p>
<p><strong><a href="../Java.basics/02.html">Java基础</a></strong></p>
]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
        <tag>Github</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>盒子模型</title>
    <url>/front-end-basics/04-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.html</url>
    <content><![CDATA[<h2 id="盒子模型基本概念"><a href="#盒子模型基本概念" class="headerlink" title="盒子模型基本概念"></a>盒子模型基本概念</h2><ul>
<li>CSS 处理网页时，它认为<strong>每个元素</strong>都包含在一个不可见的盒子里。</li>
</ul><p>如果把<strong>所有的元素</strong>都想象成盒子，那么我们对网页的布局就相当于在摆放盒子。<br>我们只需要将相应的盒子摆放到网页中相应的位置即可完成网页的布局。</p><ul>
<li>一个盒子我们会分成以下几个部分：<ul>
<li><code>content</code>：内容区</li>
<li><code>padding</code>：内边距</li>
<li><code>border</code>：边框</li>
<li><code>margin</code>：外边距</li>
</ul>
</li>
</ul><a id="more"></a>


<p><img src="/images/htmlcssbasics/1031/1.png" alt="盒子模型"></p>
<blockquote>
<p>此部分只可意会不可言传。</p>
</blockquote>
<hr>
<h2 id="盒子模型-边框"><a href="#盒子模型-边框" class="headerlink" title="盒子模型-边框"></a>盒子模型-边框</h2><h3 id="设置元素的大小"><a href="#设置元素的大小" class="headerlink" title="设置元素的大小"></a>设置元素的大小</h3><p>使用 <code>width</code> 来设置盒子<strong>内容区</strong>的宽度<br>使用 <code>height</code> 来设置盒子<strong>内容区</strong>的高度</p>
<blockquote>
<p><code>width</code> 和 <code>height</code> 只是设置的盒子内容区的大小，而不是盒子的整体（可见）大小，盒子的可见大小由内容区、内边距和边框共同决定。</p>
</blockquote>
<h3 id="设置元素的边框"><a href="#设置元素的边框" class="headerlink" title="设置元素的边框"></a>设置元素的边框</h3><p>为元素设置边框时必须指定以下三个样式：</p>
<ul>
<li><code>border-width</code> 用来设置边框的宽度</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 如果指定1个值，则将指定的值同时设置给4个边框 */</span></span><br><span class="line"><span class="selector-tag">border-width</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果指定2个值，则将指定的值分别设置给上下、左右边框 */</span></span><br><span class="line"><span class="selector-tag">border-width</span>: 10<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果指定3个值，则将指定的值分别设置给上、左右、下边框 */</span></span><br><span class="line"><span class="selector-tag">border-width</span>: 10<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果指定4个值，则将指定的值分别设置给上、右、下、左边框（顺时针）*/</span></span><br><span class="line"><span class="selector-tag">border-width</span>: 10<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 30<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以上用于分别指定四条边框样式的方法同样适用于边框的其他属性。</p>
</blockquote>
<ul>
<li><code>border-style</code> 用来设置边框的样式<br>可选值：<ul>
<li><code>none</code> 没有边框（默认值）</li>
<li><code>solid</code> 实线</li>
<li><code>dashed</code> 虚线</li>
<li><code>dotted</code> 圆点虚线</li>
<li><code>double</code> 双实线</li>
</ul>
</li>
</ul>
<blockquote>
<p>该属性支持用前面提到的方法分别设置四条边框的样式。</p>
</blockquote>
<ul>
<li><code>border-color</code> 用来设置边框的颜色</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-color</span>: <span class="selector-tag">red</span>; <span class="comment">/* 设置边框颜色为红色 */</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>该属性支持用前面提到的方法分别设置四条边框的颜色。</p>
</blockquote>
<hr>
<h2 id="边框属性的简写"><a href="#边框属性的简写" class="headerlink" title="边框属性的简写"></a>边框属性的简写</h2><p>大多数浏览器中，边框的 <code>border-width</code> 和 <code>border-color</code> 都有默认值，而边框的 <code>border-style</code> 默认值都是 <code>none</code></p>
<ul>
<li>使用 <code>border</code> 来统一设置四条边框的所有属性（与文本样式的简写同样道理）<br>边框的简写样式，通过它可以同时设置四个边框的样式、宽度、颜色，而且没有任何书写顺序。</li>
</ul>
<p>例如以下写法都正确：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span><br><span class="line"><span class="selector-tag">border</span>: <span class="selector-tag">solid</span> 10<span class="selector-tag">px</span> <span class="selector-tag">red</span>;</span><br><span class="line"><span class="selector-tag">border</span>: <span class="selector-tag">red</span> <span class="selector-tag">solid</span> 10<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>border-xxx</code> 来分别设置四条边框的所有属性<br><code>xxx</code> 可以是 <code>top</code>、<code>right</code>、<code>bottom</code> 和 <code>left</code>。<br>简写的规则与 <code>border</code> 一样。</li>
</ul>
<hr>
<h2 id="盒子模型-内边距"><a href="#盒子模型-内边距" class="headerlink" title="盒子模型-内边距"></a>盒子模型-内边距</h2><ul>
<li><p>内边距（padding），指的是盒子的内容区与盒子边框之间的距离</p>
</li>
<li><p>共有四个方向的内边距，可以通过 <code>padding-top</code>、<code>padding-right</code>、<code>padding-bottom</code>、<code>padding-left</code> 来分别设置四个方向的内边距。</p>
</li>
<li><p>盒子的可见大小由内容区、内边距和边框的大小共同决定。</p>
</li>
<li><p>盒子可见框的宽度 = <code>border-left-width</code> + <code>padding-left</code> + <code>width</code> + <code>padding-right</code> + <code>border-right-width</code></p>
</li>
<li><p>盒子可见框的高度 = <code>border-top-width</code> + <code>padding-top</code> + <code>height</code> + <code>padding-bottom</code> + <code>border-bottom-width</code></p>
</li>
</ul>
<blockquote>
<p>内边距会<strong>影响</strong>盒子的<strong>可见框</strong>大小。<br>  元素的背景会延伸到内边距。</p>
</blockquote>
<ul>
<li>使用 <code>padding</code> 可以同时设置四个方向的内边距。<br>规则和 <code>border</code> 简写形式相同。</li>
</ul>
<p>例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置四个方向的内边距均为 5px */</span></span><br><span class="line"><span class="selector-tag">padding</span>: 5<span class="selector-tag">px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置上、下内边距为 5px，左、右内边距为 10px */</span></span><br><span class="line"><span class="selector-tag">padding</span>: 5<span class="selector-tag">px</span> 10<span class="selector-tag">px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置上内边距为 5px，左右内边距为 10px，下内边距为 15px */</span></span><br><span class="line"><span class="selector-tag">padding</span>: 5<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 15<span class="selector-tag">px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置上、右、下、左内边距分别为 5px、10px、15px、20px */</span></span><br><span class="line"><span class="selector-tag">padding</span>: 5<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 15<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="盒子模型-外边距"><a href="#盒子模型-外边距" class="headerlink" title="盒子模型-外边距"></a>盒子模型-外边距</h2><ul>
<li><p>外边距（margin），指的是当前盒子与其他盒子之间的距离。</p>
</li>
<li><p>共有四个方向的外边距，可以通过 <code>margin-top</code>、<code>margin-right</code>、<code>margin-bottom</code>、<code>margin-left</code> 来分别设置四个方向的外边距。</p>
</li>
<li><p>由于页面中的元素都是靠左和靠上摆放的，因此需要注意，当设置左、上外边距时，会导致盒子自身的位置发生改变，而设置右、下外边距会改变其他盒子的位置。</p>
</li>
<li><p>若外边距设置的是负值，则元素会反方向移动。<br>例：<code>margin-left: -150px;</code> 元素会向左位移 150 像素。</p>
</li>
<li><p>外边距还可以设置为 <code>auto</code>，<code>auto</code> 一般只设置给水平方向的 <code>margin</code>。</p>
</li>
<li><p>若只指定 <code>margin-left</code> 或 <code>margin-right</code> 的值为 <code>auto</code>，则会将外边距设置为最大值。</p>
</li>
<li><p>若同时指定 <code>margin-left</code> 和 <code>margin-right</code> 的值为 <code>auto</code>，则会将两侧的外边距设置为相同值，就可以使元素自动在父元素中居中，因此我们经常将左右外边距设置为 <code>auto</code>，以使子元素在父元素中水平居中。</p>
</li>
<li><p>若指定垂直方向的外边距为 <code>auto</code>，则外边距默认为 <code>0</code>。</p>
</li>
</ul>
<blockquote>
<p>外边距不会影响可见框的大小，但会影响盒子的位置。</p>
</blockquote>
<ul>
<li>使用 <code>margin</code> 可以同时设置四个方向的外边距。<br>规则和 <code>padding</code> 简写形式相同。</li>
</ul>
<p>例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">margin</span>: 5<span class="selector-tag">px</span>; <span class="comment">/* 设置四个方向的外边距均为 5px */</span></span><br><span class="line"><span class="selector-tag">margin</span>: 5<span class="selector-tag">px</span> 10<span class="selector-tag">px</span>; <span class="comment">/* 设置上、下外边距为 5px，左、右外边距为 10px */</span></span><br><span class="line"><span class="selector-tag">margin</span>: 5<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 15<span class="selector-tag">px</span>; <span class="comment">/* 设置上外边距为 5px，左右外边距为 10px，下外边距为 15px */</span></span><br><span class="line"><span class="selector-tag">margin</span>: 5<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 15<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>; <span class="comment">/* 设置上、右、下、左外边距分别为 5px、10px、15px、20px */</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="垂直外边距的重叠"><a href="#垂直外边距的重叠" class="headerlink" title="垂直外边距的重叠"></a>垂直外边距的重叠</h2><p>如有以下代码片段：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 样式 */</span></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: red;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 为红色的盒子设置一个下外边距 */</span></span><br><span class="line">	<span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其效果如图-1所示</p>
<p><img src="/images/htmlcssbasics/1036/1.png" alt="图-1"></p>
<p>若将样式设置为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: red;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 为红色的盒子设置一个下外边距 */</span></span><br><span class="line">	<span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: green;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 为绿色的盒子设置一个上外边距 */</span></span><br><span class="line">	<span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其效果如图-2所示，与图-1完全相同</p>
<p><img src="/images/htmlcssbasics/1036/1.png" alt="图-2"></p>
<p>若将结构改为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">a</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其效果如图-3所示</p>
<p><img src="/images/htmlcssbasics/1036/3.png" alt="图-3"></p>
<p>这个现象称为垂直外边距的重叠。</p>
<p>在网页中，<strong>相邻</strong>的<strong>垂直</strong>方向的外边距会发生外边距的重叠，所谓的外边距重叠是指兄弟元素之间的相邻外边距会取最大值而不是取和。</p>
<p>又有以下代码片段：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 样式 */</span></span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box4</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: yellowgreen;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 为子元素设置一个上外边距，即子元素的位置下移</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其效果如图-4所示</p>
<p><img src="/images/htmlcssbasics/1036/4.png" alt="图-4"></p>
<p>如果父子元素的垂直外边距相邻了，则子元素的外边距会设置给父元素。</p>
<blockquote>
<p>我们解决垂直外边距的重叠带来的问题时，必须从“相邻”和“垂直”着手去思考解决方法。<br>  例如用另一个元素或 <code>border</code> 将两个外边距隔开，使其不再相邻，即可解决该问题。<br>  还可以改用其他样式来代替 <code>margin</code>，不使用垂直外边距。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML + CSS 基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>盒子模型</tag>
      </tags>
  </entry>
  <entry>
    <title>一文搞懂 CSS 选择器</title>
    <url>/front-end-basics/02-%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82CSS%E9%80%89%E6%8B%A9%E5%99%A8.html</url>
    <content><![CDATA[<h2 id="常用选择器"><a href="#常用选择器" class="headerlink" title="常用选择器"></a>常用选择器</h2><h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><ul>
<li>作用：通过元素选择器可以选中页面中所有指定元素</li>
<li>语法：<code>标签名{ }</code></li>
<li>举例：<code>p{color: red;} /*选中页面中所有p元素并设置字体颜色为红色*/</code></li>
</ul><h3 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id 选择器"></a><code>id</code> 选择器</h3><ul>
<li>作用：通过元素的 <code>id</code> 属性值选中唯一的一个元素</li>
<li>语法：<code>#id属性值{ }</code></li>
<li>举例：<code>#header {font-size: 38px;}</code></li>
</ul><a id="more"></a>

<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><ul>
<li>作用：通过元素的 <code>class</code> 属性值选中一组元素</li>
<li>语法：<code>.class属性值{ }</code></li>
<li>举例：<code>.inner {background-color: green;}</code></li>
</ul>
<blockquote>
<p>PS：可以同时为一个元素设置多个 <code>class</code> 属性值，多个值之间使用空格隔开。</p>
</blockquote>
<h3 id="选择器分组"><a href="#选择器分组" class="headerlink" title="选择器分组"></a>选择器分组</h3><p>又称并集选择器</p>
<ul>
<li>作用：通过选择器分组可以同时选中多个选择器对应的元素</li>
<li>语法：<code>选择器1, 选择器2, 选择器n {}</code></li>
<li>举例：<code>p, #header, .inner{background-color: yellow;}</code></li>
</ul>
<h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><ul>
<li>作用：可以用来选中页面中所有的元素</li>
<li>语法：<code>* { }</code></li>
<li>举例：<code>* { margin: 0; padding: 0; }</code></li>
</ul>
<h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><p>又称交集选择器</p>
<ul>
<li>作用：可以选中同时满足多个选择器的元素</li>
<li>语法：<code>选择器1选择器2选择器n{ }</code></li>
<li>举例：<code>p.inner{color: green;}</code></li>
</ul>
<blockquote>
<p>PS：对于 <code>id</code> 选择器来说，不建议使用复合选择器，因为 <code>id</code> 本身就是唯一的。</p>
</blockquote>
<hr>
<h2 id="后代元素选择器和子元素选择器"><a href="#后代元素选择器和子元素选择器" class="headerlink" title="后代元素选择器和子元素选择器"></a>后代元素选择器和子元素选择器</h2><h3 id="元素之间的关系"><a href="#元素之间的关系" class="headerlink" title="元素之间的关系"></a>元素之间的关系</h3><ul>
<li>父元素：直接包含子元素的元素</li>
<li>子元素：直接被父元素包含的元素</li>
<li>祖先元素：直接或间接包含后代元素的元素，父元素也是祖先元素</li>
<li>后代元素：直接或间接被祖先元素包含的元素，子元素也是后代元素</li>
<li>兄弟元素：拥有相同父元素的元素叫作兄弟元素</li>
</ul>
<h3 id="后代元素选择器"><a href="#后代元素选择器" class="headerlink" title="后代元素选择器"></a>后代元素选择器</h3><p>儿子或孙子都选中</p>
<ul>
<li>作用：选中指定元素的指定后代元素</li>
<li>语法：<code>祖先元素 后代元素{ }</code></li>
<li>举例：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选中 div 下的 span 元素 */</span></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: greenyellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选中 id 为 d1 的元素中的 p 元素中的 span 元素 */</span></span><br><span class="line"><span class="selector-id">#d1</span> <span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h3><p>只要儿子，不要孙子</p>
<ul>
<li>作用：选中指定父元素的子元素</li>
<li>语法：<code>父元素&gt;子元素{ }</code></li>
<li>举例：<br><code>div &gt; span {background-color: pink;}</code></li>
</ul>
<blockquote>
<p>PS：IE6 以下（包括 IE6）版本浏览器不支持子元素选择器</p>
</blockquote>
<hr>
<h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><h3 id="超链接相关的伪类"><a href="#超链接相关的伪类" class="headerlink" title="超链接相关的伪类"></a>超链接相关的伪类</h3><p>有四个伪类可以让你根据访问者与该链接的交互方式，将链接设置成 4 种不同的状态。</p>
<ul>
<li><p>正常链接 <code>:link</code></p>
</li>
<li><p>访问过的链接 <code>:visited</code><br>浏览器通过历史记录来判断链接是否被访问过，由于涉及到用户的隐私问题，所以使用 <code>:visited</code> 伪类只能设置字体的颜色</p>
</li>
<li><p>鼠标滑过的链接 <code>:hover</code><br>不仅仅是 <code>&lt;a&gt;</code> 元素，其他元素也可以使用，但 IE6 除外</p>
</li>
<li><p>正在点击的链接 <code>:active</code><br>不仅仅是 <code>&lt;a&gt;</code> 元素，其他元素也可以使用，但 IE6 除外</p>
</li>
</ul>
<h3 id="另外两个常用伪类"><a href="#另外两个常用伪类" class="headerlink" title="另外两个常用伪类"></a>另外两个常用伪类</h3><ul>
<li><p>获取焦点 <code>:focus</code><br>比如文本框获取焦点以后的样式，也就是文本框正在输入时的状态。IE6 不支持。</p>
</li>
<li><p>选中的元素 <code>::selection</code><br>要注意不同浏览器的兼容问题，例如火狐浏览器中要写为 <code>::-moz-selection</code></p>
</li>
</ul>
<blockquote>
<p>伪类专门用来表示元素的一种特殊的状态。<br>  比如：访问过的超链接、普通的超链接、获取焦点的文本框。<br>  当我们需要为处在这些特殊状态的元素设置样式时，就可以使用伪类。</p>
</blockquote>
<hr>
<h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><ul>
<li><p>首字母 <code>:first-letter</code></p>
</li>
<li><p>首行 <code>:first-line</code></p>
</li>
<li><p>指定元素前 <code>:before</code><br>表示元素最前边的部分，一般都需要结合 <code>content:&quot;something&quot;</code> 样式一起使用，通过 <code>content:&quot;something&quot;</code> 可以向 before 的位置添加 something 内容。</p>
</li>
<li><p>指定元素后 <code>:after</code><br>表示元素最后边的部分，一般都需要结合 <code>content:&quot;something&quot;</code> 样式一起使用，通过 <code>content:&quot;something&quot;</code> 可以向 after 的位置添加 something 内容。</p>
</li>
</ul>
<blockquote>
<p>PS：以上选择器在 IE6 版本的浏览器中均不支持</p>
</blockquote>
<hr>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><ul>
<li>作用：可以根据元素中的属性或属性值来选取指定元素</li>
<li>语法：</li>
</ul>
<table>
<thead>
<tr>
<th>语法</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>[属性名]{ }</code></td>
<td>选取含有指定属性的元素</td>
</tr>
<tr>
<td><code>[属性名=&quot;属性值&quot;]{ }</code></td>
<td>选取含有指定属性值的元素</td>
</tr>
<tr>
<td><code>[属性名^=&quot;属性值&quot;]{ }</code></td>
<td>选取属性值以指定内容开头的元素</td>
</tr>
<tr>
<td><code>[属性名$=&quot;属性值&quot;]{ }</code></td>
<td>选取属性值以指定内容结尾的元素</td>
</tr>
<tr>
<td><code>[属性名*=&quot;属性值&quot;]{ }</code></td>
<td>选取属性值含有指定内容的元素</td>
</tr>
</tbody></table>
<blockquote>
<p><code>title</code> 属性，这个属性可以给任何标签指定，当鼠标移入到元素上时，元素中的 <code>title</code> 属性值将会作为提示信息显示。</p>
</blockquote>
<hr>
<h2 id="子元素的伪类"><a href="#子元素的伪类" class="headerlink" title="子元素的伪类"></a>子元素的伪类</h2><ul>
<li><code>:first-child</code> 选择第一个子元素</li>
<li><code>:last-child</code> 选择最后一个子元素</li>
<li><code>:nth-child</code> 选择指定位置的子元素<br>三种写法：<ul>
<li><code>:nth-child(n)</code> 选中第 n 个子元素</li>
<li><code>:nth-child(even)</code> 选中偶数位置的子元素</li>
<li><code>:nth-child(odd)</code> 选中奇数位置的子元素</li>
</ul>
</li>
<li><code>:first-of-type</code> 选择第一个指定类型的子元素</li>
<li><code>:last-of-type</code> 选择最后一个指定类型的子元素</li>
<li><code>:nth-of-type</code> 选择指定类型中指定位置的子元素</li>
</ul>
<blockquote>
<p>注意：<code>child</code>，是在所有子元素中排列；<code>type</code>，是在指定类型的子元素中排列。<br>  PS：元素即标签，标签即元素。</p>
</blockquote>
<hr>
<h2 id="兄弟元素选择器"><a href="#兄弟元素选择器" class="headerlink" title="兄弟元素选择器"></a>兄弟元素选择器</h2><ul>
<li><p>后一个兄弟元素选择器<br>作用：可以选中一个元素后紧挨着的指定的兄弟元素<br>语法：<code>前一个 + 后一个 { }</code></p>
</li>
<li><p>后边所有兄弟元素选择器<br>作用：可以选中一个元素后所有的兄弟元素<br>语法：<code>前一个~后边所有{ }</code></p>
</li>
</ul>
<hr>
<h2 id="否定伪类"><a href="#否定伪类" class="headerlink" title="否定伪类"></a>否定伪类</h2><ul>
<li>作用：可以从已选中的元素中剔除某些指定元素        </li>
<li>语法：<code>:not(选择器) { }</code>        </li>
<li>举例：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:not(.hello)</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>:yellow;</span><br><span class="line">&#125; <span class="comment">/* 选中所有 p 元素，剔除 class 属性值为 hello 的 p 元素，并设置背景颜色为黄色 */</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h2><p>就像儿子可以继承父亲的遗产一样，在 CSS 中，祖先元素上的样式也会被他的后代元素所继承，利用继承，可以将一些基本的样式设置给祖先元素，这样所有的后代元素将会自动继承这些样式。        </p>
<blockquote>
<p>但是并不是所有的样式都会被子元素继承，比如：背景、边框、定位等相关的样式都不会被继承。</p>
</blockquote>
<hr>
<h2 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h2><p>当使用不同的选择器，选中同一个元素并且设置相同的样式时，样式之间就产生了冲突，最终到底采用哪个选择器定义的样式，由选择器的优先级（权重）来决定，优先级高的优先采用。</p>
<p>优先级的规则：</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th>优先级</th>
</tr>
</thead>
<tbody><tr>
<td>内联样式</td>
<td>1000</td>
</tr>
<tr>
<td><code>id</code> 选择器</td>
<td>100</td>
</tr>
<tr>
<td>类和伪类</td>
<td>10</td>
</tr>
<tr>
<td>元素选择器</td>
<td>1</td>
</tr>
<tr>
<td>通配选择器 *</td>
<td>0</td>
</tr>
<tr>
<td>继承的样式</td>
<td>没有优先级</td>
</tr>
</tbody></table>
<p>当选择器中包含多种选择器时，需要将多种选择器的优先级相加之后再进行比较，但是注意，选择器优先级计算不会超过其最大的数量级。</p>
<p>如果选择器的优先级相同，则使用靠后的样式。</p>
<p>并集选择器的优先级是单独计算的，而并非相加，例如：<code>div, h1, p, .hello { }</code></p>
<p>可以在样式的最后添加一个 <code>!important</code>，此时该样式将会获得最高优先级，甚至超过内联样式的优先级，但是在开发中不建议使用。</p>
<blockquote>
<p>注意：选择器的优先级实质上是声明的优先级，因为只有声明会冲突而选择器不会冲突，只是我们习惯称其为选择器的优先级。</p>
</blockquote>
<hr>
<h2 id="伪类的顺序"><a href="#伪类的顺序" class="headerlink" title="伪类的顺序"></a>伪类的顺序</h2><p>涉及到 <code>&lt;a&gt;</code> 元素的伪类共有四个：</p>
<table>
<thead>
<tr>
<th>伪类</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>:link</code></td>
<td>普通的链接</td>
</tr>
<tr>
<td><code>:visited</code></td>
<td>被访问过的链接</td>
</tr>
<tr>
<td><code>:hover</code></td>
<td>有鼠标移入时的链接</td>
</tr>
<tr>
<td><code>:active</code></td>
<td>正在点击时的链接</td>
</tr>
</tbody></table>
<blockquote>
<p>四个选择器的优先级是相同的。</p>
</blockquote>
<p>如有以下样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123; <span class="attribute">color</span>: black; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: orange; &#125;</span><br></pre></td></tr></table></figure>

<p>试分析：</p>
<p>当鼠标点击该链接时，鼠标应先移入该链接，所以 <code>:active</code> 和 <code>:hover</code> 同时选中 <code>a</code> 元素，而 <code>:active</code> 和 <code>:hover</code> 的优先级相同，优先级相同时应用靠后的样式，因此此时 <code>:active</code> 的样式失效。</p>
<p>另有以下样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: orange; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123; <span class="attribute">color</span>: black; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure>

<p>不难发现，此时 <code>:hover</code> 和 <code>:active</code> 设置的样式均失效。</p>
<p>所以正确编写顺序应为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:link</span></span><br><span class="line"><span class="selector-pseudo">:visited</span></span><br><span class="line"><span class="selector-pseudo">:hover</span></span><br><span class="line"><span class="selector-pseudo">:active</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以简记为 LVHA（LOVE HATE）爱与恨。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML + CSS 基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>与 Web 前端的初次邂逅</title>
    <url>/front-end-basics/01-%E4%B8%8EWeb%E5%89%8D%E7%AB%AF%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85.html</url>
    <content><![CDATA[<h2 id="前端开发流程"><a href="#前端开发流程" class="headerlink" title="前端开发流程"></a>前端开发流程</h2><p>前端开发一般包括三个步骤：</p><ol>
<li><p>网页设计师根据需求设计网页</p>
</li>
<li><p>前端工程师将设计做成静态网页</p>
</li>
<li><p>后台工程师将静态网页修改为动态网页</p>
</li>
</ol><p>这里的静态网页不是指网页的动画效果，而是指数据的动态变化。</p><p><img src="/images/htmlcssbasics/1001/1.jpg" alt="开发流程"></p><p>现在的技术日新月异，不同公司的开发流程也有所不同，但基本遵循以上流程。</p><p>软件的架构 &gt;&gt;<a href="http://naotu.baidu.com/file/27b23af4e471e82354c472f5d540d804?token=07b260a35f429b70" target="_blank" rel="noopener">请戳我</a>&lt;&lt;</p><a id="more"></a>





<blockquote>
<p>以上开发流程是本人在学习时，课程中所讲述的应用架构，现如今早已物是人非，请前往搜索引擎搜索“前后端分离”。</p>
</blockquote>
<hr>
<h2 id="W3C"><a href="#W3C" class="headerlink" title="W3C"></a>W3C</h2><ul>
<li><p>万维网联盟（World Wid Web Consortium）</p>
</li>
<li><p>W3C 专门为了定义网页相关的标准而成立</p>
</li>
<li><p>W3C 定义了网页中的 HTML、CSS、DOM、HTTP 和 XML 等标准</p>
</li>
</ul>
<hr>
<h2 id="WHATWG"><a href="#WHATWG" class="headerlink" title="WHATWG"></a>WHATWG</h2><p>网页超文本应用技术工作小组（Web Hypertext Application Technology Working Group）</p>
<p>是一个以推动网络 HTML5 标准为目的而成立的组织。在 2004 年，由 Opera、Mozilla 基金会和苹果这些浏览器厂商组成。</p>
<p>历史：<br>WHATWG 成立的原因是 W3C 意图放弃 HTML，而力图发展 XML（可扩展标记记语言下的一个子集）技术。WHATWG 邮件列表公布于 2004-6-4 , 在 Opera–Mozilla 宣布加入后的 2  天便否决了由万维网联盟（W3C）成员在 W3C 工作室的 Web 标准。</p>
<p>2007-7-10 , Mozilla Foundation, Apple, Opera Software 建议 W3C 跟随 WHATWG 的 HTML5，将新的  HTML（标准通用标记语言下的一个应用）命名为“HTML5”。2007-4-7, 新的 HTML 工作组采纳了他们的建议。</p>
<hr>
<h2 id="HTML-简介"><a href="#HTML-简介" class="headerlink" title="HTML 简介"></a>HTML 简介</h2><ul>
<li><p>HTML（Hypertext Markup Language）<br>超文本标记语言</p>
</li>
<li><p>它负责网页的三个要素中的结构。</p>
</li>
<li><p>HTML 使用标签的形式来表示网页中的不同组成部分。</p>
</li>
<li><p>所谓超文本指的是超链接，使用超链接可以让我们从一个页面跳转到另一个页面。</p>
</li>
</ul>
<blockquote>
<p>网页的三个要素 &gt;&gt;<a href="http://naotu.baidu.com/file/de8e109854842b3a13b67c848f1fa964?token=1eea1aceca963cc8" target="_blank" rel="noopener">请戳我</a>&lt;&lt;</p>
</blockquote>
<hr>
<h2 id="HTML-规范（XHTML-规范）"><a href="#HTML-规范（XHTML-规范）" class="headerlink" title="HTML 规范（XHTML 规范）"></a>HTML 规范（XHTML 规范）</h2><ul>
<li><p>HTML 中不区分大小写，但我们一般都使用小写。</p>
</li>
<li><p>HTML 中的注释不能嵌套。</p>
</li>
<li><p>HTML 标签必须结构完整，要么成对出现，要么是自结束标签。<br>浏览器会尽最大努力正确的解析页面，你所有的不符合语法规范的内容，浏览器都会为你自动修正，但某些特殊情况时会修正错误。</p>
</li>
<li><p>自结束标签后需要加 <code>/</code>，如 <code>&lt;br/&gt;</code>、<code>&lt;img/&gt;</code>（XHTML 规范）。<br>在 HTML5 中可以不加 <code>/</code>，如 <code>&lt;br&gt;</code>、<code>&lt;img&gt;</code>，两种写法都正确。</p>
</li>
<li><p>HTML 标签可以嵌套，但不能交叉嵌套。</p>
</li>
<li><p>HTML 标签中的属性必须有值，且值必须加引号（单引号和双引号均可）。</p>
</li>
</ul>
<hr>
<h2 id="HTML-基础"><a href="#HTML-基础" class="headerlink" title="HTML 基础"></a>HTML 基础</h2><h3 id="lt-meta-gt-标签"><a href="#lt-meta-gt-标签" class="headerlink" title="&lt;meta/&gt; 标签"></a><code>&lt;meta/&gt;</code> 标签</h3><ul>
<li><code>&lt;meta/&gt;</code> 标签用来设置网页的一些元数据，比如网页的字符集、关键字、简介等<br><code>&lt;meta/&gt;</code> 是一个自结束标签。</li>
</ul>
<h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><ul>
<li><p>在 HTML 中共有 6 级标题标签 <code>&lt;h1&gt;</code>、<code>&lt;h2&gt;</code>、<code>&lt;h3&gt;</code>、<code>&lt;h4&gt;</code>、<code>&lt;h5&gt;</code>、<code>&lt;h6&gt;</code></p>
</li>
<li><p>在显示效果上 <code>&lt;h1&gt;</code> 最大，<code>&lt;h6&gt;</code>最小，但是文字的大小我们并不关心，因为文字大小属于样式</p>
</li>
<li><p>使用 HTML 标签时，关心的是标签的语义，我们使用的标签都是语义化标签</p>
</li>
<li><p>6 级标题中，<code>&lt;h1&gt;</code>最重要，表示一个网页的主要内容，<code>&lt;h2&gt; ~ &lt;h6&gt;</code> 重要性依次递减</p>
</li>
</ul>
<ul>
<li><p>对于搜索引擎来说，<code>&lt;h1&gt;</code> 的重要性仅次于 <code>&lt;title&gt;</code>，搜索引擎检索完 <code>&lt;title&gt;</code> 之后，会立即查看 <code>&lt;h1&gt;</code> 中的内容<br><code>&lt;h1&gt;</code>标签非常重要，它会影响到页面在搜索引擎中的排名，页面只能写一个 <code>&lt;h1&gt;</code> 标签。</p>
</li>
<li><p>一般页面中标题标签只使用 <code>&lt;h1&gt;</code>、<code>&lt;h2&gt;</code>、<code>&lt;h3&gt;</code>，其他标签基本不使用</p>
</li>
</ul>
<h3 id="lt-p-gt-标签"><a href="#lt-p-gt-标签" class="headerlink" title="&lt;p&gt; 标签"></a><code>&lt;p&gt;</code> 标签</h3><ul>
<li><p>段落标签，段落标签用于表示内容中的一个自然段<br>使用 <code>&lt;p&gt;</code> 标签来表示一个段落。</p>
</li>
<li><p><code>&lt;p&gt;</code> 标签中的文字，默认会独占一行，并且段与段之间会有一个间距，但样式我们并不关心</p>
</li>
<li><p>在 HTML 中，字符之间写再多的空格，浏览器也会当成一个空格解析，换行也只会当成一个空格解析</p>
</li>
<li><p>在页面中可以使用 <code>&lt;br&gt;</code> 标签来表示一个换行，<code>&lt;br&gt;</code> 标签是一个自结束标签</p>
</li>
<li><p><code>&lt;hr&gt;</code> 标签也是一个自结束标签，可以在页面中生成一条水平线</p>
</li>
</ul>
<h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><ul>
<li>在 HTML 中，一些如 <code>&lt;</code>、<code>&gt;</code> 等特殊字符是不能直接使用的，需要使用一些特殊的符号来表示这些特殊字符，这些特殊符号被称为实体（转义字符），浏览器解析到实体时，会自动将实体转换为其对应的字符。</li>
</ul>
<p>实体的语法：<code>&amp;实体的名称;</code></p>
<table>
<thead>
<tr>
<th>语法</th>
<th>实体含义</th>
<th>实体</th>
</tr>
</thead>
<tbody><tr>
<td><code>&amp;lt;</code></td>
<td><code>&lt;</code></td>
<td>&lt;</td>
</tr>
<tr>
<td><code>&amp;gt;</code></td>
<td><code>&gt;</code></td>
<td>&gt;</td>
</tr>
<tr>
<td><code>&amp;nbsp;</code></td>
<td>空格</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><code>&amp;copy;</code></td>
<td>版权符号</td>
<td>&copy;</td>
</tr>
</tbody></table>
<h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><ul>
<li><p><code>src</code> 属性配置的是图片的路径，目前我们所要使用的路径全部是相对路径<br>相对路径：相对路径指相对于当前资源所在目录的位置</p>
</li>
<li><p>可以使用 <code>../</code> 来返回一级目录，返回几级目录就使用几个 <code>../</code></p>
</li>
</ul>
<h3 id="图片的格式"><a href="#图片的格式" class="headerlink" title="图片的格式"></a>图片的格式</h3><ul>
<li>JPEG（JPG）<br>JPEG 图片支持的颜色比较多，图片可以压缩，但是不支持透明。<br>一般使用 JPEG 保存照片等颜色丰富的图片。</li>
</ul>
<ul>
<li>GIF<br>GIF 支持的颜色少，支持简单的透明（图片透明边界为水平和垂直），且支持动态图。<br>图片颜色单一或者是动态图时可以使用 GIF。</li>
</ul>
<ul>
<li>PNG<br>PNG 支持的颜色多，并且支持复杂的透明。<br>可以用来显示颜色复杂的透明的图片。</li>
</ul>
<ul>
<li>图片的使用原则<ol>
<li>效果不一致，使用效果好的。</li>
<li>效果一致，使用占容小的。</li>
</ol>
</li>
</ul>
<h3 id="lt-meta-gt-标签扩展"><a href="#lt-meta-gt-标签扩展" class="headerlink" title="&lt;meta&gt; 标签扩展"></a><code>&lt;meta&gt;</code> 标签扩展</h3><ul>
<li><p>使用 <code>&lt;meta&gt;</code> 标签设置网页的字符集<br><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p>
</li>
<li><p>使用 <code>&lt;meta&gt;</code> 标签设置网页的关键字<br><code>&lt;meta name=&quot;keywords&quot; content=&quot;HTML5, css, JavaScript&quot;&gt;</code></p>
</li>
<li><p>使用 <code>&lt;meta&gt;</code> 标签指定网页的描述<br><code>&lt;meta name=&quot;description&quot; content=&quot;发布物联网工程2班的相关信息&quot;&gt;</code></p>
</li>
<li><p>使用 <code>&lt;meta&gt;</code> 标签设置请求的重定向<br><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;5;url=http://www.baidu.com&quot;&gt;</code><br><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;时间;url=目标路径&quot;&gt;</code></p>
</li>
</ul>
<blockquote>
<p>搜索引擎在检索页面时，会同时检索页面中的关键词和描述，但是这两个值不会影响页面在搜索引擎中的排名。</p>
</blockquote>
<h3 id="lt-img-gt-图片标签"><a href="#lt-img-gt-图片标签" class="headerlink" title="&lt;img/&gt; 图片标签"></a><code>&lt;img/&gt;</code> 图片标签</h3><p>使用 <code>&lt;img/&gt;</code> 标签来向网页中引入一个<strong>外部</strong>图片<br><code>&lt;img/&gt;</code> 标签也是一个自结束标签。</p>
<p>属性：</p>
<ul>
<li><code>src</code>：设置一个外部图片的路径。</li>
<li><code>alt</code>：可以用来设置图片的描述，在图片不能显示时，会显示该描述。</li>
<li><code>width</code>：可以用来修改图片的宽度，一般使用 <code>px</code> 作为单位。</li>
<li><code>height</code>：可以用来修改图片的高度，一般使用 <code>px</code> 作为单位。</li>
</ul>
<p>例：<code>&lt;img src=&quot;images/1.jpg&quot; alt=&quot;这是一个大美女&quot; width=&quot;200px&quot; /&gt;</code></p>
<blockquote>
<p>搜索引擎可以通过 <code>alt</code> 属性来识别不同的图片，如果不写 <code>alt</code> 属性，则搜索引擎不会对 <code>&lt;img/&gt;</code> 中的图片进行收录。<br>  宽度和高度两个属性若只设置一个，另一个也会同时等比例自动调整。<br>  如果两个值同时指定则按照你指定的值来设置。<br>  一般开发中除了自适应的页面，不建议同时设置 <code>width</code> 和 <code>height</code></p>
</blockquote>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>使用超链接可以让我们从一个页面跳转到另一个页面。<br>使用 <code>&lt;a&gt;</code> 标签来创建一个超链接。</p>
<p>属性：</p>
<ul>
<li><p><code>href</code>：指向链接跳转的目标地址，可以写一个相对路径或一个完整的地址。</p>
</li>
<li><p><code>target</code>：规定在何处打开链接文档。<br>可选值：</p>
<ul>
<li><code>_self</code>，表示在当前窗口中打开 （默认值）。</li>
<li><code>_blank</code>，表示在一个新的窗口中打开。</li>
<li><code>name</code>，可以设置一个内联框架的 <code>name</code> 属性值，链接将会在指定的内联框架中打开。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="转角遇到-CSS"><a href="#转角遇到-CSS" class="headerlink" title="转角遇到 CSS"></a>转角遇到 CSS</h2><ul>
<li>层叠样式表（Cascading Style Sheets）</li>
<li>CSS 可以用来为网页创建样式表，通过样式表可以对网页进行装饰</li>
<li>所谓层叠，可以将整个网页想象成是一层一层的结构，层次高的将会覆盖层次低的</li>
<li>而 CSS 就可以分别为网页的各个层次设置样式</li>
</ul>
<hr>
<h2 id="CSS-语法"><a href="#CSS-语法" class="headerlink" title="CSS 语法"></a>CSS 语法</h2><p><code>&lt;style&gt;</code> 标签中完全是另一个世界，与 HTML 无关，所以 HTML 语法在 <code>&lt;style&gt;</code> 标签中不起作用。</p>
<p>CSS 的注释，作用和 HTML 注释类似，只不过它必须编写在 <code>&lt;style&gt;</code> 标签中，或者是 CSS 文件中。</p>
<p>CSS 组成：<code>选择器 + 声明块</code></p>
<ul>
<li><p>选择器：通过选择器可以选中页面中指定的元素（标签），并且将声明块中的样式应用到选择器对应的元素上。</p>
</li>
<li><p>声明块：声明块紧跟在选择器之后，使用一对 <code>{</code>、<code>}</code> 包裹起来。</p>
</li>
<li><p>声明块又由一组组“名值对”结构组成，这些名值对称为声明。</p>
</li>
<li><p>一个声明块中可以有多个声明（名值对），声明与声明之间使用 <code>;</code>（分号）隔开，声明的样式名和样式值之间使用 <code>:</code>（冒号）连接。</p>
</li>
</ul>
<hr>
<h2 id="块元素和内联元素"><a href="#块元素和内联元素" class="headerlink" title="块元素和内联元素"></a>块元素和内联元素</h2><h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><ul>
<li><p><code>&lt;div&gt;</code> 就是一个块元素<br>所谓的块元素就是会独占一行的元素，无论它的内容多与少，不管它的尺寸大与小，它都会独占一行。</p>
</li>
<li><p>常见的块元素：<code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;h1&gt;</code>、<code>&lt;h2&gt;</code>、<code>&lt;h3&gt;</code> ……</p>
</li>
</ul>
<blockquote>
<p>PS：<code>&lt;div&gt;</code> 标签没有任何语义，就是一个纯粹的块元素，相当纯粹，且不会为它包裹的子元素设置任何默认样式，<code>&lt;div&gt;</code> 元素主要用来进行页面布局。</p>
</blockquote>
<h3 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h3><ul>
<li><p><code>&lt;span&gt;</code> 就是一个内联元素（行内元素）<br>所谓的内联元素就是只占用自身大小的元素，不会独占一行。</p>
</li>
<li><p>常见的内联元素：<code>&lt;span&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code> ……</p>
</li>
</ul>
<blockquote>
<p>PS：<code>&lt;span&gt;</code> 标签没有任何语义，就是一个纯粹的内联元素，相当纯粹，且不会为它包裹的子元素设置任何默认样式，<code>&lt;span&gt;</code> 标签专门用来选中文字，以便为文字设置样式。</p>
</blockquote>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>块元素只用来页面布局。</li>
<li>内联元素主要用来选中文本设置样式。</li>
<li>一般情况下只使用块元素去包含内联元素，而不会使用内联元素去包含块元素。</li>
<li><code>&lt;a&gt;</code> 元素可以包含任意元素，除了它本身。</li>
<li><code>&lt;p&gt;</code> 元素不可以包含任何块元素。</li>
</ul>
<blockquote>
<p>提示：在 HTML5 中，块元素和内联元素几乎被去掉了，而使用了极其复杂的内容模型来描述，作为初学者的我们使用以上概念即可。</p>
</blockquote>
<hr>
<h2 id="三种添加样式的方法"><a href="#三种添加样式的方法" class="headerlink" title="三种添加样式的方法"></a>三种添加样式的方法</h2><h3 id="内联样式表"><a href="#内联样式表" class="headerlink" title="内联样式表"></a>内联样式表</h3><p>可以将 CSS 样式编写到元素（标签）的 <code>style</code> 属性当中。<br>例：<code>&lt;p style=&quot;color: green; font-size: 38px;&quot;&gt;16物联网工程2班&lt;/p&gt;</code></p>
<p>将样式直接编写到 <code>style</code> 属性中，这种样式我们成为内联样式，内联样式只对当前的元素（标签）中的内容起作用，内联样式不方便复用。</p>
<blockquote>
<p>PS：网页编写推崇结构、表现和行为三者分离，而内联样式属于结构与表现耦合，不方便后期的维护，所以不推荐使用。<br>  注意：元素（标签）的 <code>style</code> 属性和元素（标签）其他属性是同等地位。</p>
</blockquote>
<h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><p>也可以将 CSS 样式编写到 <code>&lt;head&gt;</code> 中的 <code>&lt;style&gt;</code> 标签里。</p>
<p>例：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: green;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>将样式编写到 <code>&lt;style&gt;</code> 标签中，然后通过 CSS 选择器选中指定元素，则可以同时为这些被选中的元素一起设置样式，便可以使样式进一步的复用。</p>
<blockquote>
<p>PS：将样式表编写到 <code>&lt;style&gt;</code> 标签中，可以使结构和表现两者分离，因此是推荐使用的方式</p>
</blockquote>
<h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3><p>还可以将 CSS 样式编写到外部的 CSS 文件中。</p>
<p>例：<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/reset.css&quot; /&gt;</code></p>
<p>然后通过 <code>&lt;link&gt;</code> 标签来将外部的 CSS 文件引入到当前页面中，这样外部文件中的 CSS 样式表将会应用到当前页面中。</p>
<p>将 CSS 样式统一编写到外部的样式表中，使结构和表现两者完全分离，可以使样式表在不同的页面中使用，最大限度的使样式进行复用。</p>
<blockquote>
<p>PS：用此种方法将样式统一写在样式表中，然后通过 <code>&lt;link&gt;</code> 标签引入，可以利用浏览器的缓存加快用户访问的速度，提高了用户体验。<br>  因此在开发过程中，<strong>强烈推荐</strong>使用的就是外部的 CSS 文件。</p>
</blockquote>
<p>第一节到此结束，下一节将介绍 CSS 选择器的知识。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML + CSS 基础</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
</search>
